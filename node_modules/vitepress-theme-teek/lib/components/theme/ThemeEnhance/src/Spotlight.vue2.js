'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Vue = require('vue');
var vitepress = require('vitepress');
require('vitepress-theme-teek/theme-chalk/tk-copy-banner.css');
var useLocale = require('../../../../composables/useLocale.js');
var useMediaQuery = require('../../../../composables/useMediaQuery.js');
var useStorage = require('../../../../composables/useStorage.js');
require('../../../../composables/useZIndex.js');
var click = require('../../../../static/icons/theme-enhance/click.js');
var index = require('../../ConfigProvider/index.js');
var Segmented_vue_vue_type_script_setup_true_name_Segmented_lang = require('../../../common/Segmented/src/Segmented.vue2.js');
var themeEnhance = require('./themeEnhance.js');
var namespace = require('./namespace.js');
var BaseTemplate_vue_vue_type_script_setup_true_name_BaseTemplate_lang = require('./components/BaseTemplate.vue2.js');
var SpotlightHover_vue_vue_type_script_setup_true_name_SpotlightHover_lang = require('./components/SpotlightHover.vue2.js');

var _sfc_main = /* @__PURE__ */ Vue.defineComponent({
  ...{ name: "Spotlight" },
  __name: "Spotlight",
  setup(__props) {
    const { getTeekConfigRef } = index.useTeekConfig();
    const themeEnhanceConfig = getTeekConfigRef("themeEnhance", {});
    const { t } = useLocale.useLocale();
    const { frontmatter } = vitepress.useData();
    const supportTouch = useMediaQuery.useMediaQuery(themeEnhance.touchMedia);
    const spotlight = useStorage.useStorage(namespace.spotlightStorageKey, themeEnhanceConfig.value.spotlight?.defaultValue ?? true);
    const oldSpotlight = Vue.ref(spotlight.value);
    Vue.watch(
      () => frontmatter.value.spotlight,
      (newVal) => {
        if (newVal !== void 0) {
          oldSpotlight.value = spotlight.value;
          spotlight.value = newVal;
        } else {
          spotlight.value = oldSpotlight.value;
        }
      },
      { immediate: true }
    );
    const segmentedOptions = Vue.computed(() => [
      {
        value: true,
        label: "ON",
        title: t("tk.themeEnhance.spotlight.onTipTitle"),
        ariaLabel: t("tk.themeEnhance.spotlight.onTipTitle")
      },
      {
        value: false,
        label: "OFF",
        title: t("tk.themeEnhance.spotlight.offTipTitle"),
        ariaLabel: t("tk.themeEnhance.spotlight.offTipTitle")
      }
    ]);
    const tips = [
      {
        title: `ON ${t("tk.themeEnhance.spotlight.onTipTitle")}`,
        content: t("tk.themeEnhance.spotlight.onHelpTipContent")
      },
      {
        title: `OFF ${t("tk.themeEnhance.spotlight.offTipTitle")}`,
        content: t("tk.themeEnhance.spotlight.offHelpTipContent")
      }
    ];
    return (_ctx, _cache) => {
      return Vue.openBlock(), Vue.createElementBlock(
        Vue.Fragment,
        null,
        [
          Vue.createVNode(BaseTemplate_vue_vue_type_script_setup_true_name_BaseTemplate_lang.default, {
            icon: Vue.unref(click.default),
            title: Vue.unref(t)("tk.themeEnhance.spotlight.title"),
            helper: !Vue.unref(themeEnhanceConfig).spotlight?.disableHelp,
            "helper-desc": Vue.unref(t)("tk.themeEnhance.spotlight.helpDesc"),
            tips,
            disabled: Vue.unref(supportTouch)
          }, {
            default: Vue.withCtx(() => [
              Vue.createVNode(Vue.unref(Segmented_vue_vue_type_script_setup_true_name_Segmented_lang.default), {
                modelValue: Vue.unref(spotlight),
                "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => Vue.isRef(spotlight) ? spotlight.value = $event : null),
                options: segmentedOptions.value,
                disabled: Vue.unref(supportTouch)
              }, null, 8, ["modelValue", "options", "disabled"])
            ]),
            _: 1
            /* STABLE */
          }, 8, ["icon", "title", "helper", "helper-desc", "disabled"]),
          Vue.unref(spotlight) && !Vue.unref(supportTouch) ? (Vue.openBlock(), Vue.createBlock(SpotlightHover_vue_vue_type_script_setup_true_name_SpotlightHover_lang.default, {
            key: 0,
            enabled: Vue.unref(spotlight) && !Vue.unref(supportTouch)
          }, null, 8, ["enabled"])) : Vue.createCommentVNode("v-if", true)
        ],
        64
        /* STABLE_FRAGMENT */
      );
    };
  }
});

exports.default = _sfc_main;
