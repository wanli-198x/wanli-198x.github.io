'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Vue = require('vue');
var vitepress = require('vitepress');
var index$1 = require('../../../../helper/dist/index.js');
var useNamespace = require('../../../../composables/useNamespace.js');
require('vitepress-theme-teek/theme-chalk/tk-copy-banner.css');
var useLocale = require('../../../../composables/useLocale.js');
var useSwitchData = require('../../../../composables/useSwitchData.js');
require('../../../../composables/useZIndex.js');
var index = require('../../ConfigProvider/index.js');

const _hoisted_1 = ["aria-label"];
const _hoisted_2 = ["aria-label"];
var _sfc_main = /* @__PURE__ */ Vue.defineComponent({
  ...{ name: "HomeBannerBgImage" },
  __name: "HomeBannerBgImage",
  setup(__props) {
    const ns = useNamespace.useNamespace("banner-bg-image");
    const { t } = useLocale.useLocale();
    const { getTeekConfigRef } = index.useTeekConfig();
    const bannerConfig = getTeekConfigRef("banner", {
      bgStyle: void 0,
      imgSrc: void 0,
      imgInterval: 15e3,
      imgShuffle: false,
      mask: true,
      maskBg: "rgba(0, 0, 0, 0.4)"
    });
    const isPartImgBgStyle = Vue.computed(() => bannerConfig.value.bgStyle === "partImg");
    const isFullImgBgStyle = Vue.computed(() => bannerConfig.value.bgStyle === "fullImg");
    const dataArray = Vue.computed(() => {
      const imgSrc = bannerConfig.value.imgSrc;
      return [index$1.isFunction(imgSrc) ? imgSrc() : imgSrc || []].flat().map((item) => item && vitepress.withBase(item));
    });
    const {
      data: imageSrc,
      start,
      index: index$2
    } = useSwitchData.useSwitchData(dataArray, {
      timeout: bannerConfig.value.imgInterval,
      shuffle: bannerConfig.value.imgShuffle,
      onAfterUpdate: () => {
        const nextIndex = (index$2.value + 1) % dataArray.value.length;
        const newValue = dataArray.value[nextIndex];
        if (newValue) {
          const img = new Image();
          img.src = newValue;
        }
      }
    });
    Vue.onMounted(() => {
      start();
    });
    const getStyle = () => {
      const { imgSrc, maskBg, imgInterval } = bannerConfig.value;
      const imgBgVar = ns.cssVarName("banner-img-bg");
      const maskBgColorVar = ns.cssVarName("banner-mask-bg-color");
      const imgSwitchIntervalVar = ns.cssVarName("banner-img-switch-interval-s");
      if (!imgSrc?.length) return { [imgBgVar]: ns.cssVar("bg-img-default") };
      return {
        [imgBgVar]: `url(${imageSrc.value}) center center / cover no-repeat`,
        [maskBgColorVar]: index$1.isString(maskBg) ? maskBg : `rgba(0, 0, 0, ${maskBg})`,
        [imgSwitchIntervalVar]: imgInterval / 1e3 + "s"
      };
    };
    return (_ctx, _cache) => {
      return Vue.openBlock(), Vue.createElementBlock(
        Vue.Fragment,
        null,
        [
          Vue.createElementVNode("div", {
            class: Vue.normalizeClass([Vue.unref(ns).b(), { part: isPartImgBgStyle.value, full: isFullImgBgStyle.value }]),
            style: Vue.normalizeStyle(getStyle()),
            "aria-label": Vue.unref(t)("tk.homeBanner.bgImgLabel")
          }, [
            Vue.unref(bannerConfig).mask && Vue.unref(bannerConfig).imgSrc ? (Vue.openBlock(), Vue.createElementBlock("div", {
              key: 0,
              class: "mask",
              "aria-label": Vue.unref(t)("tk.homeBanner.maskLabel")
            }, null, 8, _hoisted_2)) : Vue.createCommentVNode("v-if", true),
            isPartImgBgStyle.value ? Vue.renderSlot(_ctx.$slots, "default", { key: 1 }) : Vue.createCommentVNode("v-if", true)
          ], 14, _hoisted_1),
          isFullImgBgStyle.value ? Vue.renderSlot(_ctx.$slots, "default", { key: 0 }) : Vue.createCommentVNode("v-if", true)
        ],
        64
        /* STABLE_FRAGMENT */
      );
    };
  }
});

exports.default = _sfc_main;
