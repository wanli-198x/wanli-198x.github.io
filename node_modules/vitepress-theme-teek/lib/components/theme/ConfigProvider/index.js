'use strict';

var Vue = require('vue');
var vitepress = require('vitepress');
var index = require('../../../helper/dist/index.js');
var useAnchorScroll = require('../../../composables/useAnchorScroll.js');
require('vitepress-theme-teek/theme-chalk/tk-copy-banner.css');
var useMediaQuery = require('../../../composables/useMediaQuery.js');
var useViewTransition = require('../../../composables/useViewTransition.js');
require('../../../composables/useZIndex.js');
var helper = require('../../../config/post/helper.js');

const postsContext = Symbol("posts");
const teekConfigContext = Symbol("teekConfig");
const TeekConfigProvider = (layout) => {
  return Vue.defineComponent({
    name: "TeekConfigProvider",
    setup(_, { slots }) {
      Vue.provide(postsContext, useAllPosts());
      useAnchorScroll.useAnchorScroll().startWatch();
      const { getTeekConfig } = useTeekConfig();
      const viewTransitionConfig = getTeekConfig("viewTransition", {
        enabled: true,
        mode: "out-in",
        easing: "ease-in"
      });
      viewTransitionConfig.enabled && useViewTransition.useViewTransition(viewTransitionConfig);
      return () => Vue.h(layout, null, slots);
    }
  });
};
const useTeekConfig = () => {
  const { theme, frontmatter } = vitepress.useData();
  const teekConfigProvide = Vue.inject(teekConfigContext, {});
  const getTeekConfig = (key, defaultValue) => {
    let dv = defaultValue;
    if (index.isFunction(defaultValue)) dv = defaultValue();
    if (!key) {
      return { ...dv, ...theme.value, ...frontmatter.value, ...frontmatter.value.tk, ...Vue.unref(teekConfigProvide) };
    }
    const valueFromTheme = theme.value[key];
    const valueFromFrontmatter = frontmatter.value.tk?.[key] ?? frontmatter.value[key];
    const valueFromInject = Vue.unref(teekConfigProvide)?.[key];
    if (index.isObject(valueFromTheme) || index.isObject(valueFromFrontmatter) || index.isObject(valueFromInject)) {
      return { ...dv, ...valueFromTheme, ...valueFromFrontmatter, ...valueFromInject };
    }
    return valueFromInject ?? valueFromFrontmatter ?? valueFromTheme ?? dv;
  };
  const getTeekConfigRef = (key, defaultValue) => {
    return Vue.computed(() => getTeekConfig(key, defaultValue));
  };
  return { getTeekConfig, getTeekConfigRef };
};
const usePageState = () => {
  const { frontmatter } = vitepress.useData();
  const isHomePage = Vue.computed(
    () => !isCategoriesPage.value && !isTagsPage.value && frontmatter.value.layout === "home"
  );
  const isCategoriesPage = Vue.computed(() => !!frontmatter.value.categoriesPage);
  const isTagsPage = Vue.computed(() => !!frontmatter.value.tagsPage);
  const isArchivesPage = Vue.computed(() => !!frontmatter.value.archivesPage);
  const isCataloguePage = Vue.computed(() => !!frontmatter.value.catalogue);
  const isArticleOverviewPage = Vue.computed(() => !!frontmatter.value.articleOverviewPage);
  const isLoginUrl = Vue.computed(() => !!frontmatter.value.loginPage);
  const isRiskLinkPage = Vue.computed(() => !!frontmatter.value.riskLinkPage);
  return {
    isHomePage,
    isCategoriesPage,
    isTagsPage,
    isArchivesPage,
    isCataloguePage,
    isArticleOverviewPage,
    isLoginUrl,
    isRiskLinkPage
  };
};
const usePagePath = () => {
  const { getTeekConfigRef } = useTeekConfig();
  const { localeIndex, site } = vitepress.useData();
  const posts = usePosts();
  const categoryConfig = getTeekConfigRef("category", { path: "/categories" });
  const tagConfig = getTeekConfigRef("tag", { path: "/tags" });
  const categoryPath = Vue.computed(() => {
    const localeIndexConst = localeIndex.value;
    const localeName = localeIndexConst !== "root" ? `/${localeIndexConst}` : "";
    return `${localeName}${categoryConfig.value.path}${site.value.cleanUrls ? "" : ".html"}`;
  });
  const tagPath = Vue.computed(() => {
    const localeIndexConst = localeIndex.value;
    const localeName = localeIndexConst !== "root" ? `/${localeIndexConst}` : "";
    return `${localeName}${tagConfig.value.path}${site.value.cleanUrls ? "" : ".html"}`;
  });
  const postPagePath = Vue.computed(() => {
    let archivesUrl = "";
    let articleOverviewUrl = "";
    let loginUrl = "";
    let riskLinkUrl = "";
    posts.value.allPosts.forEach((item) => {
      const {
        frontmatter: { layout, archivesPage, articleOverviewPage, loginPage, riskLinkPage },
        url
      } = item;
      const isPageLayout = layout === "page";
      if (layout === "TkCataloguePage" || isPageLayout && archivesPage === true) archivesUrl = url;
      if (layout === "TkArticleOverviewPage" || isPageLayout && articleOverviewPage === true) {
        articleOverviewUrl = url;
      }
      if (layout === false && loginPage === true) loginUrl = url;
      if (layout === false && riskLinkPage === true) riskLinkUrl = url;
    });
    return { archivesUrl, articleOverviewUrl, loginUrl, riskLinkUrl };
  });
  return {
    categoryPath,
    tagPath,
    archivesPath: Vue.computed(() => postPagePath.value.archivesUrl),
    articleOverviewPath: Vue.computed(() => postPagePath.value.articleOverviewUrl),
    loginPath: Vue.computed(() => postPagePath.value.loginUrl),
    riskLinkPath: Vue.computed(() => postPagePath.value.riskLinkUrl)
  };
};
const useAllPosts = () => {
  const { theme } = vitepress.useData();
  const posts = theme.value.posts;
  return posts || helper.emptyPost;
};
const usePosts = () => {
  const { localeIndex } = vitepress.useData();
  const posts = useAllPosts();
  return Vue.computed(() => posts.locales?.[localeIndex.value] || posts);
};
const useTagColor = () => {
  const { getTeekConfigRef } = useTeekConfig();
  return getTeekConfigRef("tagColor", [
    { border: "#bfdbfe", bg: "#eff6ff", text: "#2563eb" },
    { border: "#e9d5ff", bg: "#faf5ff", text: "#9333ea" },
    { border: "#fbcfe8", bg: "#fdf2f8", text: "#db2777" },
    { border: "#a7f3d0", bg: "#ecfdf5", text: "#059669" },
    { border: "#fde68a", bg: "#fffbeb", text: "#d97706" },
    { border: "#a5f3fc", bg: "#ecfeff", text: "#0891b2" },
    { border: "#c7d2fe", bg: "#eef2ff", text: "#4f46e5" }
  ]);
};
const useWindowTransitionConfig = (condition) => {
  const { getTeekConfigRef } = useTeekConfig();
  const windowTransitionConfig = getTeekConfigRef("windowTransition", true);
  return Vue.computed(() => {
    const windowTransition = windowTransitionConfig.value;
    if (windowTransition === void 0) return true;
    return index.isObject(windowTransition) ? condition?.(windowTransition) ?? true : windowTransition !== false;
  });
};
const useCommon = () => {
  const isMobile = useMediaQuery.useMediaQuery("(max-width: 768px)");
  return { isMobile };
};
const useSidebar = () => {
  const hasSidebar = Vue.ref(true);
  const route = vitepress.useRoute();
  Vue.watch(
    () => route.path,
    async () => {
      if (!index.isClient) return;
      await Vue.nextTick();
      const sidebarDom = document.querySelector(".VPSidebar");
      if (sidebarDom) hasSidebar.value = true;
      else hasSidebar.value = false;
    },
    { immediate: true, flush: "post" }
  );
  return { hasSidebar };
};

exports.TeekConfigProvider = TeekConfigProvider;
exports.postsContext = postsContext;
exports.teekConfigContext = teekConfigContext;
exports.useAllPosts = useAllPosts;
exports.useCommon = useCommon;
exports.usePagePath = usePagePath;
exports.usePageState = usePageState;
exports.usePosts = usePosts;
exports.useSidebar = useSidebar;
exports.useTagColor = useTagColor;
exports.useTeekConfig = useTeekConfig;
exports.useWindowTransitionConfig = useWindowTransitionConfig;
