'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Vue = require('vue');
var vitepress = require('vitepress');
var index$1 = require('../../../../helper/dist/index.js');
var useNamespace = require('../../../../composables/useNamespace.js');
require('vitepress-theme-teek/theme-chalk/tk-copy-banner.css');
var useVpRouter = require('../../../../composables/useVpRouter.js');
require('../../../../composables/useZIndex.js');
var index = require('../../ConfigProvider/index.js');
var giscus = require('./giscus.js');

var _sfc_main = /* @__PURE__ */ Vue.defineComponent({
  ...{ name: "CommentGiscus" },
  __name: "index",
  setup(__props) {
    const ns = useNamespace.useNamespace();
    const vpRouter = useVpRouter.useVpRouter();
    const { getTeekConfig } = index.useTeekConfig();
    const { isDark } = vitepress.useData();
    const giscusOptions = getTeekConfig("comment", {}).options;
    const {
      repo,
      repoId,
      category,
      categoryId,
      mapping = "pathname",
      strict = "0",
      reactionsEnabled = "1",
      emitMetadata = "0",
      inputPosition = "top",
      lang = "zh-CN",
      theme: giscusThemeConfig,
      loading = "eager",
      useOnline = true,
      link = "https://giscus.app/client.js",
      integrity,
      ...options
    } = giscusOptions;
    const giscusTheme = Vue.computed(() => {
      if (index$1.isFunction(giscusThemeConfig)) return giscusThemeConfig(isDark.value);
      return giscusThemeConfig || (isDark.value ? "dark" : "light");
    });
    const giscusComponentFn = Vue.inject(giscus.giscusContext, () => null);
    const giscusComponent = giscusComponentFn?.(giscusOptions);
    const isShow = Vue.ref(false);
    const reloadGiscus = () => {
      isShow.value = false;
      Vue.nextTick(() => {
        isShow.value = true;
      });
    };
    Vue.onMounted(() => {
      if (!useOnline && !giscusComponent) {
        return console.error(
          "[Teek Error] Giscus initialization failed. Please configure the 'useOnline' to 'true' or provide the giscus component"
        );
      }
      reloadGiscus();
      vpRouter.bindAfterRouteChange(ns.join("giscus"), () => {
        reloadGiscus();
      });
    });
    return (_ctx, _cache) => {
      return isShow.value ? (Vue.openBlock(), Vue.createElementBlock(
        "div",
        {
          key: 0,
          class: Vue.normalizeClass(Vue.unref(ns).b("giscus"))
        },
        [
          Vue.unref(giscusComponent) ? (Vue.openBlock(), Vue.createBlock(Vue.resolveDynamicComponent(Vue.unref(giscusComponent)), Vue.mergeProps({
            key: 0,
            repo: Vue.unref(repo),
            "repo-id": Vue.unref(repoId),
            category: Vue.unref(category),
            "category-id": Vue.unref(categoryId),
            mapping: Vue.unref(mapping),
            "reactions-enabled": Vue.unref(reactionsEnabled),
            "emit-metadata": Vue.unref(emitMetadata),
            "input-position": Vue.unref(inputPosition),
            lang: Vue.unref(lang),
            theme: giscusTheme.value,
            loading: Vue.unref(loading)
          }, options), null, 16, ["repo", "repo-id", "category", "category-id", "mapping", "reactions-enabled", "emit-metadata", "input-position", "lang", "theme", "loading"])) : Vue.unref(useOnline) ? (Vue.openBlock(), Vue.createBlock(Vue.resolveDynamicComponent("script"), Vue.mergeProps({
            key: 1,
            defer: "",
            src: Vue.unref(link),
            integrity: Vue.unref(integrity),
            "data-repo": Vue.unref(repo),
            "data-repo-id": Vue.unref(repoId),
            "data-category": Vue.unref(category),
            "data-category-id": Vue.unref(categoryId),
            "data-mapping": Vue.unref(mapping),
            "data-strict": Vue.unref(strict),
            "data-reactions-enabled": Vue.unref(reactionsEnabled),
            "data-emit-metadata": Vue.unref(emitMetadata),
            "data-input-position": Vue.unref(inputPosition),
            "data-theme": giscusTheme.value,
            "data-lang": Vue.unref(lang)
          }, options, { crossorigin: "anonymous" }), null, 16, ["src", "integrity", "data-repo", "data-repo-id", "data-category", "data-category-id", "data-mapping", "data-strict", "data-reactions-enabled", "data-emit-metadata", "data-input-position", "data-theme", "data-lang"])) : Vue.createCommentVNode("v-if", true)
        ],
        2
        /* CLASS */
      )) : Vue.createCommentVNode("v-if", true);
    };
  }
});

exports.default = _sfc_main;
