'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Vue = require('vue');
var vitepress = require('vitepress');
var useNamespace = require('../../../../composables/useNamespace.js');
require('vitepress-theme-teek/theme-chalk/tk-copy-banner.css');
var useLocale = require('../../../../composables/useLocale.js');
require('../../../../composables/useZIndex.js');
var house = require('../../../../static/icons/house.js');
var index = require('../../ConfigProvider/index.js');
var Breadcrumb_vue_vue_type_script_setup_true_name_Breadcrumb_lang = require('../../../common/Breadcrumb/src/Breadcrumb.vue2.js');
var BreadcrumbItem_vue_vue_type_script_setup_true_name_BreadcrumbItem_lang = require('../../../common/Breadcrumb/src/BreadcrumbItem.vue2.js');
var index_vue_vue_type_script_setup_true_name_Icon_lang = require('../../../common/Icon/src/index.vue2.js');
require('@iconify/vue');

const _hoisted_1 = ["aria-label"];
const _hoisted_2 = ["href", "title", "aria-label"];
var _sfc_main = /* @__PURE__ */ Vue.defineComponent({
  ...{ name: "ArticleBreadcrumb" },
  __name: "index",
  setup(__props) {
    const ns = useNamespace.useNamespace("article-breadcrumb");
    const { t } = useLocale.useLocale();
    const { getTeekConfigRef } = index.useTeekConfig();
    const { localeIndex, theme, page } = vitepress.useData();
    const breadcrumb = getTeekConfigRef("breadcrumb", {
      enabled: true,
      showCurrentName: false,
      separator: "/",
      homeLabel: t("tk.articleBreadcrumb.home")
    });
    const relativePathArr = Vue.computed(() => page.value.filePath.split("/") || []);
    const breadcrumbList = Vue.computed(() => {
      const classifyList = [];
      const relativePathArrConst = relativePathArr.value;
      relativePathArrConst.forEach((item, index) => {
        const fileName = item.replace(/^\d+\./, "").split(".")?.[0] || "";
        if ((index !== relativePathArrConst.length - 1 || breadcrumb.value.showCurrentName) && fileName !== localeIndex.value) {
          classifyList.push({
            fileName,
            url: theme.value.catalogues?.inv[item]?.url || ""
          });
        }
      });
      return classifyList;
    });
    return (_ctx, _cache) => {
      return Vue.unref(breadcrumb)?.enabled ? (Vue.openBlock(), Vue.createElementBlock("div", {
        key: 0,
        class: Vue.normalizeClass(Vue.unref(ns).b()),
        role: "navigation",
        "aria-label": Vue.unref(t)("tk.articleBreadcrumb.label")
      }, [
        Vue.createVNode(Vue.unref(Breadcrumb_vue_vue_type_script_setup_true_name_Breadcrumb_lang.default), {
          separator: Vue.unref(breadcrumb).separator
        }, {
          default: Vue.withCtx(() => [
            Vue.createVNode(Vue.unref(BreadcrumbItem_vue_vue_type_script_setup_true_name_BreadcrumbItem_lang.default), null, {
              default: Vue.withCtx(() => [
                Vue.createElementVNode("a", {
                  href: Vue.unref(vitepress.withBase)("/"),
                  title: Vue.unref(breadcrumb).homeLabel,
                  class: "home hover-color",
                  "aria-label": Vue.unref(breadcrumb).homeLabel
                }, [
                  Vue.createVNode(Vue.unref(index_vue_vue_type_script_setup_true_name_Icon_lang.default), {
                    icon: Vue.unref(house.default),
                    "aria-hidden": "true"
                  }, null, 8, ["icon"])
                ], 8, _hoisted_2)
              ]),
              _: 1
              /* STABLE */
            }),
            (Vue.openBlock(true), Vue.createElementBlock(
              Vue.Fragment,
              null,
              Vue.renderList(breadcrumbList.value, (item, index) => {
                return Vue.openBlock(), Vue.createBlock(
                  Vue.unref(BreadcrumbItem_vue_vue_type_script_setup_true_name_BreadcrumbItem_lang.default),
                  { key: index },
                  {
                    default: Vue.withCtx(() => [
                      (Vue.openBlock(), Vue.createBlock(Vue.resolveDynamicComponent(item.url ? "a" : "span"), {
                        href: item.url && Vue.unref(vitepress.withBase)(`/${item.url}`),
                        title: item.fileName,
                        class: Vue.normalizeClass([item.url ? "hover-color" : ""]),
                        "aria-label": item.fileName
                      }, {
                        default: Vue.withCtx(() => [
                          Vue.createTextVNode(
                            Vue.toDisplayString(item.fileName),
                            1
                            /* TEXT */
                          )
                        ]),
                        _: 2
                        /* DYNAMIC */
                      }, 1032, ["href", "title", "class", "aria-label"]))
                    ]),
                    _: 2
                    /* DYNAMIC */
                  },
                  1024
                  /* DYNAMIC_SLOTS */
                );
              }),
              128
              /* KEYED_FRAGMENT */
            ))
          ]),
          _: 1
          /* STABLE */
        }, 8, ["separator"])
      ], 10, _hoisted_1)) : Vue.createCommentVNode("v-if", true);
    };
  }
});

exports.default = _sfc_main;
