'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Vue = require('vue');
var index$1 = require('../../../../helper/dist/index.js');
var useEventListener = require('../../../../composables/useEventListener.js');
require('vitepress');
require('vitepress-theme-teek/theme-chalk/tk-copy-banner.css');
var useDebounce = require('../../../../composables/useDebounce.js');
var useLocale = require('../../../../composables/useLocale.js');
require('../../../../composables/useZIndex.js');
var comment = require('../../../../static/icons/comment.js');
var index = require('../../ConfigProvider/index.js');
var method = require('../../../common/Message/src/method.js');
var index_vue_vue_type_script_setup_true_name_Icon_lang = require('../../../common/Icon/src/index.vue2.js');
require('@iconify/vue');
var namespace = require('./namespace.js');

const _hoisted_1 = ["title", "aria-label"];
var _sfc_main = /* @__PURE__ */ Vue.defineComponent({
  ...{ name: "ToComment" },
  __name: "ToComment",
  setup(__props) {
    const { t } = useLocale.useLocale();
    const { getTeekConfigRef } = index.useTeekConfig();
    const toCommentConfig = getTeekConfigRef("toComment", {});
    const scrollTop = Vue.ref(0);
    const showToComment = Vue.computed(() => {
      if (!index$1.isClient) return false;
      const docContentHeight = document.querySelector(".content-container .main")?.getBoundingClientRect().height;
      const docFooterHeight = document.querySelector(".VPDocFooter")?.getBoundingClientRect().height || 200;
      let height = 0;
      if (docContentHeight) height = docContentHeight - docFooterHeight - window.innerHeight / 2;
      return scrollTop.value < height;
    });
    const scrollToComment = useDebounce.useDebounce(
      () => {
        if (!index$1.isClient) return;
        document.querySelector(`#${namespace.ns.join("comment")}`)?.scrollIntoView({ behavior: "smooth" });
        setTimeout(() => {
          toCommentConfig.value.done?.(method.default);
        }, 600);
      },
      500,
      true
    );
    const watchScroll = () => {
      scrollTop.value = document.documentElement.scrollTop || document.body.scrollTop || 0;
    };
    useEventListener.useEventListener(() => window, "scroll", watchScroll);
    return (_ctx, _cache) => {
      return Vue.openBlock(), Vue.createBlock(Vue.Transition, {
        name: Vue.unref(namespace.ns).join("fade")
      }, {
        default: Vue.withCtx(() => [
          Vue.renderSlot(_ctx.$slots, "default", {
            show: showToComment.value,
            icon: Vue.unref(comment.default),
            scrollToComment: Vue.unref(scrollToComment)
          }, () => [
            Vue.withDirectives(Vue.createElementVNode("div", {
              title: Vue.unref(t)("tk.rightBottomButton.toComment"),
              class: Vue.normalizeClass(Vue.unref(namespace.ns).e("button")),
              onClick: _cache[0] || (_cache[0] = //@ts-ignore
              (...args) => Vue.unref(scrollToComment) && Vue.unref(scrollToComment)(...args)),
              role: "button",
              "aria-label": Vue.unref(t)("tk.rightBottomButton.toComment")
            }, [
              Vue.createVNode(Vue.unref(index_vue_vue_type_script_setup_true_name_Icon_lang.default), {
                icon: Vue.unref(comment.default),
                "aria-hidden": "true"
              }, null, 8, ["icon"])
            ], 10, _hoisted_1), [
              [Vue.vShow, showToComment.value]
            ])
          ])
        ]),
        _: 3
        /* FORWARDED */
      }, 8, ["name"]);
    };
  }
});

exports.default = _sfc_main;
