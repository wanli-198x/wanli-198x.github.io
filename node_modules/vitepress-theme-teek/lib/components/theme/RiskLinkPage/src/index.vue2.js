'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Vue = require('vue');
var vitepress = require('vitepress');
var index = require('../../../../helper/dist/index.js');
var useNamespace = require('../../../../composables/useNamespace.js');
require('vitepress-theme-teek/theme-chalk/tk-copy-banner.css');
var useLocale = require('../../../../composables/useLocale.js');
require('../../../../composables/useZIndex.js');

const _hoisted_1 = ["src"];
const _hoisted_2 = { key: 1 };
var _sfc_main = /* @__PURE__ */ Vue.defineComponent({
  ...{ name: "RiskLinkPage" },
  __name: "index",
  setup(__props) {
    const ns = useNamespace.useNamespace("risk-link");
    const { t } = useLocale.useLocale();
    const { frontmatter } = vitepress.useData();
    const targetLink = Vue.ref("");
    Vue.onMounted(() => {
      const { searchParams } = new URL(window.location.href);
      const target = searchParams.get("target");
      if (target && index.isValidURL(target)) {
        targetLink.value = target;
      }
    });
    const confirmRedirect = () => {
      window.location.href = targetLink.value;
    };
    return (_ctx, _cache) => {
      return Vue.openBlock(), Vue.createElementBlock(
        "div",
        {
          class: Vue.normalizeClass([Vue.unref(ns).b(), Vue.unref(ns).join("center"), "flx-space-y-20"])
        },
        [
          Vue.createElementVNode(
            "div",
            {
              class: Vue.normalizeClass([Vue.unref(ns).e("header"), "flx-align-center"])
            },
            [
              Vue.unref(frontmatter).logo ? (Vue.openBlock(), Vue.createElementBlock("img", {
                key: 0,
                src: Vue.unref(frontmatter).logo,
                alt: "logo"
              }, null, 8, _hoisted_1)) : Vue.createCommentVNode("v-if", true),
              targetLink.value ? (Vue.openBlock(), Vue.createElementBlock(
                "p",
                {
                  key: 1,
                  class: Vue.normalizeClass(Vue.unref(ns).e("title"))
                },
                Vue.toDisplayString(Vue.unref(frontmatter).desc ? Vue.unref(frontmatter).desc : Vue.unref(t)("tk.riskLink.title", { name: Vue.unref(frontmatter).name || "VitePress Theme Teek" })),
                3
                /* TEXT, CLASS */
              )) : (Vue.openBlock(), Vue.createElementBlock(
                "p",
                {
                  key: 2,
                  class: Vue.normalizeClass(Vue.unref(ns).e("title"))
                },
                Vue.toDisplayString(Vue.unref(frontmatter).linkIllegal ? Vue.unref(frontmatter).linkIllegal : Vue.unref(t)("tk.riskLink.linkIllegal")),
                3
                /* TEXT, CLASS */
              ))
            ],
            2
            /* CLASS */
          ),
          targetLink.value ? (Vue.openBlock(), Vue.createElementBlock(
            "p",
            {
              key: 0,
              class: Vue.normalizeClass([Vue.unref(ns).e("link"), "sle"])
            },
            Vue.toDisplayString(targetLink.value),
            3
            /* TEXT, CLASS */
          )) : Vue.createCommentVNode("v-if", true),
          targetLink.value ? (Vue.openBlock(), Vue.createElementBlock("div", _hoisted_2, [
            Vue.createElementVNode(
              "button",
              {
                class: "btn",
                onClick: confirmRedirect
              },
              Vue.toDisplayString(Vue.unref(t)("tk.riskLink.confirmButtonText")),
              1
              /* TEXT */
            )
          ])) : Vue.createCommentVNode("v-if", true)
        ],
        2
        /* CLASS */
      );
    };
  }
});

exports.default = _sfc_main;
