'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Vue = require('vue');
var index = require('../../../../helper/dist/index.js');
require('vitepress');
var useNamespace = require('../../../../composables/useNamespace.js');
require('vitepress-theme-teek/theme-chalk/tk-copy-banner.css');
require('../../../../composables/useZIndex.js');
var index_vue_vue_type_script_setup_true_name_Icon_lang = require('../../Icon/src/index.vue2.js');
require('@iconify/vue');

const _hoisted_1 = ["src", "alt", "srcSet"];
const _hoisted_2 = { key: 2 };
var _sfc_main = /* @__PURE__ */ Vue.defineComponent({
  ...{ name: "Avatar" },
  __name: "index",
  props: {
    size: {},
    shape: { default: "circle" },
    icon: {},
    iconSize: {},
    src: {},
    alt: {},
    srcSet: {},
    fit: { default: "cover" },
    bgColor: {},
    textColor: {},
    textSize: {},
    text: {}
  },
  emits: ["error"],
  setup(__props, { emit: __emit }) {
    const emit = __emit;
    const ns = useNamespace.useNamespace("avatar");
    const hasLoadError = Vue.ref(false);
    const avatarClass = Vue.computed(() => {
      const classList = [ns.b()];
      if (index.isString(__props.size)) classList.push(ns.m(__props.size));
      if (__props.icon) classList.push(ns.m("icon"));
      if (__props.shape) classList.push(ns.m(__props.shape));
      return classList;
    });
    const avatarStyle = Vue.computed(() => {
      return {
        [ns.cssVarName("avatar-size")]: index.addUnit(__props.size),
        [ns.cssVarName("avatar-bg-color")]: __props.bgColor,
        [ns.cssVarName("avatar-text-color")]: __props.textColor,
        [ns.cssVarName("avatar-text-size")]: index.addUnit(__props.textSize),
        [ns.cssVarName("avatar-icon-size")]: index.addUnit(__props.iconSize)
      };
    });
    const imgStyle = Vue.computed(() => ({ objectFit: __props.fit }));
    Vue.watch(
      () => __props.src,
      () => hasLoadError.value = false
    );
    const handleError = (e) => {
      hasLoadError.value = true;
      emit("error", e);
    };
    const captureText = (text) => {
      const isChinese = /^[\u4e00-\u9fa5]+$/.test(text);
      if (isChinese) return text.charAt(0);
      const words = text.split(/\s+/).filter((word) => word.length > 0);
      if (words.length >= 2) {
        return words.slice(0, 2).map((word) => word.charAt(0).toUpperCase()).join("");
      }
      if (words.length === 1) return text.slice(0, 2).toUpperCase();
      return "";
    };
    return (_ctx, _cache) => {
      return Vue.openBlock(), Vue.createElementBlock(
        "span",
        {
          class: Vue.normalizeClass(avatarClass.value),
          style: Vue.normalizeStyle(avatarStyle.value)
        },
        [
          (__props.src || __props.srcSet) && !hasLoadError.value ? (Vue.openBlock(), Vue.createElementBlock("img", {
            key: 0,
            src: __props.src,
            alt: __props.alt,
            srcSet: __props.srcSet,
            style: Vue.normalizeStyle(imgStyle.value),
            onError: handleError
          }, null, 44, _hoisted_1)) : __props.icon ? (Vue.openBlock(), Vue.createBlock(Vue.unref(index_vue_vue_type_script_setup_true_name_Icon_lang.default), {
            key: 1,
            icon: __props.icon
          }, null, 8, ["icon"])) : __props.text ? (Vue.openBlock(), Vue.createElementBlock(
            "span",
            _hoisted_2,
            Vue.toDisplayString(captureText(__props.text)),
            1
            /* TEXT */
          )) : Vue.renderSlot(_ctx.$slots, "default", { key: 3 })
        ],
        6
        /* CLASS, STYLE */
      );
    };
  }
});

exports.default = _sfc_main;
