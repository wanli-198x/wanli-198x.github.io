'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Vue = require('vue');
require('vitepress');
var useNamespace = require('../../../../composables/useNamespace.js');
require('vitepress-theme-teek/theme-chalk/tk-copy-banner.css');
require('../../../../composables/useZIndex.js');
var SegmentedItem_vue_vue_type_script_setup_true_name_SegmentedItem_lang = require('./SegmentedItem.vue2.js');

var _sfc_main = /* @__PURE__ */ Vue.defineComponent({
  ...{ name: "Segmented" },
  __name: "Segmented",
  props: /* @__PURE__ */ Vue.mergeModels({
    options: {},
    disabled: { type: Boolean }
  }, {
    "modelValue": { type: [String, Number, Object, Boolean] },
    "modelModifiers": {}
  }),
  emits: ["update:modelValue"],
  setup(__props) {
    const ns = useNamespace.useNamespace("segmented");
    const model = Vue.useModel(__props, "modelValue");
    return (_ctx, _cache) => {
      return Vue.openBlock(), Vue.createElementBlock(
        "fieldset",
        {
          class: Vue.normalizeClass(Vue.unref(ns).b())
        },
        [
          (Vue.openBlock(true), Vue.createElementBlock(
            Vue.Fragment,
            null,
            Vue.renderList(__props.options, (option) => {
              return Vue.openBlock(), Vue.createBlock(SegmentedItem_vue_vue_type_script_setup_true_name_SegmentedItem_lang.default, Vue.mergeProps({
                key: option.name,
                modelValue: model.value,
                "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => model.value = $event)
              }, { ref_for: true }, option, { disabled: __props.disabled }), null, 16, ["modelValue", "disabled"]);
            }),
            128
            /* KEYED_FRAGMENT */
          ))
        ],
        2
        /* CLASS */
      );
    };
  }
});

exports.default = _sfc_main;
