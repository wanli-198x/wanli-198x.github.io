'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Vue = require('vue');
var index = require('../../../../helper/dist/index.js');
require('vitepress');
var useNamespace = require('../../../../composables/useNamespace.js');
require('vitepress-theme-teek/theme-chalk/tk-copy-banner.css');
require('../../../../composables/useZIndex.js');
var SvgIcon_vue_vue_type_script_setup_true_name_SvgIcon_lang = require('./components/SvgIcon.vue2.js');
var FontIcon_vue_vue_type_script_setup_true_lang = require('./components/FontIcon.vue2.js');
var IconifyOffline_vue_vue_type_script_setup_true_name_IconifyOffline_lang = require('./components/IconifyOffline.vue2.js');
var IconifyOnline_vue_vue_type_script_setup_true_lang = require('./components/IconifyOnline.vue2.js');

const _hoisted_1 = ["innerHTML"];
const _hoisted_2 = ["src", "alt"];
var _sfc_main = /* @__PURE__ */ Vue.defineComponent({
  ...{ name: "Icon" },
  __name: "index",
  props: {
    icon: { default: "" },
    iconType: {},
    size: {},
    color: {},
    hover: { type: Boolean, default: false },
    hoverColor: {},
    imgAlt: {},
    pointer: { type: Boolean, default: false },
    style: {}
  },
  setup(__props) {
    const ns = useNamespace.useNamespace("icon");
    const props = Vue.createPropsRestProxy(__props, ["icon", "iconType", "color", "hover", "hoverColor", "pointer"]);
    const slot = Vue.useSlots();
    const getStyle = () => {
      return {
        ...props.style,
        ...__props.pointer ? { cursor: "pointer" } : void 0,
        "--icon-color": __props.color,
        "--icon-size": props.size && index.addUnit(props.size),
        "--icon-color-hover": __props.hoverColor || ns.cssVar("theme-color")
      };
    };
    const finalIcon = Vue.computed(() => {
      if (!index.isString(__props.icon)) return Vue.toRaw(__props.icon);
      return __props.icon.replace(/^(svg-|if-|uni-|sym-|img-)/i, "");
    });
    const fontIconType = Vue.computed(() => {
      if (__props.iconType && ["unicode", "iconfont", "symbol"].includes(__props.iconType)) {
        return __props.iconType;
      }
      if (!index.isString(__props.icon)) return "";
      const caseIconName = __props.icon.toLowerCase();
      if (caseIconName.startsWith("if-") || caseIconName.startsWith("iconfont") || finalIcon.value.startsWith("icon-")) {
        return "iconfont";
      }
      if (caseIconName.startsWith("uni-") || /^&#x[\da-f]+/i.test(__props.icon) || __props.icon.length === 1 && __props.icon.charCodeAt(0) >= 57344 && __props.icon.charCodeAt(0) <= 63743) {
        return "unicode";
      }
      if (caseIconName.startsWith("sym-")) return "symbol";
      return "";
    });
    const isSvgIcon = Vue.computed(() => index.isString(__props.icon) && (__props.iconType === "svg" || __props.icon.startsWith("svg-") || index.isString(__props.icon)));
    const isSvgIconHtml = Vue.computed(() => index.isString(__props.icon) && __props.icon?.includes("<svg"));
    const isFontIcon = Vue.computed(() => index.isString(__props.icon) && fontIconType.value);
    const isComponent = Vue.computed(
      () => !index.isString(__props.icon) && (__props.iconType === "component" || index.isObject(__props.icon) && ("setup" in __props.icon || "render" in __props.icon) || typeof __props.icon === "function")
    );
    const isIconifyOffline = Vue.computed(() => !index.isString(__props.icon) && (__props.iconType === "iconifyOffline" || "body" in __props.icon));
    const isIconifyOnline = Vue.computed(() => index.isString(__props.icon) && (__props.iconType === "iconifyOnline" || __props.icon.includes(":")));
    const isImage = Vue.computed(
      () => index.isString(__props.icon) && (__props.iconType === "img" || __props.icon.toLowerCase().startsWith("img-") || [".png", ".jpg", ".jpeg", ".gif", ".bmp", ".webp", ".svg"].some((ext) => __props.icon.endsWith(ext)))
    );
    return (_ctx, _cache) => {
      return !isFontIcon.value && !isImage.value && !isSvgIconHtml.value ? (Vue.openBlock(), Vue.createElementBlock(
        "i",
        {
          key: 0,
          class: Vue.normalizeClass([Vue.unref(ns).b(), Vue.unref(ns).is("hover", __props.hover)]),
          style: Vue.normalizeStyle(getStyle())
        },
        [
          Vue.unref(slot).default ? Vue.renderSlot(_ctx.$slots, "default", { key: 0 }) : isComponent.value ? (Vue.openBlock(), Vue.createBlock(Vue.resolveDynamicComponent(finalIcon.value), {
            key: 1,
            size: __props.size
          }, null, 8, ["size"])) : isIconifyOffline.value ? (Vue.openBlock(), Vue.createBlock(IconifyOffline_vue_vue_type_script_setup_true_name_IconifyOffline_lang.default, {
            key: 2,
            icon: finalIcon.value
          }, null, 8, ["icon"])) : isIconifyOnline.value ? (Vue.openBlock(), Vue.createBlock(IconifyOnline_vue_vue_type_script_setup_true_lang.default, {
            key: 3,
            icon: finalIcon.value
          }, null, 8, ["icon"])) : isSvgIcon.value ? (Vue.openBlock(), Vue.createBlock(SvgIcon_vue_vue_type_script_setup_true_name_SvgIcon_lang.default, {
            key: 4,
            icon: finalIcon.value
          }, null, 8, ["icon"])) : Vue.createCommentVNode("v-if", true)
        ],
        6
        /* CLASS, STYLE */
      )) : isSvgIconHtml.value ? (Vue.openBlock(), Vue.createElementBlock("i", {
        key: 1,
        innerHTML: __props.icon,
        class: Vue.normalizeClass([Vue.unref(ns).b(), Vue.unref(ns).is("hover", __props.hover)]),
        style: Vue.normalizeStyle(getStyle())
      }, null, 14, _hoisted_1)) : isFontIcon.value && fontIconType.value ? (Vue.openBlock(), Vue.createBlock(FontIcon_vue_vue_type_script_setup_true_lang.default, {
        key: 2,
        icon: finalIcon.value,
        iconType: fontIconType.value,
        class: Vue.normalizeClass([Vue.unref(ns).b(), Vue.unref(ns).is("hover", __props.hover)]),
        style: Vue.normalizeStyle(getStyle())
      }, null, 8, ["icon", "iconType", "class", "style"])) : isImage.value ? (Vue.openBlock(), Vue.createElementBlock("img", {
        key: 3,
        src: finalIcon.value,
        alt: __props.imgAlt,
        class: Vue.normalizeClass([Vue.unref(ns).b(), Vue.unref(ns).is("hover", __props.hover)]),
        style: Vue.normalizeStyle(getStyle())
      }, null, 14, _hoisted_2)) : Vue.createCommentVNode("v-if", true);
    };
  }
});

exports.default = _sfc_main;
