import { Ref } from 'vue';
export type UvPvProvider = "" | "busuanzi" | "vercount";
export interface UvPvData {
    /** 网站访问量 */
    site_pv?: number;
    /** 单页面访问量 */
    page_pv?: number;
    /** 网站访客数 */
    site_uv?: number;
    /** 单页面访客数 */
    page_uv?: number;
    /** 今日数据 */
    today?: {
        site_pv: number;
        site_uv: number;
        page_pv: number;
        page_uv: number;
    };
    /** 昨日数据 */
    yesterday?: {
        site_pv: number;
        site_uv: number;
        page_pv: number;
        page_uv: number;
    };
}
export interface UseUvPvOptions {
    /**
     * 统计接口地址
     */
    url?: string;
    /**
     * 网站流量统计提供商
     */
    provider?: UvPvProvider;
    /**
     * 如果请求接口失败，是否重试，类型 boolean
     *
     * @default false
     */
    tryRequest?: boolean;
    /**
     * 重试次数，仅当 tryRequest 为 true 时有效
     *
     * @default 5
     */
    tryCount?: number;
    /**
     * 重试间隔时间，单位毫秒，仅当 tryRequest 为 true 时有效
     *
     * @default 2000
     */
    tryIterationTime?: number;
    /**
     * 自定义请求函数，返回 UvPvData 数据
     *
     * @param url 统计接口地址
     * @param createScriptFn 创建一个 script 标签的函数
     */
    requestFn?: (url: string | undefined, createScriptFn: typeof createScript) => UvPvData | Promise<UvPvData>;
}
/**
 * 统计网站访问量（busuanzi、vercount）
 *
 * @param immediate 是否初始化请求，即自动执行一次 request
 * @param options 配置项
 */
export declare const useUvPv: (immediate?: boolean, options?: UseUvPvOptions) => {
    sitePv: Readonly< Ref<number, number>>;
    siteUv: Readonly< Ref<number, number>>;
    pagePv: Readonly< Ref<number, number>>;
    pageUv: Readonly< Ref<number, number>>;
    today: Readonly< Ref<{
        readonly site_pv: number;
        readonly site_uv: number;
        readonly page_pv: number;
        readonly page_uv: number;
    }, {
        readonly site_pv: number;
        readonly site_uv: number;
        readonly page_pv: number;
        readonly page_uv: number;
    }>>;
    yesterday: Readonly< Ref<{
        readonly site_pv: number;
        readonly site_uv: number;
        readonly page_pv: number;
        readonly page_uv: number;
    }, {
        readonly site_pv: number;
        readonly site_uv: number;
        readonly page_pv: number;
        readonly page_uv: number;
    }>>;
    isGet: Readonly< Ref<boolean, boolean>>;
    request: () => void;
};
/**
 * 创建一个 script 标签
 */
export declare const createScript: (url: string, immediate?: boolean) => HTMLScriptElement;
/**
 * 请求 busuanzi 计时器数据
 *
 * @param url 请求链接，默认为官方提供的链接，自建的需要手动传入
 */
export declare const callBusuanzi: (url?: string) => Promise<UvPvData>;
/**
 * 请求 vercount 计时器数据
 *
 * @param url 请求链接，默认为官方提供的链接，自建的需要手动传入
 * @param timeout 请求超时时间，5000 是 vercount 默认的超时时间
 */
export declare const callVercount: (url?: string, timeout?: number) => Promise<UvPvData>;
export type UseUvPvReturn = ReturnType<typeof useUvPv>;
