'use strict';

var namespace_module = require('./cssModule/namespace.module.scss.js');

const useNamespace = (block = "", namespaceOverrides) => {
  const finalNamespace = namespaceOverrides || namespace_module.default.namespace;
  const b = (blockSuffix) => {
    return createBem(finalNamespace, block, blockSuffix);
  };
  const e = (element) => {
    return createBem(finalNamespace, block, "", element);
  };
  const m = (modifier) => {
    return createBem(finalNamespace, block, "", "", modifier);
  };
  const be = (blockSuffix, element) => {
    return createBem(finalNamespace, block, blockSuffix, element);
  };
  const bm = (blockSuffix, modifier) => {
    return createBem(finalNamespace, block, blockSuffix, "", modifier);
  };
  const em = (element, modifier) => {
    return createBem(finalNamespace, block, "", element, modifier);
  };
  const bem = (blockSuffix, element, modifier) => {
    return createBem(finalNamespace, block, blockSuffix, element, modifier);
  };
  const is = (name, bool = true) => {
    return bool ? `is-${name}` : "";
  };
  const has = (name, bool = true) => {
    return bool ? `has-${name}` : "";
  };
  const createBem = (namespace, block2, blockSuffix, element, modifier) => {
    let space = `${namespace}-${block2}`;
    if (blockSuffix) space += `-${blockSuffix}`;
    if (element) space += `__${element}`;
    if (modifier) space += `--${modifier}`;
    return space;
  };
  const join = (scope) => {
    return `${finalNamespace}-${scope}`;
  };
  const cssVar = (name) => `var(--${finalNamespace}-${name})`;
  const cssVarName = (name) => `--${finalNamespace}-${name}`;
  const storageKey = (...key) => `${finalNamespace}:${key.join(":")}`;
  return {
    namespaceModule: namespace_module.default,
    namespace: namespace_module.default.namespace,
    b,
    e,
    m,
    be,
    bm,
    em,
    bem,
    is,
    has,
    createBem,
    join,
    cssVar,
    cssVarName,
    storageKey
  };
};

exports.useNamespace = useNamespace;
