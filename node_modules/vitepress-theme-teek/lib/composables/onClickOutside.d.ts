import { ComponentPublicInstance, MaybeRef, MaybeRefOrGetter } from 'vue';
export type VueInstance = ComponentPublicInstance;
export type MaybeElementRef<T extends MaybeElement = MaybeElement> = MaybeRef<T>;
export type MaybeElement = HTMLElement | SVGElement | VueInstance | undefined | null;
export interface OnClickOutsideOptions<Controls extends boolean = false> {
    /**
     * 忽略的元素（传入元素选择器）
     */
    ignore?: MaybeRefOrGetter<(MaybeRef | string)[]>;
    /**
     * 事件监听配置项是否使用 capture
     *
     * @default true
     */
    capture?: boolean;
    /**
     * 焦点移动到 iframe 时，是否触发 onClickOutside
     *
     * @default false
     */
    detectIframe?: boolean;
    /**
     * 是否使用控件控制
     *
     * @default false
     */
    controls?: Controls;
}
/**
 * 监听点击事件，判断是否点击到目标元素外
 */
export type OnClickOutsideHandler<T extends {
    detectIframe: OnClickOutsideOptions["detectIframe"];
    controls: boolean;
} = {
    detectIframe: false;
    controls: false;
}> = (event: T["controls"] extends true ? Event | (T["detectIframe"] extends true ? PointerEvent | FocusEvent : PointerEvent) : T["detectIframe"] extends true ? PointerEvent | FocusEvent : PointerEvent) => void;
export declare const onClickOutside: (target: MaybeRef<MaybeElementRef>, handler: OnClickOutsideHandler, options?: OnClickOutsideOptions<boolean>) => (() => void) | {
    stop: () => void;
    cancel: () => void;
    trigger: (event: Event) => void;
};
