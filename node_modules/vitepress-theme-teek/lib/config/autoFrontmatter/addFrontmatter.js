'use strict';

var permalink = require('./permalink.js');

const createSimplePermalink = (permalinkPrefix = "") => {
  let finalPermalinkPrefix = permalinkPrefix;
  if (!finalPermalinkPrefix.startsWith("/")) finalPermalinkPrefix = "/" + finalPermalinkPrefix;
  if (!finalPermalinkPrefix.endsWith("/")) finalPermalinkPrefix = finalPermalinkPrefix + "/";
  return { permalink: `${finalPermalinkPrefix}${permalink.createRandomUuid(6)}` };
};
const createComplexPermalink = (permalink$1, fileInfo, permalinkRules) => {
  if (!permalinkRules.length) return {};
  const specialFolderName = "*";
  for (const permalinkRule of permalinkRules) {
    const { folderName, rule = "/$path/$uuid6", removeLevel = 0 } = permalinkRule;
    if (!fileInfo.relativePath.startsWith(folderName) && folderName !== specialFolderName) continue;
    let originalPermalink = permalink$1 || "";
    let normalizedRule = "";
    const finalRule = permalink.cleanPathSpaces(rule);
    if (finalRule) {
      normalizedRule = permalink.replacePlaceholder(finalRule, fileInfo.relativePath);
      normalizedRule = normalizedRule.startsWith("/") ? normalizedRule : `/${normalizedRule}`;
      const targetFirstSegment = permalink.getFirstPathSegment(normalizedRule);
      const currentFirstSegment = permalink.getFirstPathSegment(originalPermalink);
      if (currentFirstSegment === targetFirstSegment) continue;
    }
    if (removeLevel > 0) {
      const parts = originalPermalink.split("/").filter((part) => part);
      const actualRemoveLevel = Math.min(removeLevel, parts.length);
      const remainingParts = parts.slice(actualRemoveLevel);
      originalPermalink = remainingParts.length ? `/${remainingParts.join("/")}/` : "";
    }
    const newPermalink = `${normalizedRule}${originalPermalink}`;
    return { permalink: newPermalink };
  }
};
const createCategory = (fileInfo, ignore = []) => {
  const siteConfig = globalThis.VITEPRESS_CONFIG;
  const { locales = {} } = siteConfig.userConfig;
  const relativePathArr = fileInfo.relativePath.split("/");
  const categories = [];
  relativePathArr.forEach((item, index) => {
    const filename = item.replace(/^\d+\./, "").split(".")?.[0] || "";
    if (index !== relativePathArr.length - 1 && !locales[filename] && !ignore.includes(filename))
      categories.push(filename);
  });
  return { categories: categories.length ? categories : [""] };
};
const createCoverImg = (coverList) => {
  return { coverImg: coverList[Math.floor(Math.random() * coverList.length)] };
};

exports.createCategory = createCategory;
exports.createComplexPermalink = createComplexPermalink;
exports.createCoverImg = createCoverImg;
exports.createSimplePermalink = createSimplePermalink;
