import { default as MarkdownIt, Token } from 'markdown-it';
export interface CardContainerOption<D extends Record<string, any>, C extends Record<string, any>> {
    /**
     * 容器类型
     */
    type: string;
    /**
     * 容器类名
     */
    className?: string;
    /**
     * 渲染 HTML 前端的回调，返回 false 则不渲染容器，返回 true 则继续渲染容器
     */
    beforeHtmlRender?: (props: {
        data: D[];
        config: C;
    }, info: string, tokens: Token[], idx: number) => boolean | undefined;
    /**
     * 渲染 HTML 的回调
     */
    htmlRender: (props: {
        data: D[];
        config: C;
    }, info: string, tokens: Token[], idx: number) => string;
    /**
     * 渲染 HTML 后的回调
     */
    afterHtmlRender?: (props: {
        data: D[];
        config: C;
    }, info: string, tokens: Token[], idx: number) => void;
    /**
     * HTML 转换回调，通过该函数修改最终生成的 HTML
     */
    transformHtml?: (html: string) => string;
}
/**
 * 创建多个卡片容器
 */
export declare const createCardContainers: <D extends Record<string, any>, C extends Record<string, any>>(md: MarkdownIt, option: CardContainerOption<C, D>[]) => void;
/**
 * 创建单个卡片容器
 */
export declare const createCardContainer: <D extends Record<string, any>, C extends Record<string, any>>(md: MarkdownIt, option: CardContainerOption<D, C>) => void;
