'use strict';

const isExternal = (path) => /^(http?:|https?:|mailto:|tel:)/.test(path);
const isValidURL = (url) => {
  try {
    new URL(url);
    return true;
  } catch {
    return false;
  }
};
const isType = (val) => {
  if (val === null) return "null";
  if (typeof val !== "object") return typeof val;
  else return Object.prototype.toString.call(val).slice(8, -1).toLocaleLowerCase();
};
const is = (val, type) => {
  return Object.prototype.toString.call(val) === `[object ${type}]`;
};
const isPlainFunction = (val) => {
  return is(val, "Function");
};
const isFunction = (val) => {
  return is(val, "Function") || isAsyncFunction(val);
};
const isDef = (val) => {
  return val !== void 0;
};
const isUnDef = (val) => {
  return val === void 0;
};
const isObject = (val) => {
  return val !== null && is(val, "Object");
};
const isDate = (val) => {
  return is(val, "Date");
};
const isNumber = (val) => {
  return is(val, "Number") && !Number.isNaN(val);
};
const isStringNumber = (val) => {
  if (!isString(val)) return false;
  return !Number.isNaN(Number(val));
};
const isAsyncFunction = (val) => {
  return is(val, "AsyncFunction");
};
const isPromise = (val) => {
  return is(val, "Promise") && isObject(val) && isFunction(val.then) && isFunction(val.catch);
};
const isString = (val) => {
  return is(val, "String");
};
const isBoolean = (val) => {
  return is(val, "Boolean");
};
const isArray = (val) => {
  if (typeof Array.isArray === "undefined") {
    return Object.prototype.toString.call(val) === "[object Array]";
  }
  return Array.isArray(val);
};
const isElement = (val) => {
  if (typeof Element === "undefined") return false;
  return val instanceof Element;
};
const isNull = (val) => {
  return val === null;
};
const isNullAndUnDef = (val) => {
  return val === null && val === void 0;
};
const isNullOrUnDef = (val) => {
  return val === null || val === void 0;
};
const isPhone = (val) => {
  return /^(13[0-9]|14[01456879]|15[0-35-9]|16[2567]|17[0-8]|18[0-9]|19[0-35-9])\d{8}$/.test(val);
};
const isImagePath = (path) => {
  return /(https?:\/\/|data:image\/).*?\.(png|jpg|jpeg|gif|svg|webp|ico)/gi.test(path);
};
const isImageDom = (o) => {
  return o && ["IMAGE", "IMG"].includes(o.tagName);
};
const isIos = () => {
  return isClient && window?.navigator?.userAgent && (/iP(?:ad|hone|od)/.test(window.navigator.userAgent) || window?.navigator?.maxTouchPoints > 2 && /iPad|Macintosh/.test(window?.navigator.userAgent));
};
const isEmpty = (val, checkComplexType = true) => {
  if (isNumber(val) && isNaN(val)) return true;
  if (val === "" || val === null || val === void 0) return true;
  if (!checkComplexType) return false;
  if (isArray(val) && !val.length) return true;
  if (isObject(val) && !Object.keys(val).length) return true;
  return false;
};
const isFocusable = (element) => {
  if (element.tabIndex > 0 || element.tabIndex === 0 && element.getAttribute("tabIndex") !== null) {
    return true;
  }
  if (element.tabIndex < 0 || element.hasAttribute("disabled") || element.getAttribute("aria-disabled") === "true") {
    return false;
  }
  switch (element.nodeName) {
    case "A": {
      return !!element.href && element.rel !== "ignore";
    }
    case "INPUT": {
      return !(element.type === "hidden" || element.type === "file");
    }
    case "BUTTON":
    case "SELECT":
    case "TEXTAREA": {
      return true;
    }
    default: {
      return false;
    }
  }
};
const isClient = typeof window !== "undefined" && typeof document !== "undefined";
const isServer = !isClient;
const inBrowser = isClient;

const getNowDate = (format = "yyyy-MM-dd hh:mm:ss", utc = true) => {
  return formatDate(/* @__PURE__ */ new Date(), format, utc);
};
const formatDate = (date, format = "yyyy-MM-dd hh:mm:ss", utc = true) => {
  if (!date) return "";
  const dateObj = new Date(date);
  const year = utc ? dateObj.getUTCFullYear() : dateObj.getFullYear();
  const month = String((utc ? dateObj.getUTCMonth() : dateObj.getMonth()) + 1).padStart(2, "0");
  const day = String(utc ? dateObj.getUTCDate() : dateObj.getDate()).padStart(2, "0");
  const hours = String(utc ? dateObj.getUTCHours() : dateObj.getHours()).padStart(2, "0");
  const minutes = String(utc ? dateObj.getUTCMinutes() : dateObj.getMinutes()).padStart(2, "0");
  const seconds = String(utc ? dateObj.getUTCSeconds() : dateObj.getSeconds()).padStart(2, "0");
  return format.replace("yyyy", year.toString()).replace("MM", month).replace("dd", day).replace("hh", hours).replace("mm", minutes).replace("ss", seconds);
};
const formatDiffDate = (startDate, endDate) => {
  const start = +new Date(startDate);
  const end = endDate ? +new Date(endDate) : +/* @__PURE__ */ new Date();
  const diff = Math.abs(end - start);
  const oneSeconds = 1e3;
  const oneMinute = oneSeconds * 60;
  const oneHour = oneMinute * 60;
  const oneDay = oneHour * 24;
  const oneWeek = oneDay * 7;
  const oneMonth = oneDay * 30;
  const oneYear = oneMonth * 12;
  if (diff < 1) return "\u521A\u521A";
  if (diff < oneMinute) return `${Math.floor(diff / oneSeconds)} \u79D2\u524D`;
  if (diff < oneHour) return `${Math.floor(diff / oneMinute)} \u5206\u524D`;
  if (diff < oneDay) return `${Math.floor(diff / oneHour)} \u65F6\u524D`;
  if (diff < oneWeek) return `${Math.floor(diff / oneDay)} \u5929\u524D`;
  if (diff < oneMonth) return `${Math.floor(diff / oneWeek)} \u5468\u524D`;
  if (diff < oneYear) return `${Math.floor(diff / oneMonth)} \u6708\u524D`;
  return `${Math.floor(diff / oneYear)} \u5E74\u524D`;
};
const formatDiffDateToDay = (startDate, endDate) => {
  const start = +new Date(startDate);
  const end = endDate ? +new Date(endDate) : +/* @__PURE__ */ new Date();
  return Math.floor(Math.abs(start - end) / (1e3 * 60 * 60 * 24));
};

const withBase = (base, path) => {
  if (!path) return;
  return /^(?:[a-z]+:|\/\/)/i.test(path) || !path.startsWith("/") ? path : `${base}${path}`.replace(/\/+/g, "/");
};
const upperFirst = (str) => {
  return str.charAt(0).toUpperCase() + str.slice(1);
};
const addUnit = (value, defaultUnit = "px") => {
  if (!value) return "";
  if (isNumber(value) || isStringNumber(value)) return `${value}${defaultUnit}`;
  else if (isString(value)) return value;
  return "";
};
const removeUnit = (value, defaultUnit = "px") => {
  if (!value) return;
  if (isNumber(value)) return value;
  if (isString(value)) return Number(value.replace(defaultUnit, ""));
  else return;
};
const get = (object, path, defaultValue) => {
  let obj = { ...object };
  if (!path.includes(".")) return obj[path] || defaultValue;
  else {
    path.split(".").forEach((item) => obj = obj[item] ?? "");
    return obj || defaultValue;
  }
};
const removeStorageItem = (key, storage, vague = false) => {
  if (!vague) return storage.removeItem(key);
  const keysToRemove = [];
  for (let i = 0; i < storage.length; i++) {
    const key2 = storage.key(i);
    if (key2 && key2.startsWith(key2)) {
      keysToRemove.push(key2);
    }
  }
  keysToRemove.forEach((key2) => storage.removeItem(key2));
};

const hexToRgb = (str) => {
  let hex = "";
  const reg = /^\#?[0-9A-Fa-f]{6}$/;
  if (!reg.test(str)) return console.error("[Teek Error] \u8F93\u5165\u9519\u8BEF\u7684 hex");
  str = str.replace("#", "");
  hex = str.match(/../g);
  for (let i = 0; i < 3; i++) hex[i] = parseInt(hex[i], 16);
  return hex;
};
const rgbToHex = (r, g, b) => {
  const reg = /^\d{1,3}$/;
  if (!reg.test(r) || !reg.test(g) || !reg.test(b)) return console.error("[Teek Error] \u8F93\u5165\u9519\u8BEF\u7684 rgb \u989C\u8272\u503C");
  const hex = [r.toString(16), g.toString(16), b.toString(16)];
  for (let i = 0; i < 3; i++) if (hex[i].length === 1) hex[i] = `0${hex[i]}`;
  return `#${hex.join("")}`;
};
const getDarkColor = (color, level) => {
  const reg = /^\#?[0-9A-Fa-f]{6}$/;
  if (!reg.test(color)) return console.error("[Teek Error] \u8F93\u5165\u9519\u8BEF\u7684 hex \u989C\u8272\u503C");
  const rgb = hexToRgb(color);
  for (let i = 0; i < 3; i++) rgb[i] = Math.round(20.5 * level + rgb[i] * (1 - level));
  return rgbToHex(rgb[0], rgb[1], rgb[2]);
};
const getLightColor = (color, level) => {
  const reg = /^\#?[0-9A-Fa-f]{6}$/;
  if (!reg.test(color)) return console.error("[Teek Error] \u8F93\u5165\u9519\u8BEF\u7684 hex \u989C\u8272\u503C");
  const rgb = hexToRgb(color);
  for (let i = 0; i < 3; i++) rgb[i] = Math.round(255 * level + rgb[i] * (1 - level));
  return rgbToHex(rgb[0], rgb[1], rgb[2]);
};

const baiduAnalytics = (options) => {
  if (!isClient) return;
  const { id, production = true } = options || {};
  if (production && process.env.NODE_ENV !== "production") return;
  if (!id) return console.warn("[Teek Warning] Baidu analytics id is empty");
  if (!document.querySelector(`#baidu-analytics-${id}`)) {
    window._hmt = window._hmt || [];
    const script = document.createElement("script");
    script.id = `baidu-analytics-${id}`;
    script.async = true;
    script.src = `https://hm.baidu.com/hm.js?${id}`;
    document.querySelector("head")?.appendChild(script);
  }
};
const trackPageview = (options, pageUrl) => {
  if (!isClient) return;
  const { id, production = true } = options || {};
  if (production && process.env.NODE_ENV !== "production") return;
  if (!id) return;
  if (!pageUrl || !isString(pageUrl)) pageUrl = "/";
  if (pageUrl.startsWith("http")) {
    const urlFragment = pageUrl.split("/");
    const origin = `${urlFragment[0]}//${urlFragment[2]}`;
    pageUrl = pageUrl.replace(origin, "");
  }
  if (window._hmt) {
    window._hmt.push(["_setAccount", id]);
    window._hmt.push(["_trackPageview", pageUrl]);
  }
};

const googleAnalytics = (options) => {
  if (!isClient) return;
  if (window.dataLayer && window.gtag) return;
  const { id, production = true } = options || {};
  if (production && process.env.NODE_ENV !== "production") return;
  if (!id) return console.warn("[Teek Warning] Google analytics id is empty");
  if (!document.querySelector(`#google-analytics-${id}`)) {
    const gtagScript = document.createElement("script");
    gtagScript.id = `google-analytics-${id}`;
    gtagScript.src = `https://www.googletagmanager.com/gtag/js?id=${id}`;
    gtagScript.async = true;
    document.head.appendChild(gtagScript);
    window.dataLayer = window.dataLayer || [];
    window.gtag = function() {
      dataLayer.push(arguments);
    };
    gtag("js", /* @__PURE__ */ new Date());
    gtag("config", id);
  }
};

const umamiAnalytics = (options, production = true) => {
  if (!isClient) return;
  if (production && process.env.NODE_ENV !== "production") return;
  let properties = [];
  if (Array.isArray(options)) properties.push(...options);
  else properties.push(options);
  properties = properties.filter((property) => Boolean(property.id));
  if (!properties.length) return;
  for (const property of properties) {
    const { id, src } = property;
    if (!document.querySelector(`#umami-analytics-${id}`)) {
      const script = document.createElement("script");
      script.id = `umami-analytics-${id}`;
      script.async = true;
      script.defer = true;
      script.setAttribute("data-website-id", id);
      script.src = src;
      document.head.appendChild(script);
    }
  }
};

exports.addUnit = addUnit;
exports.baiduAnalytics = baiduAnalytics;
exports.formatDate = formatDate;
exports.formatDiffDate = formatDiffDate;
exports.formatDiffDateToDay = formatDiffDateToDay;
exports.get = get;
exports.getDarkColor = getDarkColor;
exports.getLightColor = getLightColor;
exports.getNowDate = getNowDate;
exports.googleAnalytics = googleAnalytics;
exports.hexToRgb = hexToRgb;
exports.inBrowser = inBrowser;
exports.is = is;
exports.isArray = isArray;
exports.isAsyncFunction = isAsyncFunction;
exports.isBoolean = isBoolean;
exports.isClient = isClient;
exports.isDate = isDate;
exports.isDef = isDef;
exports.isElement = isElement;
exports.isEmpty = isEmpty;
exports.isExternal = isExternal;
exports.isFocusable = isFocusable;
exports.isFunction = isFunction;
exports.isImageDom = isImageDom;
exports.isImagePath = isImagePath;
exports.isIos = isIos;
exports.isNull = isNull;
exports.isNullAndUnDef = isNullAndUnDef;
exports.isNullOrUnDef = isNullOrUnDef;
exports.isNumber = isNumber;
exports.isObject = isObject;
exports.isPhone = isPhone;
exports.isPlainFunction = isPlainFunction;
exports.isPromise = isPromise;
exports.isServer = isServer;
exports.isString = isString;
exports.isStringNumber = isStringNumber;
exports.isType = isType;
exports.isUnDef = isUnDef;
exports.isValidURL = isValidURL;
exports.removeStorageItem = removeStorageItem;
exports.removeUnit = removeUnit;
exports.rgbToHex = rgbToHex;
exports.trackPageview = trackPageview;
exports.umamiAnalytics = umamiAnalytics;
exports.upperFirst = upperFirst;
exports.withBase = withBase;
