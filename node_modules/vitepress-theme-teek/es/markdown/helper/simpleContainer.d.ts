import { default as MarkdownIt } from 'markdown-it';
import { Token } from 'markdown-it/dist/index.cjs.js';
import { default as container } from 'markdown-it-container';
export type ContainerArgs = [typeof container, string, {
    render: (tokens: Token[], idx: number) => string;
}];
export interface ContainerOption {
    /**
     * 容器类型
     */
    type: string;
    /**
     * 是否使用标题
     */
    useTitle?: boolean;
    /**
     * 默认标题
     */
    defaultTitle?: string;
    /**
     * 容器类名
     */
    className?: string;
}
/**
 * 创建一个自定义的容器，并使用
 *
 * @param md markdown-it 实例
 * @param option 容器配置项
 */
export declare const createContainerThenUse: (md: MarkdownIt, option: ContainerOption) => void;
/**
 * 创建一个自定义的容器，并返回
 *
 * @param md markdown-it 实例
 * @param option 容器配置项
 */
export declare const createContainerThenGet: (md: MarkdownIt, option: ContainerOption) => ContainerArgs;
/**
 * 创建多个自定义的容器，并使用
 *
 * @param md markdown-it 实例
 * @param options 容器配置项
 */
export declare const createContainersThenUse: (md: MarkdownIt, options: ContainerOption[]) => void;
/**
 * 创建多个自定义的容器，并返回
 *
 * @param md markdown-it 实例
 * @param options 容器配置项
 */
export declare const createContainersThenGet: (md: MarkdownIt, options: ContainerOption[]) => ContainerArgs[];
