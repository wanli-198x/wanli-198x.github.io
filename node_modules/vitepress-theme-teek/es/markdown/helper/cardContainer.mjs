import container from 'markdown-it-container';
import yaml from 'js-yaml';

const createCardContainers = (md, option) => {
  option.forEach((item) => createCardContainer(md, item));
};
const createCardContainer = (md, option) => {
  const { type, className, beforeHtmlRender, htmlRender, afterHtmlRender, transformHtml } = option;
  md.use(container, type, {});
  md.renderer.rules[`container_${type}_open`] = (tokens, idx) => {
    const containerToken = tokens[idx];
    let html = `<div class="${className || `${type}-container`}">`;
    for (let i = idx; i < tokens.length; i++) {
      const token = tokens[i];
      if (token.type === `container_${type}_close`) break;
      if (!["yaml", "yml"].includes(token.info)) continue;
      const yamlContent = yaml.load(token.content.trim());
      let data = [];
      let config = {};
      if (Array.isArray(yamlContent)) data = yamlContent;
      else {
        data = yamlContent.data || [];
        config = yamlContent.config || {};
      }
      const info = containerToken.info.trim().slice(type.length).trim();
      const result = beforeHtmlRender?.({ data, config }, info, tokens, i);
      if (result === false) continue;
      html += htmlRender({ data, config }, info, tokens, i);
      afterHtmlRender?.({ data, config }, info, tokens, i);
    }
    html = transformHtml?.(html) ?? html;
    return html;
  };
};

export { createCardContainer, createCardContainers };
