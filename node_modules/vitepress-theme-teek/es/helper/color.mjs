const hexToRgb = (str) => {
  let hex = "";
  const reg = /^\#?[0-9A-Fa-f]{6}$/;
  if (!reg.test(str)) return console.error("[Teek Error] \u8F93\u5165\u9519\u8BEF\u7684 hex");
  str = str.replace("#", "");
  hex = str.match(/../g);
  for (let i = 0; i < 3; i++) hex[i] = parseInt(hex[i], 16);
  return hex;
};
const rgbToHex = (r, g, b) => {
  const reg = /^\d{1,3}$/;
  if (!reg.test(r) || !reg.test(g) || !reg.test(b)) return console.error("[Teek Error] \u8F93\u5165\u9519\u8BEF\u7684 rgb \u989C\u8272\u503C");
  const hex = [r.toString(16), g.toString(16), b.toString(16)];
  for (let i = 0; i < 3; i++) if (hex[i].length === 1) hex[i] = `0${hex[i]}`;
  return `#${hex.join("")}`;
};
const getDarkColor = (color, level) => {
  const reg = /^\#?[0-9A-Fa-f]{6}$/;
  if (!reg.test(color)) return console.error("[Teek Error] \u8F93\u5165\u9519\u8BEF\u7684 hex \u989C\u8272\u503C");
  const rgb = hexToRgb(color);
  for (let i = 0; i < 3; i++) rgb[i] = Math.round(20.5 * level + rgb[i] * (1 - level));
  return rgbToHex(rgb[0], rgb[1], rgb[2]);
};
const getLightColor = (color, level) => {
  const reg = /^\#?[0-9A-Fa-f]{6}$/;
  if (!reg.test(color)) return console.error("[Teek Error] \u8F93\u5165\u9519\u8BEF\u7684 hex \u989C\u8272\u503C");
  const rgb = hexToRgb(color);
  for (let i = 0; i < 3; i++) rgb[i] = Math.round(255 * level + rgb[i] * (1 - level));
  return rgbToHex(rgb[0], rgb[1], rgb[2]);
};

export { getDarkColor, getLightColor, hexToRgb, rgbToHex };
