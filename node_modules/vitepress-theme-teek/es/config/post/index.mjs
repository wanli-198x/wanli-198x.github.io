import { getTitleFromMarkdown } from 'vitepress-plugin-sidebar-resolve';
import { basename, join } from 'node:path';
import { statSync } from 'node:fs';
import { formatDate } from '../../helper/dist/index.mjs';
import { filterPosts, getSortPostsByDateAndSticky, getSortPostsByDate, groupByYear, groupByYearMonth, getGroupPosts, getGroupCards } from './helper.mjs';
import matter from 'gray-matter';

const transformData = (data) => {
  const siteConfig = globalThis.VITEPRESS_CONFIG;
  const { themeConfig } = siteConfig.userConfig;
  const { frontmatter, url, relativePath, excerpt } = data;
  if (frontmatter.date) frontmatter.date = formatDate(frontmatter.date);
  return {
    url,
    relativePath,
    frontmatter,
    author: frontmatter.author || themeConfig.author,
    title: getTitle(data),
    date: getDate(data, siteConfig.srcDir),
    excerpt,
    capture: getCaptureText(data)
  };
};
const transformRaw = (posts) => {
  const siteConfig = globalThis.VITEPRESS_CONFIG;
  const { locales = {} } = siteConfig.userConfig;
  const postsData = resolvePosts(posts);
  const localesKeys = Object.keys(locales);
  if (!localesKeys.length) return postsData;
  const postsLocale = {};
  localesKeys.filter((localesKey) => localesKey !== "root").forEach((localesKey) => {
    const localePosts = posts.filter((post) => post.relativePath.startsWith(`/${localesKey}`));
    postsLocale[localesKey] = resolvePosts(localePosts);
  });
  const rootPosts = posts.filter(
    (post) => !localesKeys.some((localesKey) => post.relativePath.startsWith(`/${localesKey}`))
  );
  postsLocale["root"] = resolvePosts(rootPosts);
  return { ...postsData, locales: postsLocale };
};
const resolvePosts = (posts) => {
  const originPosts = filterPosts(posts);
  const sortPostsByDateAndSticky = getSortPostsByDateAndSticky(originPosts);
  const sortPostsByDate = getSortPostsByDate(originPosts);
  const groupPostsByYear = groupByYear(sortPostsByDate);
  const groupPostsByYearMonth = groupByYearMonth(sortPostsByDate);
  const groupPosts = getGroupPosts(sortPostsByDateAndSticky);
  const groupCards = getGroupCards(groupPosts);
  return {
    allPosts: posts,
    originPosts,
    sortPostsByDateAndSticky,
    sortPostsByDate,
    groupPostsByYear,
    groupPostsByYearMonth,
    groupPosts,
    groupCards
  };
};
function getTitle(post) {
  if (post.frontmatter.title) return post.frontmatter.title;
  const { content = "" } = matter(post.src || "", {});
  const splitName = basename(post.relativePath).split(".");
  const name = splitName.length > 1 ? splitName[1] : splitName[0];
  return getTitleFromMarkdown(content) || name || "";
}
function getDate(post, srcDir) {
  const { frontmatter, relativePath } = post;
  if (frontmatter.date) return frontmatter.date;
  const filePath = join(
    srcDir,
    `${relativePath.endsWith("/") ? `${relativePath}/index` : relativePath.replace(/\.html$/, "")}.md`
  );
  const stat = statSync(filePath);
  return formatDate(stat.birthtime || stat.atime);
}
const getCaptureText = (post, count = 300) => {
  const { content = "" } = matter(post.src || "", {});
  return content?.replace(/^#+\s+.*/, "")?.replace(/#/g, "")?.replace(/!\[.*?\]\(.*?\)/g, "")?.replace(/\[(.*?)\]\(.*?\)/g, "$1")?.replace(/\*\*(.*?)\*\*/g, "$1")?.replace(/\[\[TOC\]\]/g, "")?.replace(/:::.*?(\n|$)/g, "")?.replace(/<!-- more -->/g, "")?.split("\n")?.filter((v) => !!v)?.join("\n")?.replace(/>(.*)/, "")?.replace(/</g, "&lt;").replace(/>/g, "&gt;")?.trim()?.slice(0, count);
};

export { getCaptureText, getDate, getTitle, transformData, transformRaw };
