const emptyPost = {
  allPosts: [],
  originPosts: [],
  sortPostsByDateAndSticky: [],
  sortPostsByDate: [],
  groupPostsByYear: {},
  groupPostsByYearMonth: {},
  groupPosts: { categories: {}, tags: {} },
  groupCards: { categories: [], tags: [] },
  locales: {}
};
const filterPosts = (posts) => {
  return posts.filter(({ frontmatter: { article, layout } }) => article !== false && layout !== "home");
};
const getSortPostsByDateAndSticky = (posts) => {
  const p = [...posts];
  return p.sort((prev, next) => {
    const prevSticky = prev.frontmatter.sticky;
    const nextSticky = next.frontmatter.sticky;
    if (prevSticky && nextSticky) return prevSticky === nextSticky ? compareDate(prev, next) : prevSticky - nextSticky;
    if (prevSticky) return -1;
    if (nextSticky) return 1;
    return compareDate(prev, next);
  });
};
const getSortPostsByDate = (posts) => {
  const p = [...posts];
  return p.sort((prev, next) => compareDate(prev, next));
};
const getGroupPosts = (posts) => {
  const categoriesObj = {};
  const tagsObj = {};
  posts.forEach((post) => {
    const { categories, tags } = post.frontmatter;
    [categories || []].flat().forEach((category) => {
      if (category) {
        if (!categoriesObj[category]) categoriesObj[category] = [];
        categoriesObj[category].push(post);
      }
    });
    [tags || []].flat().forEach((tag) => {
      if (tag) {
        if (!tagsObj[tag]) tagsObj[tag] = [];
        tagsObj[tag].push(post);
      }
    });
  });
  return {
    categories: categoriesObj,
    tags: tagsObj
  };
};
const getGroupCards = (groupPosts) => {
  const categoriesArr = [];
  const tagsArr = [];
  for (const key in groupPosts.categories) categoriesArr.push({ name: key, length: groupPosts.categories[key].length });
  for (const key in groupPosts.tags) tagsArr.push({ name: key, length: groupPosts.tags[key].length });
  return {
    categories: categoriesArr,
    tags: tagsArr
  };
};
const getPostsTime = (post) => {
  const dateStr = post.date;
  const date = dateStr ? new Date(dateStr) : /* @__PURE__ */ new Date();
  if (date === "Invalid Date" && dateStr) {
    return new Date(dateStr.replace(/-/g, "/")).getTime();
  }
  return date.getTime();
};
const compareDate = (prev, next) => {
  return getPostsTime(next) - getPostsTime(prev);
};
const groupByYear = (posts) => {
  return posts.reduce(
    (pre, cur) => {
      const year = new Date(cur.date || cur.frontmatter.date).getFullYear() + " ";
      if (!pre[year]) pre[year] = [];
      pre[year].push(cur);
      return pre;
    },
    {}
  );
};
const groupByYearMonth = (posts) => {
  return posts.reduce(
    (pre, cur) => {
      const date = new Date(cur.date || cur.frontmatter.date);
      const year = date.getFullYear() + " ";
      const month = String(date.getMonth() + 1).padStart(2, "0");
      if (!pre[year]) pre[year] = {};
      if (!pre[year][month]) pre[year][month] = [];
      pre[year][month].push(cur);
      return pre;
    },
    {}
  );
};

export { compareDate, emptyPost, filterPosts, getGroupCards, getGroupPosts, getPostsTime, getSortPostsByDate, getSortPostsByDateAndSticky, groupByYear, groupByYearMonth };
