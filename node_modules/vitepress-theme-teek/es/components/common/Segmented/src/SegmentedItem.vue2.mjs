import { defineComponent, mergeModels, useModel, createElementBlock, openBlock, normalizeClass, unref, withDirectives, createElementVNode, vModelRadio, createBlock, createCommentVNode, toDisplayString } from 'vue';
import 'vitepress';
import { useNamespace } from '../../../../composables/useNamespace.mjs';
import 'vitepress-theme-teek/theme-chalk/tk-copy-banner.css';
import '../../../../composables/useZIndex.mjs';
import _sfc_main$1 from '../../Icon/src/index.vue2.mjs';
import '@iconify/vue';

const _hoisted_1 = ["title", "disabled"];
const _hoisted_2 = ["value", "name", "disabled", "checked", "aria-checked"];
const _hoisted_3 = { key: 1 };
var _sfc_main = /* @__PURE__ */ defineComponent({
  ...{ name: "SegmentedItem" },
  __name: "SegmentedItem",
  props: /* @__PURE__ */ mergeModels({
    disabled: { type: Boolean },
    value: { type: [String, Number, Object, Boolean] },
    label: {},
    icon: {},
    title: {},
    name: {}
  }, {
    "modelValue": { type: [String, Number, Object, Boolean] },
    "modelModifiers": {}
  }),
  emits: ["update:modelValue"],
  setup(__props) {
    const ns = useNamespace("segmented-item");
    const model = useModel(__props, "modelValue");
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("label", {
        class: normalizeClass([unref(ns).b(), unref(ns).is("active", model.value === __props.value && !__props.disabled), unref(ns).is("disabled", __props.disabled)]),
        title: __props.title,
        disabled: __props.disabled
      }, [
        withDirectives(createElementVNode("input", {
          "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => model.value = $event),
          type: "radio",
          value: __props.value,
          name: __props.name,
          disabled: __props.disabled,
          checked: model.value === __props.value,
          "aria-checked": model.value === __props.value,
          role: "radio",
          style: { "display": "none" }
        }, null, 8, _hoisted_2), [
          [vModelRadio, model.value]
        ]),
        createElementVNode(
          "span",
          {
            class: normalizeClass(unref(ns).e("content"))
          },
          [
            __props.icon ? (openBlock(), createBlock(unref(_sfc_main$1), {
              key: 0,
              icon: __props.icon,
              "aria-hidden": "true"
            }, null, 8, ["icon"])) : createCommentVNode("v-if", true),
            __props.label ? (openBlock(), createElementBlock(
              "span",
              _hoisted_3,
              toDisplayString(__props.label),
              1
              /* TEXT */
            )) : createCommentVNode("v-if", true)
          ],
          2
          /* CLASS */
        )
      ], 10, _hoisted_1);
    };
  }
});

export { _sfc_main as default };
