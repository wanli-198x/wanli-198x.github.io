import { defineComponent, ref, createElementBlock, openBlock, unref, normalizeClass, createElementVNode, withDirectives, toDisplayString, vModelText } from 'vue';
import 'vitepress';
import { useNamespace } from '../../../../../composables/useNamespace.mjs';
import 'vitepress-theme-teek/theme-chalk/tk-copy-banner.css';
import { useLocale } from '../../../../../composables/useLocale.mjs';
import '../../../../../composables/useZIndex.mjs';
import { usePagination } from '../usePagination.mjs';

const _hoisted_1 = ["disabled"];
const _hoisted_2 = ["disabled", "aria-label"];
var _sfc_main = /* @__PURE__ */ defineComponent({
  ...{ name: "PaginationJumper" },
  __name: "jumper",
  props: {
    size: { default: "default" }
  },
  setup(__props) {
    const ns = useNamespace("pagination");
    const { t } = useLocale();
    const { pageCount, disabled, currentPage, changeEvent } = usePagination();
    const userInput = ref(currentPage?.value || 1);
    const handleChange = (event) => {
      let value = event.target?.value || userInput.value;
      if (value < 1) value = 1;
      if (pageCount?.value && value > pageCount.value) value = pageCount.value;
      const val = Math.trunc(+value);
      changeEvent?.(val);
      userInput.value = val;
    };
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("span", {
        class: normalizeClass(unref(ns).e("jump")),
        disabled: unref(disabled)
      }, [
        createElementVNode(
          "span",
          {
            class: normalizeClass([unref(ns).e("goto")])
          },
          toDisplayString(unref(t)("tk.pagination.goto")),
          3
          /* TEXT, CLASS */
        ),
        withDirectives(createElementVNode("input", {
          type: "number",
          "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => userInput.value = $event),
          disabled: unref(disabled),
          onChange: handleChange,
          "aria-label": unref(t)("tk.pagination.page"),
          class: normalizeClass([unref(ns).e("input"), unref(ns).em("input", __props.size)])
        }, null, 42, _hoisted_2), [
          [vModelText, userInput.value]
        ]),
        createElementVNode(
          "span",
          {
            class: normalizeClass([unref(ns).e("classifier")])
          },
          toDisplayString(unref(t)("tk.pagination.pageClassifier")),
          3
          /* TEXT, CLASS */
        )
      ], 10, _hoisted_1);
    };
  }
});

export { _sfc_main as default };
