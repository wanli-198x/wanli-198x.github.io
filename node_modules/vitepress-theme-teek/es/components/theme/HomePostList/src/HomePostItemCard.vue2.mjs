import { defineComponent, computed, createElementBlock, openBlock, normalizeClass, unref, createBlock, createCommentVNode, createElementVNode, createVNode } from 'vue';
import { withBase } from 'vitepress';
import { useNamespace } from '../../../../composables/useNamespace.mjs';
import 'vitepress-theme-teek/theme-chalk/tk-copy-banner.css';
import { useLocale } from '../../../../composables/useLocale.mjs';
import '../../../../composables/useZIndex.mjs';
import topIcon from '../../../../static/icons/top.mjs';
import { useTeekConfig } from '../../ConfigProvider/index.mjs';
import _sfc_main$1 from '../../../common/Icon/src/index.vue2.mjs';
import '@iconify/vue';
import _sfc_main$3 from '../../ArticleInfo/src/index.vue2.mjs';
import _sfc_main$2 from '../../ArticleTitle/src/index.vue2.mjs';

const _hoisted_1 = ["href", "alt"];
const _hoisted_2 = ["src"];
const _hoisted_3 = ["href", "aria-label"];
const _hoisted_4 = ["innerHTML", "aria-label"];
var _sfc_main = /* @__PURE__ */ defineComponent({
  ...{ name: "HomePostItemCard" },
  __name: "HomePostItemCard",
  props: {
    post: {}
  },
  setup(__props) {
    const ns = useNamespace("post-item-card");
    const { t } = useLocale();
    const { getTeekConfigRef } = useTeekConfig();
    const postConfig = getTeekConfigRef("post", {
      showCapture: false,
      splitSeparator: false,
      cardStyleTitleTagPosition: "left",
      defaultCoverImg: []
    });
    const articleConfig = getTeekConfigRef("articleAnalyze", { showInfo: true });
    const postUrl = __props.post.url && withBase(__props.post.url);
    const imgSrcList = computed(() => [__props.post.frontmatter.coverImg || postConfig.value.defaultCoverImg || []].flat());
    const excerpt = computed(
      () => __props.post.frontmatter.description || __props.post.excerpt || postConfig.value.showCapture && __props.post.capture
    );
    const isShowInfo = computed(() => {
      const arr = [articleConfig.value.showInfo].flat();
      return arr.includes(true) || arr.includes("post");
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock(
        "div",
        {
          class: normalizeClass(unref(ns).b())
        },
        [
          !!__props.post.frontmatter.sticky ? (openBlock(), createBlock(unref(_sfc_main$1), {
            key: 0,
            icon: unref(topIcon),
            class: "top",
            size: 40,
            title: unref(t)("tk.homePost.pin", { sticky: __props.post.frontmatter.sticky }),
            "aria-label": unref(t)("tk.homePost.pinLabel")
          }, null, 8, ["icon", "title", "aria-label"])) : createCommentVNode("v-if", true),
          imgSrcList.value.length ? (openBlock(), createElementBlock(
            "div",
            {
              key: 1,
              class: normalizeClass(unref(ns).e("cover-img"))
            },
            [
              createElementVNode("a", {
                href: unref(postUrl),
                alt: __props.post.title
              }, [
                createElementVNode("img", {
                  src: unref(withBase)(imgSrcList.value[0]),
                  class: "cover-img"
                }, null, 8, _hoisted_2)
              ], 8, _hoisted_1)
            ],
            2
            /* CLASS */
          )) : createCommentVNode("v-if", true),
          createElementVNode(
            "div",
            {
              class: normalizeClass([unref(ns).e("info")])
            },
            [
              createElementVNode("a", {
                class: "title hover-color, sle",
                href: unref(postUrl),
                "aria-label": __props.post.title
              }, [
                createVNode(unref(_sfc_main$2), {
                  post: __props.post,
                  "title-tag-props": { position: unref(postConfig).cardStyleTitleTagPosition }
                }, null, 8, ["post", "title-tag-props"])
              ], 8, _hoisted_3),
              excerpt.value ? (openBlock(), createElementBlock("span", {
                key: 0,
                class: "excerpt mle",
                innerHTML: excerpt.value,
                "aria-label": unref(t)("tk.homePost.excerptLabel")
              }, null, 8, _hoisted_4)) : createCommentVNode("v-if", true),
              isShowInfo.value ? (openBlock(), createBlock(unref(_sfc_main$3), {
                key: 1,
                post: __props.post,
                scope: "post",
                split: unref(postConfig).splitSeparator,
                "aria-label": unref(t)("tk.homePost.infoLabel")
              }, null, 8, ["post", "split", "aria-label"])) : createCommentVNode("v-if", true)
            ],
            2
            /* CLASS */
          )
        ],
        2
        /* CLASS */
      );
    };
  }
});

export { _sfc_main as default };
