import { defineComponent, computed, defineAsyncComponent, ref, createElementBlock, openBlock, Fragment, createCommentVNode, createBlock, normalizeClass, unref, resolveDynamicComponent, createElementVNode, createVNode, renderSlot, withCtx, withDirectives, vShow, Transition, toDisplayString } from 'vue';
import { useData } from 'vitepress';
import { useClipboard } from '../../../../composables/useClipboard.mjs';
import { useNamespace } from '../../../../composables/useNamespace.mjs';
import 'vitepress-theme-teek/theme-chalk/tk-copy-banner.css';
import { useLocale } from '../../../../composables/useLocale.mjs';
import '../../../../composables/useZIndex.mjs';
import playgroundIcon from '../../../../static/icons/playground.mjs';
import githubIcon from '../../../../static/icons/github.mjs';
import copyIcon from '../../../../static/icons/copy.mjs';
import codeIcon from '../../../../static/icons/code.mjs';
import caretTopIcon from '../../../../static/icons/caretTop.mjs';
import message from '../../../common/Message/src/method.mjs';
import _sfc_main$2 from '../../../common/TransitionCollapse/src/index.vue2.mjs';
import _sfc_main$1 from '../../../common/Icon/src/index.vue2.mjs';
import '@iconify/vue';

const _hoisted_1 = ["innerHTML"];
const _hoisted_2 = ["innerHTML"];
var _sfc_main = /* @__PURE__ */ defineComponent({
  ...{ name: "DemoCode" },
  __name: "index",
  props: {
    source: {},
    rawSource: {},
    path: {},
    description: {},
    options: {},
    effect: {}
  },
  setup(__props) {
    const props = __props;
    const ns = useNamespace("demo-code");
    const { t } = useLocale();
    const { copy, copied, isSupported } = useClipboard();
    const { frontmatter, isDark } = useData();
    const {
      playgroundUrl = "",
      playgroundMainFileName = "App.vue",
      githubUrl = "",
      playgroundButtonTip = t("tk.demoCode.playground"),
      githubButtonTip = t("tk.demoCode.github"),
      copyButtonTip = t("tk.demoCode.copy"),
      collapseSourceButtonTip = t("tk.demoCode.collapseSource"),
      expandSourceButtonTip = t("tk.demoCode.expandSource")
    } = { ...JSON.parse(decodeURIComponent(props.options)), ...frontmatter.value.demo };
    const decodeSource = computed(() => decodeURIComponent(props.source));
    const decodeRawSource = computed(() => decodeURIComponent(props.rawSource));
    const decodedDescription = computed(() => decodeURIComponent(props.description));
    const effect = computed(() => props.effect === "true");
    const moduleFiles = import.meta.glob("/examples/**/*.vue", { eager: true });
    const DemoComponent = defineAsyncComponent(async () => {
      try {
        const key = Object.keys(moduleFiles).find((i) => i.endsWith(`/${props.path}`));
        return moduleFiles[key];
      } catch (error) {
        console.error(`[Teek Error] Failed to load component: '/${props.path}'`, error);
      }
    });
    const sourceVisible = ref(false);
    const handleToggleSourceVisible = (bol) => {
      if (bol !== void 0) sourceVisible.value = bol;
      else sourceVisible.value = !sourceVisible.value;
    };
    const handleEditPlayground = () => {
      const encoded = getPlaygroundEncoded(props.source);
      const darkParam = isDark.value ? "?theme=dark" : "";
      const link = playgroundUrl.includes("?") ? `${playgroundUrl}${darkParam.replace("?", "&")}` : `${playgroundUrl}${darkParam}`;
      const url = `${link.replace(/\/$/, "")}/#${encoded}`;
      window.open(url, "_blank");
    };
    const getPlaygroundEncoded = (source) => {
      const code = decodeURIComponent(source);
      const originCode = {
        [playgroundMainFileName]: code
      };
      const encoded = btoa(JSON.stringify(originCode));
      return encoded;
    };
    const handleEditGithub = () => {
      const url = `${githubUrl}/${props.path}`;
      window.open(url, "_blank");
    };
    const copyCode = async () => {
      if (!isSupported) console.error(t("tk.demoCode.notSupport"));
      await copy(decodeRawSource.value);
      copied.value ? message.success({
        message: t("tk.demoCode.copySuccess"),
        plain: true
      }) : message.error({
        message: t("tk.demoCode.copyFail"),
        plain: true
      });
    };
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock(
        Fragment,
        null,
        [
          decodedDescription.value ? (openBlock(), createElementBlock("div", {
            key: 0,
            class: normalizeClass(unref(ns).b("description")),
            innerHTML: decodedDescription.value
          }, null, 10, _hoisted_1)) : createCommentVNode("v-if", true),
          effect.value ? (openBlock(), createBlock(resolveDynamicComponent(unref(DemoComponent)), { key: 1 })) : (openBlock(), createElementBlock(
            "div",
            {
              key: 2,
              class: normalizeClass(unref(ns).b())
            },
            [
              createElementVNode(
                "div",
                {
                  class: normalizeClass(unref(ns).e("effect"))
                },
                [
                  (openBlock(), createBlock(resolveDynamicComponent(unref(DemoComponent))))
                ],
                2
                /* CLASS */
              ),
              createElementVNode(
                "div",
                {
                  class: normalizeClass(unref(ns).e("button-group"))
                },
                [
                  renderSlot(_ctx.$slots, "teek-demo-code-button-left"),
                  unref(playgroundUrl) ? (openBlock(), createBlock(unref(_sfc_main$1), {
                    key: 0,
                    title: unref(playgroundButtonTip),
                    onClick: handleEditPlayground,
                    icon: unref(playgroundIcon),
                    role: "link",
                    "aria-label": unref(playgroundButtonTip)
                  }, null, 8, ["title", "icon", "aria-label"])) : createCommentVNode("v-if", true),
                  unref(githubUrl) ? (openBlock(), createBlock(unref(_sfc_main$1), {
                    key: 1,
                    title: unref(githubButtonTip),
                    onClick: handleEditGithub,
                    icon: unref(githubIcon),
                    role: "link",
                    "aria-label": unref(githubUrl)
                  }, null, 8, ["title", "icon", "aria-label"])) : createCommentVNode("v-if", true),
                  createVNode(unref(_sfc_main$1), {
                    title: unref(copyButtonTip),
                    icon: unref(copyIcon),
                    onClick: copyCode,
                    role: "button",
                    "aria-label": unref(copyButtonTip)
                  }, null, 8, ["title", "icon", "aria-label"]),
                  createVNode(unref(_sfc_main$1), {
                    title: sourceVisible.value ? unref(expandSourceButtonTip) : unref(collapseSourceButtonTip),
                    onClick: _cache[0] || (_cache[0] = ($event) => handleToggleSourceVisible()),
                    icon: unref(codeIcon),
                    role: "button",
                    "aria-label": sourceVisible.value ? unref(expandSourceButtonTip) : unref(collapseSourceButtonTip)
                  }, null, 8, ["title", "icon", "aria-label"]),
                  renderSlot(_ctx.$slots, "teek-demo-code-button-right")
                ],
                2
                /* CLASS */
              ),
              createVNode(unref(_sfc_main$2), null, {
                default: withCtx(() => [
                  withDirectives(createElementVNode("div", {
                    class: normalizeClass(unref(ns).join("vp-code")),
                    innerHTML: decodeSource.value
                  }, null, 10, _hoisted_2), [
                    [vShow, sourceVisible.value]
                  ])
                ]),
                _: 1
                /* STABLE */
              }),
              createVNode(Transition, {
                name: unref(ns).join("fade-linear"),
                persisted: ""
              }, {
                default: withCtx(() => [
                  withDirectives(createElementVNode(
                    "div",
                    {
                      class: normalizeClass(unref(ns).e("float-control")),
                      onClick: _cache[1] || (_cache[1] = ($event) => handleToggleSourceVisible(false)),
                      role: "button"
                    },
                    [
                      createVNode(unref(_sfc_main$1), { icon: unref(caretTopIcon) }, null, 8, ["icon"]),
                      createElementVNode(
                        "span",
                        null,
                        toDisplayString(unref(expandSourceButtonTip)),
                        1
                        /* TEXT */
                      )
                    ],
                    2
                    /* CLASS */
                  ), [
                    [vShow, sourceVisible.value]
                  ])
                ]),
                _: 1
                /* STABLE */
              }, 8, ["name"])
            ],
            2
            /* CLASS */
          ))
        ],
        64
        /* STABLE_FRAGMENT */
      );
    };
  }
});

export { _sfc_main as default };
