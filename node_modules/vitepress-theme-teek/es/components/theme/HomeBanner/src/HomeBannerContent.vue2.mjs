import { defineComponent, computed, onMounted, createElementBlock, openBlock, unref, normalizeClass, createCommentVNode, renderSlot, createElementVNode, normalizeProps, mergeProps, Fragment, toDisplayString, createBlock, Transition, withCtx } from 'vue';
import { useData } from 'vitepress';
import { useNamespace } from '../../../../composables/useNamespace.mjs';
import 'vitepress-theme-teek/theme-chalk/tk-copy-banner.css';
import { useLocale } from '../../../../composables/useLocale.mjs';
import { useSwitchData } from '../../../../composables/useSwitchData.mjs';
import { useTextTypes } from '../../../../composables/useTextTypes.mjs';
import '../../../../composables/useZIndex.mjs';
import { useTeekConfig } from '../../ConfigProvider/index.mjs';

const _hoisted_1 = ["aria-label"];
const _hoisted_2 = ["aria-label"];
const _hoisted_3 = ["aria-label"];
const _hoisted_4 = { key: 0 };
const _hoisted_5 = ["aria-label"];
const _hoisted_6 = ["aria-label"];
var _sfc_main = /* @__PURE__ */ defineComponent({
  ...{ name: "HomeBannerContent" },
  __name: "HomeBannerContent",
  setup(__props) {
    const ns = useNamespace("banner-content");
    const { t } = useLocale();
    const { getTeekConfigRef } = useTeekConfig();
    const { site, frontmatter } = useData();
    const bannerConfig = getTeekConfigRef("banner", {
      name: frontmatter.value.tk?.name || site.value.title || "",
      descStyle: "default",
      description: [],
      switchTime: 4e3,
      switchShuffle: false,
      typesInTime: 200,
      typesOutTime: 100,
      typesNextTime: 800,
      typesShuffle: false
    });
    const descArray = computed(() => [
      ...new Set(
        [frontmatter.value.tk?.description || bannerConfig.value.description || []].flat()?.filter((v) => !!v)
      )
    ]);
    const isDefaultDescStyle = computed(() => bannerConfig.value.descStyle === "default");
    const isTypesDescStyle = computed(() => bannerConfig.value.descStyle === "types");
    const isSwitchDescStyle = computed(() => bannerConfig.value.descStyle === "switch");
    const {
      text: typesText,
      isFinished,
      start: startTypes
    } = useTextTypes(descArray, {
      inputTime: bannerConfig.value.typesInTime,
      outputTime: bannerConfig.value.typesOutTime,
      nextTime: bannerConfig.value.typesNextTime,
      shuffle: bannerConfig.value.typesShuffle
    });
    const { data: text, start: startAutoSwitch } = useSwitchData(descArray, {
      timeout: bannerConfig.value.switchTime,
      shuffle: bannerConfig.value.switchShuffle,
      onUpdate: (data, newValue) => {
        data.value = "";
        setTimeout(() => {
          data.value = newValue;
        }, 20);
      }
    });
    onMounted(() => {
      if (isTypesDescStyle.value) startTypes();
      if (isSwitchDescStyle.value) startAutoSwitch();
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(unref(ns).b()),
        "aria-label": unref(t)("tk.homeBanner.contentLabel")
      }, [
        createCommentVNode(" \u9996\u9875 banner \u56FE\u6587\u5B57\u63D2\u69FD "),
        _ctx.$slots["teek-home-banner-name"] ? renderSlot(_ctx.$slots, "teek-home-banner-name", normalizeProps(mergeProps({ key: 0 }, { name: unref(bannerConfig).name }))) : (openBlock(), createElementBlock(
          Fragment,
          { key: 1 },
          [
            createCommentVNode(" \u5982\u679C\u6CA1\u6709\u4F20\u5165\u63D2\u69FD\uFF0C\u5219\u6E32\u67D3\u9ED8\u8BA4\u7684 h1 \u6807\u7B7E\u53CA\u5185\u5BB9 "),
            createElementVNode("h1", {
              class: normalizeClass(unref(ns).e("title")),
              "aria-label": unref(t)("tk.homeBanner.titleLabel")
            }, toDisplayString(unref(bannerConfig).name), 11, _hoisted_2)
          ],
          2112
          /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
        )),
        createElementVNode("p", {
          class: normalizeClass(unref(ns).e("desc")),
          "aria-label": unref(t)("tk.homeBanner.descLabel")
        }, [
          isDefaultDescStyle.value ? (openBlock(), createElementBlock(
            "span",
            _hoisted_4,
            toDisplayString(descArray.value[0]),
            1
            /* TEXT */
          )) : isSwitchDescStyle.value ? (openBlock(), createBlock(Transition, {
            key: 1,
            name: unref(ns).join("fade"),
            mode: "out-in"
          }, {
            default: withCtx(() => [
              (openBlock(), createElementBlock("span", {
                key: unref(text) || descArray.value[0],
                onClick: _cache[0] || (_cache[0] = //@ts-ignore
                (...args) => unref(startAutoSwitch) && unref(startAutoSwitch)(...args)),
                class: "switch",
                "aria-label": unref(t)("tk.homeBanner.descSwitchLabel")
              }, toDisplayString(unref(text) || descArray.value[0]), 9, _hoisted_5))
            ]),
            _: 1
            /* STABLE */
          }, 8, ["name"])) : isTypesDescStyle.value && descArray.value.length ? (openBlock(), createElementBlock(
            Fragment,
            { key: 2 },
            [
              createElementVNode("span", {
                "aria-label": unref(t)("tk.homeBanner.descTypedLabel")
              }, toDisplayString(unref(typesText)), 9, _hoisted_6),
              createElementVNode(
                "span",
                {
                  class: normalizeClass(["typed", { "is-animation": unref(isFinished) }])
                },
                "|",
                2
                /* CLASS */
              )
            ],
            64
            /* STABLE_FRAGMENT */
          )) : createCommentVNode("v-if", true)
        ], 10, _hoisted_3)
      ], 10, _hoisted_1);
    };
  }
});

export { _sfc_main as default };
