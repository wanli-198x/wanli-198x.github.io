import { defineComponent, computed, onMounted, createElementBlock, openBlock, Fragment, createElementVNode, renderSlot, createCommentVNode, unref, normalizeStyle, normalizeClass } from 'vue';
import { withBase } from 'vitepress';
import { isFunction, isString } from '../../../../helper/dist/index.mjs';
import { useNamespace } from '../../../../composables/useNamespace.mjs';
import 'vitepress-theme-teek/theme-chalk/tk-copy-banner.css';
import { useLocale } from '../../../../composables/useLocale.mjs';
import { useSwitchData } from '../../../../composables/useSwitchData.mjs';
import '../../../../composables/useZIndex.mjs';
import { useTeekConfig } from '../../ConfigProvider/index.mjs';

const _hoisted_1 = ["aria-label"];
const _hoisted_2 = ["aria-label"];
var _sfc_main = /* @__PURE__ */ defineComponent({
  ...{ name: "HomeBannerBgImage" },
  __name: "HomeBannerBgImage",
  setup(__props) {
    const ns = useNamespace("banner-bg-image");
    const { t } = useLocale();
    const { getTeekConfigRef } = useTeekConfig();
    const bannerConfig = getTeekConfigRef("banner", {
      bgStyle: void 0,
      imgSrc: void 0,
      imgInterval: 15e3,
      imgShuffle: false,
      mask: true,
      maskBg: "rgba(0, 0, 0, 0.4)"
    });
    const isPartImgBgStyle = computed(() => bannerConfig.value.bgStyle === "partImg");
    const isFullImgBgStyle = computed(() => bannerConfig.value.bgStyle === "fullImg");
    const dataArray = computed(() => {
      const imgSrc = bannerConfig.value.imgSrc;
      return [isFunction(imgSrc) ? imgSrc() : imgSrc || []].flat().map((item) => item && withBase(item));
    });
    const {
      data: imageSrc,
      start,
      index
    } = useSwitchData(dataArray, {
      timeout: bannerConfig.value.imgInterval,
      shuffle: bannerConfig.value.imgShuffle,
      onAfterUpdate: () => {
        const nextIndex = (index.value + 1) % dataArray.value.length;
        const newValue = dataArray.value[nextIndex];
        if (newValue) {
          const img = new Image();
          img.src = newValue;
        }
      }
    });
    onMounted(() => {
      start();
    });
    const getStyle = () => {
      const { imgSrc, maskBg, imgInterval } = bannerConfig.value;
      const imgBgVar = ns.cssVarName("banner-img-bg");
      const maskBgColorVar = ns.cssVarName("banner-mask-bg-color");
      const imgSwitchIntervalVar = ns.cssVarName("banner-img-switch-interval-s");
      if (!imgSrc?.length) return { [imgBgVar]: ns.cssVar("bg-img-default") };
      return {
        [imgBgVar]: `url(${imageSrc.value}) center center / cover no-repeat`,
        [maskBgColorVar]: isString(maskBg) ? maskBg : `rgba(0, 0, 0, ${maskBg})`,
        [imgSwitchIntervalVar]: imgInterval / 1e3 + "s"
      };
    };
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock(
        Fragment,
        null,
        [
          createElementVNode("div", {
            class: normalizeClass([unref(ns).b(), { part: isPartImgBgStyle.value, full: isFullImgBgStyle.value }]),
            style: normalizeStyle(getStyle()),
            "aria-label": unref(t)("tk.homeBanner.bgImgLabel")
          }, [
            unref(bannerConfig).mask && unref(bannerConfig).imgSrc ? (openBlock(), createElementBlock("div", {
              key: 0,
              class: "mask",
              "aria-label": unref(t)("tk.homeBanner.maskLabel")
            }, null, 8, _hoisted_2)) : createCommentVNode("v-if", true),
            isPartImgBgStyle.value ? renderSlot(_ctx.$slots, "default", { key: 1 }) : createCommentVNode("v-if", true)
          ], 14, _hoisted_1),
          isFullImgBgStyle.value ? renderSlot(_ctx.$slots, "default", { key: 0 }) : createCommentVNode("v-if", true)
        ],
        64
        /* STABLE_FRAGMENT */
      );
    };
  }
});

export { _sfc_main as default };
