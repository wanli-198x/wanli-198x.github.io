import { defineComponent, computed, createBlock, openBlock, Transition, unref, withCtx, createCommentVNode, createVNode, isRef } from 'vue';
import 'vitepress';
import 'vitepress-theme-teek/theme-chalk/tk-copy-banner.css';
import { useLocale } from '../../../../composables/useLocale.mjs';
import { useMediaQuery } from '../../../../composables/useMediaQuery.mjs';
import { useStorage } from '../../../../composables/useStorage.mjs';
import '../../../../composables/useZIndex.mjs';
import clickIcon from '../../../../static/icons/theme-enhance/click.mjs';
import alignLeftIcon from '../../../../static/icons/theme-enhance/alignLeft.mjs';
import alignTextLeftIcon from '../../../../static/icons/theme-enhance/alignTextLeft.mjs';
import { useTeekConfig } from '../../ConfigProvider/index.mjs';
import _sfc_main$2 from '../../../common/Segmented/src/Segmented.vue2.mjs';
import { SpotlightStyle, touchMedia } from './themeEnhance.mjs';
import { spotlightStyleStorageKey, spotlightStorageKey, transitionName } from './namespace.mjs';
import _sfc_main$1 from './components/BaseTemplate.vue2.mjs';

var _sfc_main = /* @__PURE__ */ defineComponent({
  ...{ name: "SpotlightStyle" },
  __name: "SpotlightStyle",
  setup(__props) {
    const { getTeekConfigRef } = useTeekConfig();
    const themeEnhanceConfig = getTeekConfigRef("themeEnhance", {});
    const { t } = useLocale();
    const spotlightStyle = useStorage(
      spotlightStyleStorageKey,
      themeEnhanceConfig.value.spotlight?.defaultStyle || SpotlightStyle.Aside
    );
    const spotlightToggledOn = useStorage(spotlightStorageKey, themeEnhanceConfig.value.spotlight?.defaultValue ?? true);
    const supportTouch = useMediaQuery(touchMedia);
    const content = computed(() => [
      {
        value: SpotlightStyle.Aside,
        title: t("tk.themeEnhance.spotlightStyles.asideTipTitle"),
        helpMessage: t("tk.themeEnhance.spotlightStyles.asideHelpTipContent"),
        ariaLabel: t("tk.themeEnhance.spotlightStyles.asideTipTitle"),
        icon: alignTextLeftIcon
      },
      {
        value: SpotlightStyle.Under,
        title: t("tk.themeEnhance.spotlightStyles.underTipTitle"),
        helpMessage: t("tk.themeEnhance.spotlightStyles.underHelpTipContent"),
        ariaLabel: t("tk.themeEnhance.spotlightStyles.underTipTitle"),
        icon: alignLeftIcon
      }
    ]);
    const segmentedOptions = computed(
      () => content.value.map((item) => ({
        value: item.value,
        title: item.title,
        ariaLabel: item.ariaLabel,
        icon: item.icon
      }))
    );
    const tips = computed(
      () => content.value.map((item) => ({
        title: item.title,
        icon: item.icon,
        content: item.helpMessage
      }))
    );
    return (_ctx, _cache) => {
      return openBlock(), createBlock(Transition, { name: unref(transitionName) }, {
        default: withCtx(() => [
          unref(spotlightToggledOn) ? (openBlock(), createBlock(_sfc_main$1, {
            key: 0,
            icon: unref(clickIcon),
            title: unref(t)("tk.themeEnhance.spotlightStyles.title"),
            helper: !unref(themeEnhanceConfig).spotlight?.disableHelp,
            "helper-desc": unref(t)("tk.themeEnhance.spotlightStyles.helpDesc"),
            tips: tips.value,
            disabled: unref(supportTouch)
          }, {
            default: withCtx(() => [
              createVNode(unref(_sfc_main$2), {
                modelValue: unref(spotlightStyle),
                "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => isRef(spotlightStyle) ? spotlightStyle.value = $event : null),
                options: segmentedOptions.value,
                disabled: unref(supportTouch)
              }, null, 8, ["modelValue", "options", "disabled"])
            ]),
            _: 1
            /* STABLE */
          }, 8, ["icon", "title", "helper", "helper-desc", "tips", "disabled"])) : createCommentVNode("v-if", true)
        ]),
        _: 1
        /* STABLE */
      }, 8, ["name"]);
    };
  }
});

export { _sfc_main as default };
