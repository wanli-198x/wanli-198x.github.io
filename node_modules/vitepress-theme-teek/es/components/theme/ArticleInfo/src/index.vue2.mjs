import { defineComponent, computed, createElementBlock, openBlock, unref, normalizeClass, renderSlot, Fragment, renderList, createCommentVNode, createBlock, toDisplayString } from 'vue';
import { useData, useRoute, withBase } from 'vitepress';
import { isFunction, formatDate } from '../../../../helper/dist/index.mjs';
import { useNamespace } from '../../../../composables/useNamespace.mjs';
import 'vitepress-theme-teek/theme-chalk/tk-copy-banner.css';
import { useLocale } from '../../../../composables/useLocale.mjs';
import '../../../../composables/useZIndex.mjs';
import userIcon from '../../../../static/icons/user.mjs';
import calendarIcon from '../../../../static/icons/calendar.mjs';
import folderOpenedIcon from '../../../../static/icons/folderOpened.mjs';
import collectionTagIcon from '../../../../static/icons/collectionTag.mjs';
import editPenIcon from '../../../../static/icons/editPen.mjs';
import { useTeekConfig, usePosts } from '../../ConfigProvider/index.mjs';
import _sfc_main$1 from '../../../common/Icon/src/index.vue2.mjs';
import '@iconify/vue';

const _hoisted_1 = ["aria-label"];
const _hoisted_2 = ["aria-label"];
const _hoisted_3 = ["title", "href", "target", "aria-label"];
const _hoisted_4 = ["title", "href", "aria-label"];
var _sfc_main = /* @__PURE__ */ defineComponent({
  ...{ name: "ArticleInfo" },
  __name: "index",
  props: {
    post: {},
    scope: {},
    split: { type: Boolean, default: false }
  },
  setup(__props) {
    const ns = useNamespace("article-info");
    const { t } = useLocale();
    const { getTeekConfigRef } = useTeekConfig();
    const { page } = useData();
    const articleConfig = getTeekConfigRef("articleAnalyze", {
      showIcon: true,
      dateFormat: "yyyy-MM-dd",
      showAuthor: true,
      showCreateDate: true,
      showUpdateDate: false,
      showCategory: false,
      showTag: false
    });
    const posts = usePosts();
    const route = useRoute();
    const createDate = computed(() => {
      const originPosts = posts.value.originPosts;
      const date = __props.post.date || originPosts.find((item) => [item.url, item.frontmatter.permalink].includes(route.path))?.date;
      const dateFormatConst = articleConfig.value.dateFormat;
      if (isFunction(dateFormatConst)) return dateFormatConst(date || "");
      return formatDate(date || /* @__PURE__ */ new Date(), dateFormatConst);
    });
    const updateDate = computed(() => {
      const date = page.value.lastUpdated;
      if (!date) return "";
      const dateFormatConst = articleConfig.value.dateFormat;
      if (isFunction(dateFormatConst)) return dateFormatConst(date);
      return formatDate(date, dateFormatConst);
    });
    const baseInfo = computed(() => {
      const { showAuthor, showCreateDate, showUpdateDate, showCategory, showTag } = articleConfig.value;
      return [
        {
          title: t("tk.articleInfo.author"),
          icon: userIcon,
          data: __props.post.author?.name,
          href: __props.post.author?.link,
          target: __props.post.author?.link ? "_blank" : "_self",
          show: isShow(showAuthor)
        },
        {
          title: t("tk.articleInfo.createTime"),
          icon: calendarIcon,
          data: createDate.value,
          show: isShow(showCreateDate)
        },
        {
          title: t("tk.articleInfo.updateTime"),
          icon: editPenIcon,
          data: updateDate.value,
          show: updateDate.value && (__props.scope === "article" && showUpdateDate || __props.scope === "article-banner")
        },
        {
          title: t("tk.articleInfo.category"),
          icon: folderOpenedIcon,
          dataList: __props.post.frontmatter?.categories || [],
          href: "/categories?category={data}",
          class: "or",
          show: __props.scope !== "article-banner" && (__props.scope === "post" || isShow(showCategory))
        },
        {
          title: t("tk.articleInfo.tag"),
          icon: collectionTagIcon,
          dataList: __props.post.frontmatter?.tags || [],
          href: "/tags?tag={data}",
          class: "or",
          show: __props.scope !== "article-banner" && (__props.scope === "post" || isShow(showTag))
        }
      ];
    });
    const isShow = (showInfo) => {
      const arr = [showInfo || []].flat();
      return arr.includes(true) || arr.includes(__props.scope);
    };
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass([unref(ns).b(), __props.scope]),
        role: "group",
        "aria-label": unref(t)("tk.articleInfo.label")
      }, [
        (openBlock(true), createElementBlock(
          Fragment,
          null,
          renderList(baseInfo.value, (item) => {
            return openBlock(), createElementBlock(
              Fragment,
              {
                key: item.title
              },
              [
                item.show && (item.data || item.dataList?.length) ? (openBlock(), createElementBlock("span", {
                  key: 0,
                  class: normalizeClass([unref(ns).e("item"), { split: __props.split }]),
                  role: "group",
                  "aria-label": item.title
                }, [
                  unref(articleConfig).showIcon ? (openBlock(), createBlock(unref(_sfc_main$1), {
                    key: 0,
                    icon: item.icon,
                    class: normalizeClass(unref(ns).e("icon")),
                    "aria-hidden": "true"
                  }, null, 8, ["icon", "class"])) : createCommentVNode("v-if", true),
                  item.data ? (openBlock(), createElementBlock("a", {
                    key: 1,
                    title: item.title,
                    href: item.href && unref(withBase)(item.href),
                    target: item.target,
                    class: normalizeClass([item.class, "hover-color"]),
                    "aria-label": item.data
                  }, toDisplayString(item.data), 11, _hoisted_3)) : (openBlock(true), createElementBlock(
                    Fragment,
                    { key: 2 },
                    renderList(item.dataList, (data, index) => {
                      return openBlock(), createElementBlock("a", {
                        key: index,
                        title: item.title,
                        href: item.href && unref(withBase)(item.href.replace("{data}", encodeURIComponent(data))),
                        class: normalizeClass([item.class, "hover-color"]),
                        "aria-label": data
                      }, toDisplayString(data), 11, _hoisted_4);
                    }),
                    128
                    /* KEYED_FRAGMENT */
                  ))
                ], 10, _hoisted_2)) : createCommentVNode("v-if", true)
              ],
              64
              /* STABLE_FRAGMENT */
            );
          }),
          128
          /* KEYED_FRAGMENT */
        )),
        renderSlot(_ctx.$slots, "default")
      ], 10, _hoisted_1);
    };
  }
});

export { _sfc_main as default };
