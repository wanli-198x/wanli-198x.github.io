import { defineComponent, computed, ref, createBlock, openBlock, unref, normalizeClass, withCtx, createElementBlock, TransitionGroup, Fragment, renderList, normalizeStyle, createElementVNode, toDisplayString, createVNode } from 'vue';
import { useRouter, withBase } from 'vitepress';
import { isFunction, formatDate } from '../../../../helper/dist/index.mjs';
import { useNamespace } from '../../../../composables/useNamespace.mjs';
import 'vitepress-theme-teek/theme-chalk/tk-copy-banner.css';
import { useLocale } from '../../../../composables/useLocale.mjs';
import '../../../../composables/useZIndex.mjs';
import topArticleIcon from '../../../../static/icons/topArticle.mjs';
import { useTeekConfig, usePosts, useTagColor } from '../../ConfigProvider/index.mjs';
import _sfc_main$1 from '../../../common/PageCard/src/index.vue2.mjs';
import _sfc_main$2 from '../../ArticleTitle/src/index.vue2.mjs';

const _hoisted_1 = ["aria-label"];
const _hoisted_2 = ["href"];
const _hoisted_3 = { class: "date" };
const _hoisted_4 = ["aria-label"];
var _sfc_main = /* @__PURE__ */ defineComponent({
  ...{ name: "HomeTopArticleCard" },
  __name: "index",
  setup(__props) {
    const ns = useNamespace("top-article");
    const { t } = useLocale();
    const { getTeekConfigRef } = useTeekConfig();
    const posts = usePosts();
    const topArticleConfig = getTeekConfigRef("topArticle", {
      limit: 4,
      title: t("tk.topArticleCard.title", { icon: topArticleIcon }),
      emptyLabel: t("tk.topArticleCard.emptyLabel"),
      autoPage: false,
      pageSpeed: 4e3,
      dateFormat: "yyyy-MM-dd hh:mm:ss"
    });
    const topArticleList = computed(() => {
      const sortPostsByDateAndSticky = posts.value.sortPostsByDateAndSticky;
      return sortPostsByDateAndSticky.filter((p) => p.frontmatter.top)?.map((p, index) => ({ ...p, num: index + 1 }));
    });
    const pageNum = ref(1);
    const currentTopArticleList = computed(() => {
      const { limit } = topArticleConfig.value;
      const p = pageNum.value;
      return topArticleList.value.slice((p - 1) * limit, p * limit);
    });
    const formatPostDate = (date) => {
      const dateFormatConst = topArticleConfig.value.dateFormat;
      if (isFunction(dateFormatConst)) return dateFormatConst(date || "");
      return formatDate(date || /* @__PURE__ */ new Date(), dateFormatConst);
    };
    const finalTitle = computed(() => {
      const { title } = topArticleConfig.value;
      if (isFunction(title)) return title(topArticleIcon);
      return title;
    });
    const tagColor = useTagColor();
    const itemRefs = ref([]);
    const getStyle = (num, index) => {
      return {
        [ns.cssVarName("num-bg-color")]: tagColor.value[num % tagColor.value.length].text,
        top: `calc(${index} * (calc(${ns.cssVar("home-top-article-gap")} + ${itemRefs.value?.[index]?.getBoundingClientRect().height || 0}px)))`
      };
    };
    const router = useRouter();
    const handleTitleClick = () => {
      topArticleConfig.value.titleClick?.(router);
    };
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(_sfc_main$1), {
        page: "",
        modelValue: pageNum.value,
        "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => pageNum.value = $event),
        pageSize: unref(topArticleConfig).limit,
        total: topArticleList.value.length,
        title: finalTitle.value,
        titleClick: unref(topArticleConfig).titleClick ? handleTitleClick : void 0,
        autoPage: unref(topArticleConfig).autoPage,
        pageSpeed: unref(topArticleConfig).pageSpeed,
        class: normalizeClass(unref(ns).b()),
        "aria-label": unref(t)("tk.topArticleCard.label")
      }, {
        default: withCtx(({ transitionName }) => [
          topArticleList.value.length ? (openBlock(), createBlock(TransitionGroup, {
            key: 0,
            name: transitionName,
            tag: "ul",
            mode: "out-in",
            class: normalizeClass(`${unref(ns).e("list")} flx-column`),
            "aria-label": unref(t)("tk.topArticleCard.listLabel")
          }, {
            default: withCtx(() => [
              (openBlock(true), createElementBlock(
                Fragment,
                null,
                renderList(currentTopArticleList.value, (item, index) => {
                  return openBlock(), createElementBlock("li", {
                    ref_for: true,
                    ref_key: "itemRefs",
                    ref: itemRefs,
                    key: item.num,
                    class: normalizeClass(unref(ns).e("list__item")),
                    style: normalizeStyle(getStyle(item.num - 1, index)),
                    "aria-label": item.title
                  }, [
                    createElementVNode(
                      "span",
                      {
                        class: normalizeClass(["num", { sticky: item.frontmatter.sticky }])
                      },
                      toDisplayString(item.num),
                      3
                      /* TEXT, CLASS */
                    ),
                    createElementVNode(
                      "div",
                      {
                        class: normalizeClass(unref(ns).e("list__item__info"))
                      },
                      [
                        createElementVNode("a", {
                          href: item.url && unref(withBase)(item.url),
                          class: "hover-color flx-align-center"
                        }, [
                          createVNode(unref(_sfc_main$2), {
                            post: item,
                            "title-tag-props": { position: "right", size: "mini" }
                          }, null, 8, ["post"])
                        ], 8, _hoisted_2),
                        createElementVNode(
                          "div",
                          _hoisted_3,
                          toDisplayString(formatPostDate(item.date)),
                          1
                          /* TEXT */
                        )
                      ],
                      2
                      /* CLASS */
                    )
                  ], 14, _hoisted_1);
                }),
                128
                /* KEYED_FRAGMENT */
              ))
            ]),
            _: 1
            /* STABLE */
          }, 8, ["name", "class", "aria-label"])) : (openBlock(), createElementBlock("div", {
            key: 1,
            class: normalizeClass(unref(ns).m("empty")),
            "aria-label": unref(topArticleConfig).emptyLabel
          }, toDisplayString(unref(topArticleConfig).emptyLabel), 11, _hoisted_4))
        ]),
        _: 1
        /* STABLE */
      }, 8, ["modelValue", "pageSize", "total", "title", "titleClick", "autoPage", "pageSpeed", "class", "aria-label"]);
    };
  }
});

export { _sfc_main as default };
