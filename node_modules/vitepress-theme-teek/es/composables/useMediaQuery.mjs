import { shallowRef, watchEffect, toValue, computed } from 'vue';
import { useMounted } from './useMounted.mjs';
import { useEventListener } from './useEventListener.mjs';

const useMediaQuery = (query, match = true) => {
  const isSupported = shallowRef(false);
  useMounted(() => {
    isSupported.value = window && "matchMedia" in window && typeof window.matchMedia === "function";
  });
  const mediaQuery = shallowRef();
  const matches = shallowRef(false);
  const handler = (event) => {
    matches.value = event.matches;
  };
  watchEffect(() => {
    if (!isSupported.value) return;
    mediaQuery.value = window.matchMedia(toValue(query));
    matches.value = mediaQuery.value.matches;
  });
  useEventListener(mediaQuery, "change", handler, { passive: true });
  return computed(() => match ? matches.value : !matches.value);
};

export { useMediaQuery };
