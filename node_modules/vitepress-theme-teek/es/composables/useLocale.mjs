import { inject, ref, computed, isRef } from 'vue';
import zhCn from '../locale/lang/zh-cn.mjs';
import { get } from '../helper/dist/index.mjs';

const localeContextKey = Symbol("localeContextKey");
const useLocale = (localeOverride) => {
  const locale = localeOverride || inject(localeContextKey, ref());
  const finalLocale = computed(() => locale?.value || zhCn);
  const lang = computed(() => finalLocale.value.lang);
  const localeRef = isRef(finalLocale) ? finalLocale : ref(finalLocale);
  const translate = (path, option, locale2) => {
    return get(locale2, path, path).replace(/\{(\w+)\}/g, (_, key) => `${option?.[key] ?? `{${key}}`}`);
  };
  return {
    lang,
    locale: localeRef,
    t: (path, option) => {
      return translate(path, option, finalLocale.value);
    },
    translate
  };
};

export { localeContextKey, useLocale };
