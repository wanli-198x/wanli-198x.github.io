"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// src/worker.ts
var import_worker_threads = require("worker_threads");
async function processPost(config, post, index, renderHTML) {
  try {
    let html = "";
    if (renderHTML === true) {
      const { createMarkdownRenderer } = await import("vitepress");
      const mdRender = await createMarkdownRenderer(
        config.srcDir,
        config.markdown,
        config.site.base
      );
      html = mdRender.render(post.fileContent, post.env);
    } else if (typeof renderHTML === "function") {
      throw new Error("Custom renderHTML function not supported in worker, fallback to main thread");
    } else {
      html = "";
    }
    return {
      index,
      html
    };
  } catch (error) {
    return {
      index,
      html: "",
      error: error instanceof Error ? error.message : String(error)
    };
  }
}
async function main() {
  if (!import_worker_threads.parentPort) {
    throw new Error("This script must be run as a worker thread");
  }
  const { config, renderHTML, posts } = import_worker_threads.workerData;
  try {
    const results = [];
    for (let i = 0; i < posts.length; i++) {
      const result = await processPost(config, posts[i], i, renderHTML);
      results.push(result);
    }
    import_worker_threads.parentPort.postMessage({ success: true, results });
  } catch (error) {
    import_worker_threads.parentPort.postMessage({
      success: false,
      error: error instanceof Error ? error.message : String(error)
    });
  }
}
main().catch((error) => {
  if (import_worker_threads.parentPort) {
    import_worker_threads.parentPort.postMessage({
      success: false,
      error: error instanceof Error ? error.message : String(error)
    });
  }
});
