import { existsSync, readFileSync } from 'node:fs';
import { basename } from 'node:path';
import matter from 'gray-matter';
import { EOL } from 'node:os';

function VitePluginVitePressMdH1(option = {}) {
  return {
    name: "vite-plugin-vitepress-md-h1",
    load: (id) => {
      if (!id.endsWith(".md") || !existsSync(id)) return;
      const { ignoreList = [], beforeInject } = option;
      if (isSome(ignoreList, id)) return;
      const content = readFileSync(id, "utf-8");
      const { data: frontmatter = {}, content: mdContent } = matter(content, {});
      if (frontmatter.autoTitle === void 0 && ![void 0, "doc"].includes(frontmatter.layout)) return;
      if (frontmatter.autoTitle === false) return;
      if (mdContent.trimStart().split(/\r?\n/)[0].startsWith("# ")) return;
      let title = frontmatter.title || getMdFileTitle(basename(id)) || "";
      if (beforeInject && typeof beforeInject === "function") {
        const result = beforeInject(frontmatter, id, title);
        if (result === false) return;
        if (typeof result === "string") title = result;
      }
      const newTwoLine = EOL + EOL;
      if (content.trimStart().startsWith("---")) {
        return content.replace(/^(\s*---[\s\S]*?---)/, `$1${newTwoLine}# ${title}${newTwoLine}`);
      }
      return `# ${title}${newTwoLine}${content}`;
    }
  };
}
const getMdFileTitle = (filename) => {
  let title = "";
  const fileNameArr = filename.split(".");
  if (fileNameArr.length === 2) title = fileNameArr[0];
  else {
    const firstDotIndex = filename.indexOf(".");
    const lastDotIndex = filename.lastIndexOf(".");
    title = filename.substring(firstDotIndex + 1, lastDotIndex);
  }
  return title;
};
const isSome = (arr, name) => {
  return arr.some(
    (item) => typeof item === "string" && name.includes(item) || item instanceof RegExp && item.test(name)
  );
};

export { VitePluginVitePressMdH1 as default, getMdFileTitle };
