import { defineComponent, computed, inject, createElementBlock, openBlock, normalizeClass, unref, renderSlot, createBlock, createCommentVNode, withCtx, normalizeProps, guardReactiveProps } from 'vue';
import { useData } from 'vitepress';
import { isBoolean } from '../../../../helper/dist/index.mjs';
import { useTeekConfig } from '../../ConfigProvider/index.mjs';
import { mobileMaxWidthMedia } from '../../ThemeEnhance/src/themeEnhance.mjs';
import { artalkContext } from '../../CommentArtalk/src/artalk.mjs';
import { giscusContext } from '../../CommentGiscus/src/giscus.mjs';
import { twikooContext } from '../../CommentTwikoo/src/twikoo.mjs';
import { walineContext } from '../../CommentWaline/src/waline.mjs';
import 'vitepress-theme-teek/theme-chalk/tk-copy-banner.css';
import { useMediaQuery } from '../../../../composables/useMediaQuery.mjs';
import '../../../../composables/useZIndex.mjs';
import { ns } from './namespace.mjs';
import _sfc_main$1 from './BackTop.vue2.mjs';
import _sfc_main$2 from './ToComment.vue2.mjs';
import _sfc_main$3 from './ThemeColor.vue2.mjs';

var _sfc_main = /* @__PURE__ */ defineComponent({
  ...{ name: "RightBottomButton" },
  __name: "index",
  setup(__props) {
    const { getTeekConfigRef } = useTeekConfig();
    const backTopConfig = getTeekConfigRef("backTop", { enabled: true });
    const toCommentConfig = getTeekConfigRef("toComment", { enabled: true });
    const themeEnhanceConfig = getTeekConfigRef("themeEnhance", { enabled: true });
    const teekConfig = getTeekConfigRef(null, { comment: { provider: "" } });
    const { frontmatter } = useData();
    const commentConfig = computed(() => {
      const comment = frontmatter.value.comment ?? teekConfig.value.comment;
      if (isBoolean(comment)) return { enabled: comment };
      const getArtalkInstance = inject(artalkContext, null);
      const getGiscusInstance = inject(giscusContext, null);
      const getTwikooInstance = inject(twikooContext, null);
      const getWalineInstance = inject(walineContext, null);
      if (getArtalkInstance || getGiscusInstance || getTwikooInstance || getWalineInstance) {
        return { enabled: true };
      }
      return { enabled: true, provider: comment.provider };
    });
    const isMobile = useMediaQuery(mobileMaxWidthMedia);
    const disabledThemeColor = computed(() => {
      const { enabled = true, themeColor = {}, position = "top" } = themeEnhanceConfig.value;
      const isDisabled = themeColor.disabled ?? themeColor.disabledInMobile;
      if (!enabled) return true;
      if (isDisabled !== void 0) return isDisabled;
      return !isMobile.value && position === "top";
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock(
        "div",
        {
          class: normalizeClass([unref(ns).b(), unref(ns).join("wallpaper-outside"), "flx-column"])
        },
        [
          renderSlot(_ctx.$slots, "teek-right-bottom-before"),
          unref(backTopConfig).enabled ? (openBlock(), createBlock(_sfc_main$1, { key: 0 }, {
            default: withCtx((scope) => [
              renderSlot(_ctx.$slots, "teek-back-top", normalizeProps(guardReactiveProps(scope)))
            ]),
            _: 3
            /* FORWARDED */
          })) : createCommentVNode("v-if", true),
          unref(toCommentConfig).enabled && (commentConfig.value.enabled || commentConfig.value.provider) ? (openBlock(), createBlock(_sfc_main$2, { key: 1 }, {
            default: withCtx((scope) => [
              renderSlot(_ctx.$slots, "teek-to-comment", normalizeProps(guardReactiveProps(scope)))
            ]),
            _: 3
            /* FORWARDED */
          })) : createCommentVNode("v-if", true),
          !disabledThemeColor.value ? (openBlock(), createBlock(_sfc_main$3, { key: 2 })) : createCommentVNode("v-if", true),
          renderSlot(_ctx.$slots, "teek-right-bottom-after")
        ],
        2
        /* CLASS */
      );
    };
  }
});

export { _sfc_main as default };
