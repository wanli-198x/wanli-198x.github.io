import { defineComponent, ref, watch, computed, createElementBlock, openBlock, Fragment, createVNode, createBlock, createCommentVNode, unref, withCtx, isRef } from 'vue';
import { useData } from 'vitepress';
import 'vitepress-theme-teek/theme-chalk/tk-copy-banner.css';
import { useLocale } from '../../../../composables/useLocale.mjs';
import { useMediaQuery } from '../../../../composables/useMediaQuery.mjs';
import { useStorage } from '../../../../composables/useStorage.mjs';
import '../../../../composables/useZIndex.mjs';
import clickIcon from '../../../../static/icons/theme-enhance/click.mjs';
import { useTeekConfig } from '../../ConfigProvider/index.mjs';
import _sfc_main$2 from '../../../common/Segmented/src/Segmented.vue2.mjs';
import { touchMedia } from './themeEnhance.mjs';
import { spotlightStorageKey } from './namespace.mjs';
import _sfc_main$1 from './components/BaseTemplate.vue2.mjs';
import _sfc_main$3 from './components/SpotlightHover.vue2.mjs';

var _sfc_main = /* @__PURE__ */ defineComponent({
  ...{ name: "Spotlight" },
  __name: "Spotlight",
  setup(__props) {
    const { getTeekConfigRef } = useTeekConfig();
    const themeEnhanceConfig = getTeekConfigRef("themeEnhance", {});
    const { t } = useLocale();
    const { frontmatter } = useData();
    const supportTouch = useMediaQuery(touchMedia);
    const spotlight = useStorage(spotlightStorageKey, themeEnhanceConfig.value.spotlight?.defaultValue ?? true);
    const oldSpotlight = ref(spotlight.value);
    watch(
      () => frontmatter.value.spotlight,
      (newVal) => {
        if (newVal !== void 0) {
          oldSpotlight.value = spotlight.value;
          spotlight.value = newVal;
        } else {
          spotlight.value = oldSpotlight.value;
        }
      },
      { immediate: true }
    );
    const segmentedOptions = computed(() => [
      {
        value: true,
        label: "ON",
        title: t("tk.themeEnhance.spotlight.onTipTitle"),
        ariaLabel: t("tk.themeEnhance.spotlight.onTipTitle")
      },
      {
        value: false,
        label: "OFF",
        title: t("tk.themeEnhance.spotlight.offTipTitle"),
        ariaLabel: t("tk.themeEnhance.spotlight.offTipTitle")
      }
    ]);
    const tips = [
      {
        title: `ON ${t("tk.themeEnhance.spotlight.onTipTitle")}`,
        content: t("tk.themeEnhance.spotlight.onHelpTipContent")
      },
      {
        title: `OFF ${t("tk.themeEnhance.spotlight.offTipTitle")}`,
        content: t("tk.themeEnhance.spotlight.offHelpTipContent")
      }
    ];
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock(
        Fragment,
        null,
        [
          createVNode(_sfc_main$1, {
            icon: unref(clickIcon),
            title: unref(t)("tk.themeEnhance.spotlight.title"),
            helper: !unref(themeEnhanceConfig).spotlight?.disableHelp,
            "helper-desc": unref(t)("tk.themeEnhance.spotlight.helpDesc"),
            tips,
            disabled: unref(supportTouch)
          }, {
            default: withCtx(() => [
              createVNode(unref(_sfc_main$2), {
                modelValue: unref(spotlight),
                "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => isRef(spotlight) ? spotlight.value = $event : null),
                options: segmentedOptions.value,
                disabled: unref(supportTouch)
              }, null, 8, ["modelValue", "options", "disabled"])
            ]),
            _: 1
            /* STABLE */
          }, 8, ["icon", "title", "helper", "helper-desc", "disabled"]),
          unref(spotlight) && !unref(supportTouch) ? (openBlock(), createBlock(_sfc_main$3, {
            key: 0,
            enabled: unref(spotlight) && !unref(supportTouch)
          }, null, 8, ["enabled"])) : createCommentVNode("v-if", true)
        ],
        64
        /* STABLE_FRAGMENT */
      );
    };
  }
});

export { _sfc_main as default };
