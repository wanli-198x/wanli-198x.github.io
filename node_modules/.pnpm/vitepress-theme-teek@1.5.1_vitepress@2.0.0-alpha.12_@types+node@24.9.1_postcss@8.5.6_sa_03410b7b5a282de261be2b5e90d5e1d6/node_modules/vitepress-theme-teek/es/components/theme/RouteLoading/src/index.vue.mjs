import { useModel, watch, onBeforeMount, onMounted, renderSlot, createElementVNode, normalizeClass, unref, createVNode, Transition, withCtx, withDirectives, toDisplayString, vShow } from 'vue';
import { onContentUpdated } from 'vitepress';
import { isString } from '../../../../helper/dist/index.mjs';
import { useNamespace } from '../../../../composables/useNamespace.mjs';
import 'vitepress-theme-teek/theme-chalk/tk-copy-banner.css';
import { useVpRouter } from '../../../../composables/useVpRouter.mjs';
import '../../../../composables/useZIndex.mjs';
import { useTeekConfig } from '../../ConfigProvider/index.mjs';

const _sfc_main = {
  __name: "index",
  props: {
    "modelValue": { default: true },
    "modelModifiers": {}
  },
  emits: ["update:modelValue"],
  setup(__props) {
    const loading = useModel(__props, "modelValue");
    const ns = useNamespace("route-loading");
    const vpRouter = useVpRouter();
    const { getTeekConfigRef } = useTeekConfig();
    const loadingConfig = getTeekConfigRef("loading", false);
    const handleRouteStart = () => {
      if (!loading.value) loading.value = true;
    };
    const handleRouteComplete = () => {
      setTimeout(
        () => {
          if (loading.value) loading.value = false;
        },
        Math.floor(Math.random() * (500 - 460 + 1)) + 460
      );
    };
    vpRouter.bindBeforeRouteChange(
      "routeLoadingBefore",
      () => {
        handleRouteStart();
      },
      "before"
    );
    vpRouter.bindAfterRouteChange(
      "routeLoadingAfter",
      () => {
        handleRouteComplete();
      },
      "before"
    );
    watch(
      () => vpRouter.route.path,
      () => {
        handleRouteStart();
        handleRouteComplete();
      }
    );
    onBeforeMount(handleRouteStart);
    onMounted(handleRouteComplete);
    onContentUpdated(handleRouteComplete);
    return (_ctx, _cache) => {
      return renderSlot(_ctx.$slots, "default", { loading: loading.value }, () => [
        createElementVNode(
          "div",
          {
            class: normalizeClass(unref(ns).b())
          },
          [
            createVNode(Transition, {
              name: unref(ns).join("fade"),
              mode: "out-in",
              persisted: ""
            }, {
              default: withCtx(() => [
                withDirectives(createElementVNode(
                  "div",
                  {
                    class: normalizeClass(unref(ns).e("mask"))
                  },
                  [
                    createElementVNode(
                      "div",
                      {
                        class: normalizeClass(unref(ns).e("loader"))
                      },
                      [
                        createElementVNode(
                          "div",
                          {
                            class: normalizeClass(unref(ns).e("spinner"))
                          },
                          null,
                          2
                          /* CLASS */
                        ),
                        createElementVNode(
                          "p",
                          null,
                          toDisplayString(unref(isString)(unref(loadingConfig)) ? unref(loadingConfig) : "Teek \u62FC\u547D\u52A0\u8F7D\u4E2D ..."),
                          1
                          /* TEXT */
                        )
                      ],
                      2
                      /* CLASS */
                    )
                  ],
                  2
                  /* CLASS */
                ), [
                  [vShow, loading.value]
                ])
              ]),
              _: 1
              /* STABLE */
            }, 8, ["name"])
          ],
          2
          /* CLASS */
        )
      ]);
    };
  }
};

export { _sfc_main as default };
