import { defineComponent, ref, onMounted, onUnmounted, watch, createElementBlock, openBlock, normalizeClass, unref, createCommentVNode, createElementVNode, createBlock, resolveDynamicComponent, inject } from 'vue';
import { useData } from 'vitepress';
import { isClient } from '../../../../helper/dist/index.mjs';
import { useNamespace } from '../../../../composables/useNamespace.mjs';
import 'vitepress-theme-teek/theme-chalk/tk-copy-banner.css';
import { useVpRouter } from '../../../../composables/useVpRouter.mjs';
import '../../../../composables/useZIndex.mjs';
import { useTeekConfig } from '../../ConfigProvider/index.mjs';
import { artalkContext } from './artalk.mjs';

const _hoisted_1 = ["href"];
const artalkId = "artalk";
var _sfc_main = /* @__PURE__ */ defineComponent({
  ...{ name: "CommentArtalk" },
  __name: "index",
  setup(__props) {
    const ns = useNamespace();
    const vpRouter = useVpRouter();
    const { getTeekConfig } = useTeekConfig();
    const { isDark, page } = useData();
    const artalkOptions = getTeekConfig("comment", {}).options;
    const { server, site, ...options } = artalkOptions;
    const artalkRef = ref(null);
    const artalkJs = ref(null);
    const artalk = ref();
    const initArtalkByInject = () => {
      const getArtalkInstance = inject(artalkContext, () => null);
      const el = artalkRef.value || `#${artalkId}`;
      const artalkInstance = getArtalkInstance?.(el, artalkOptions);
      if (!artalkInstance) return false;
      artalk.value = artalkInstance;
      switchDark();
      return true;
    };
    const initArtalkByJs = () => {
      if (!isClient) return console.error("[Teek Error] Not in a client");
      const Artalk = window.Artalk;
      const el = artalkRef.value || `#${artalkId}`;
      if (!Artalk || !artalkRef.value) {
        return console.error("[Teek Error] Artalk initialization failed. Unable to load online js file from " + server);
      }
      artalk.value = Artalk.init({
        darkMode: isDark.value,
        ...options,
        el,
        pageKey: vpRouter.route.path,
        pageTitle: page.value.title,
        server,
        site
      });
      switchDark();
    };
    const initJs = () => {
      const t = artalkJs.value;
      if (t) t.onload = initArtalkByJs;
    };
    const reloadArtalk = () => {
      const a = artalk.value;
      a?.update({
        pageKey: vpRouter.route.path,
        pageTitle: page.value.title
      });
      a?.reload();
    };
    onMounted(() => {
      if (!initArtalkByInject() && server) {
        initJs();
        return artalk.value && vpRouter.bindAfterRouteChange(ns.join("artalk"), () => reloadArtalk());
      }
      console.error(
        "[Teek Error] Artalk initialization failed. Please configure the 'server' and 'site' or provide the artalk instance"
      );
    });
    onUnmounted(() => {
      const a = artalk.value;
      if (a) a.destroy();
    });
    const switchDark = () => {
      setTimeout(() => {
        const a = artalk.value;
        if (a) a.setDarkMode(isDark.value);
      }, 100);
    };
    watch(isDark, () => switchDark());
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock(
        "div",
        {
          class: normalizeClass(unref(ns).b("artalk"))
        },
        [
          unref(server) ? (openBlock(), createElementBlock("link", {
            key: 0,
            rel: "stylesheet",
            href: `${unref(server)}/dist/Artalk.css`,
            crossorigin: "anonymous"
          }, null, 8, _hoisted_1)) : createCommentVNode("v-if", true),
          createElementVNode(
            "div",
            {
              id: artalkId,
              ref_key: "artalkRef",
              ref: artalkRef
            },
            null,
            512
            /* NEED_PATCH */
          ),
          unref(server) ? (openBlock(), createBlock(resolveDynamicComponent("script"), {
            key: 1,
            src: `${unref(server)}/dist/Artalk.js`,
            crossorigin: "anonymous",
            ref_key: "artalkJs",
            ref: artalkJs
          }, null, 8, ["src"])) : createCommentVNode("v-if", true)
        ],
        2
        /* CLASS */
      );
    };
  }
});

export { _sfc_main as default };
