import { defineComponent, ref, onMounted, watch, createBlock, openBlock, Teleport, createElementBlock, createCommentVNode, normalizeClass, normalizeStyle, unref } from 'vue';
import { useRoute } from 'vitepress';
import { isClient } from '../../../../../helper/dist/index.mjs';
import { useEventListener } from '../../../../../composables/useEventListener.mjs';
import 'vitepress-theme-teek/theme-chalk/tk-copy-banner.css';
import { useStorage } from '../../../../../composables/useStorage.mjs';
import '../../../../../composables/useZIndex.mjs';
import { SpotlightStyle } from '../themeEnhance.mjs';
import { spotlightStyleStorageKey, ns } from '../namespace.mjs';

var _sfc_main = /* @__PURE__ */ defineComponent({
  ...{ name: "SpotlightHover" },
  __name: "SpotlightHover",
  props: {
    enabled: { type: Boolean }
  },
  setup(__props) {
    const props = __props;
    const shouldRecalculate = ref(false);
    const boxStyles = ref({ display: "none" });
    const vpDocElement = ref();
    const highlightedElement = ref();
    const spotlightStyle = useStorage(spotlightStyleStorageKey, SpotlightStyle.Aside);
    const mousePosition = ref({ x: 0, y: 0 });
    const computeBoxStyles = (bounding) => {
      return {
        display: "block",
        width: `${bounding.width + 8}px`,
        height: `${bounding.height + 8}px`,
        left: `${bounding.left - 4}px`,
        top: `${bounding.top - 4}px`,
        transition: "all 0.2s ease",
        borderRadius: "8px"
      };
    };
    const findChildElementUnderVPDocElement = (element) => {
      if (element === null) return null;
      if (element.parentElement === document.querySelector(".VPDoc main .vp-doc > div")) return element;
      else return findChildElementUnderVPDocElement(element.parentElement);
    };
    const watchHandler = () => {
      if (!isClient) return;
      const element = document.elementFromPoint(mousePosition.value.x, mousePosition.value.y);
      if (!(element && vpDocElement.value?.contains(element))) return;
      const el = findChildElementUnderVPDocElement(element);
      highlightedElement.value = el || void 0;
      if (highlightedElement.value && highlightedElement.value.tagName === "P") {
        const val = highlightedElement.value;
        const style = window.getComputedStyle(val);
        const lineHeight = Number.parseFloat(style.lineHeight);
        const lines = Math.floor(val.offsetHeight / lineHeight);
        const rect = val.getBoundingClientRect();
        const relativeY = mousePosition.value.y - rect.top;
        for (let i = 0; i < lines; i++) {
          const top = i * lineHeight;
          const height = lineHeight;
          const left = val.offsetLeft;
          const width = val.offsetWidth;
          if (relativeY >= top && relativeY < top + height) {
            boxStyles.value = computeBoxStyles({
              top: top + rect.top,
              left: left + rect.left,
              width,
              height
            });
            break;
          }
        }
      } else {
        if (highlightedElement.value) {
          const rect = highlightedElement.value.getBoundingClientRect();
          boxStyles.value = computeBoxStyles({
            top: rect.top,
            left: rect.left,
            width: rect.width,
            height: rect.height
          });
        }
      }
    };
    useEventListener(
      () => document,
      "mousemove",
      (event) => {
        mousePosition.value = { x: event.clientX, y: event.clientY };
      }
    );
    useEventListener(() => document, "scroll", watchHandler, true);
    onMounted(() => {
      vpDocElement.value = document.querySelector(".VPDoc main .vp-doc");
    });
    const route = useRoute();
    watch(
      route,
      () => {
        vpDocElement.value = document.querySelector(".VPDoc main .vp-doc");
        shouldRecalculate.value = true;
        boxStyles.value = { display: "none" };
        watchHandler();
        shouldRecalculate.value = false;
      },
      { flush: "post" }
    );
    watch([() => mousePosition.value.x, () => mousePosition.value.y], () => {
      if (props.enabled) watchHandler();
    });
    watch(
      () => props.enabled,
      (val) => {
        if (!val) boxStyles.value = { display: "none" };
      }
    );
    return (_ctx, _cache) => {
      return openBlock(), createBlock(Teleport, { to: "body" }, [
        props.enabled && !shouldRecalculate.value ? (openBlock(), createElementBlock(
          "div",
          {
            key: 0,
            style: normalizeStyle(boxStyles.value),
            class: normalizeClass([
              unref(ns).join("spotlight-hover"),
              unref(spotlightStyle) === unref(SpotlightStyle).Under ? unref(ns).join("spotlight-hover__under") : "",
              unref(spotlightStyle) === unref(SpotlightStyle).Aside ? unref(ns).join("spotlight-hover__aside") : ""
            ]),
            "aria-hidden": "true",
            focusable: "false"
          },
          null,
          6
          /* CLASS, STYLE */
        )) : createCommentVNode("v-if", true)
      ]);
    };
  }
});

export { _sfc_main as default };
