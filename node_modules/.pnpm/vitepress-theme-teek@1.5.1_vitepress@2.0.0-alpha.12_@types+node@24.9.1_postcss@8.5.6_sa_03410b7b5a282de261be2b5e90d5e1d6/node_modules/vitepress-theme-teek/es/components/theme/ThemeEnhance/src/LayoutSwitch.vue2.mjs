import { defineComponent, ref, watch, computed, createBlock, openBlock, unref, withCtx, createVNode, isRef } from 'vue';
import { useData } from 'vitepress';
import { isClient } from '../../../../helper/dist/index.mjs';
import 'vitepress-theme-teek/theme-chalk/tk-copy-banner.css';
import { useLocale } from '../../../../composables/useLocale.mjs';
import { useMediaQuery } from '../../../../composables/useMediaQuery.mjs';
import { useStorage } from '../../../../composables/useStorage.mjs';
import '../../../../composables/useZIndex.mjs';
import fullscreenIcon from '../../../../static/icons/fullscreen.mjs';
import fullScreenOneIcon from '../../../../static/icons/theme-enhance/fullScreenOne.mjs';
import fullscreenTwoIcon from '../../../../static/icons/theme-enhance/fullscreenTwo.mjs';
import layoutIcon from '../../../../static/icons/theme-enhance/layout.mjs';
import overallReductionIcon from '../../../../static/icons/theme-enhance/overallReduction.mjs';
import { useTeekConfig } from '../../ConfigProvider/index.mjs';
import _sfc_main$2 from '../../../common/Segmented/src/Segmented.vue2.mjs';
import { LayoutMode, mobileMaxWidthMedia, layoutModeAttribute } from './themeEnhance.mjs';
import { layoutModeStorageKey } from './namespace.mjs';
import { useAnimated } from './useAnimated.mjs';
import _sfc_main$1 from './components/BaseTemplate.vue2.mjs';

var _sfc_main = /* @__PURE__ */ defineComponent({
  ...{ name: "LayoutSwitch" },
  __name: "LayoutSwitch",
  setup(__props) {
    const { getTeekConfigRef } = useTeekConfig();
    const themeEnhanceConfig = getTeekConfigRef("themeEnhance", {});
    const { t } = useLocale();
    const { frontmatter } = useData();
    const layoutMode = useStorage(
      layoutModeStorageKey,
      themeEnhanceConfig.value.layoutSwitch?.defaultMode || LayoutMode.Original
    );
    const isMobile = useMediaQuery(mobileMaxWidthMedia);
    const oldLayoutMode = ref(layoutMode.value);
    const { start: startAnimated } = useAnimated();
    const update = (val) => {
      if (!isClient) return;
      const { layoutSwitch } = themeEnhanceConfig.value;
      if (!layoutSwitch?.disableAnimation) startAnimated();
      const el = document.documentElement;
      if (el.getAttribute(layoutModeAttribute) === val) return;
      el.setAttribute(layoutModeAttribute, val);
      themeEnhanceConfig.value.layoutSwitch?.switchModeDone?.(val);
    };
    watch(layoutMode, update, { immediate: true });
    watch(
      () => frontmatter.value.layoutMode,
      (newVal) => {
        if (newVal) {
          oldLayoutMode.value = layoutMode.value;
          layoutMode.value = newVal;
        } else {
          layoutMode.value = oldLayoutMode.value;
        }
      },
      { immediate: true }
    );
    watch(
      () => themeEnhanceConfig.value.layoutSwitch?.defaultMode,
      (newVal) => {
        if (newVal) layoutMode.value = newVal;
      }
    );
    const content = computed(() => [
      {
        value: LayoutMode.FullWidth,
        title: t("tk.themeEnhance.layoutSwitch.fullWidthTipTitle"),
        tipContent: t("tk.themeEnhance.layoutSwitch.fullWidthHelpTipContent"),
        icon: fullScreenOneIcon
      },
      {
        value: LayoutMode.SidebarWidthAdjustableOnly,
        title: t("tk.themeEnhance.layoutSwitch.sidebarWidthAdjustableOnlyTipTitle"),
        tipContent: t("tk.themeEnhance.layoutSwitch.sidebarWidthAdjustableOnlyHelpTipContent"),
        icon: fullscreenTwoIcon
      },
      {
        value: LayoutMode.BothWidthAdjustable,
        title: t("tk.themeEnhance.layoutSwitch.bothWidthAdjustableTipTitle"),
        tipContent: t("tk.themeEnhance.layoutSwitch.bothWidthAdjustableHelpTipContent"),
        icon: fullscreenIcon
      },
      {
        value: LayoutMode.Original,
        title: t("tk.themeEnhance.layoutSwitch.originalWidthTipTitle"),
        tipContent: t("tk.themeEnhance.layoutSwitch.originalWidthHelpTipContent"),
        icon: overallReductionIcon
      }
    ]);
    const segmentedOptions = computed(
      () => content.value.map((item) => ({
        value: item.value,
        title: item.title,
        ariaLabel: item.title,
        icon: item.icon
      }))
    );
    const tips = computed(
      () => content.value.map((item) => ({
        title: item.title,
        icon: item.icon,
        content: item.tipContent
      }))
    );
    return (_ctx, _cache) => {
      return openBlock(), createBlock(_sfc_main$1, {
        icon: unref(layoutIcon),
        title: unref(t)("tk.themeEnhance.layoutSwitch.title"),
        helper: !unref(themeEnhanceConfig).layoutSwitch?.disableHelp,
        "helper-desc": unref(t)("tk.themeEnhance.layoutSwitch.helpDesc"),
        tips: tips.value,
        disabled: unref(isMobile)
      }, {
        default: withCtx(() => [
          createVNode(unref(_sfc_main$2), {
            modelValue: unref(layoutMode),
            "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => isRef(layoutMode) ? layoutMode.value = $event : null),
            options: segmentedOptions.value,
            disabled: unref(isMobile)
          }, null, 8, ["modelValue", "options", "disabled"])
        ]),
        _: 1
        /* STABLE */
      }, 8, ["icon", "title", "helper", "helper-desc", "tips", "disabled"]);
    };
  }
});

export { _sfc_main as default };
