import { defineComponent, ref, watch, onMounted, createBlock, openBlock, unref, normalizeClass, withCtx, createElementBlock, Fragment, renderList, createElementVNode, toDisplayString, createVNode } from 'vue';
import { useData } from 'vitepress';
import { isClient } from '../../../../helper/dist/index.mjs';
import 'vitepress-theme-teek/theme-chalk/tk-copy-banner.css';
import { useLocale } from '../../../../composables/useLocale.mjs';
import { useStorage } from '../../../../composables/useStorage.mjs';
import { useThemeColor, varNameList } from '../../../../composables/useThemeColor.mjs';
import '../../../../composables/useZIndex.mjs';
import { useTeekConfig } from '../../ConfigProvider/index.mjs';
import _sfc_main$2 from '../../../common/Icon/src/index.vue2.mjs';
import '@iconify/vue';
import _sfc_main$1 from '../../../common/Popover/src/index.vue2.mjs';
import { ThemeColorName, themeColorAttribute, themeColorList } from '../../ThemeEnhance/src/themeEnhance.mjs';
import { themeColorStorageKey } from '../../ThemeEnhance/src/namespace.mjs';
import { useThemeColorList } from '../../ThemeEnhance/src/useThemeColorList.mjs';
import magicIcon from '../../../../static/icons/magic.mjs';
import { ns } from './namespace.mjs';

const _hoisted_1 = ["title", "aria-label"];
const _hoisted_2 = ["onClick", "title", "aria-label"];
var _sfc_main = /* @__PURE__ */ defineComponent({
  ...{ name: "ThemeColor" },
  __name: "ThemeColor",
  setup(__props) {
    const { t } = useLocale();
    const { frontmatter } = useData();
    const { getTeekConfigRef } = useTeekConfig();
    const themeEnhanceConfig = getTeekConfigRef("themeEnhance", {});
    const themeColorName = useStorage(
      themeColorStorageKey,
      themeEnhanceConfig.value.themeColor?.defaultColorName || ThemeColorName.vpDefault
    );
    const oldThemeColor = ref(themeColorName.value);
    const primaryColor = ref("");
    const { clear } = useThemeColor(primaryColor, () => {
      if (themeColorList.includes(themeColorName.value)) {
        return [varNameList.vpBrand1, varNameList.vpBrand2, varNameList.vpBrand3, varNameList.vpBrandSoft];
      }
    });
    const themeColorSelectList = useThemeColorList();
    const update = (val) => {
      if (!isClient) return;
      const el = document.documentElement;
      themeColorName.value = val;
      if (el.getAttribute(themeColorAttribute) === val) return;
      el.setAttribute(themeColorAttribute, val);
      if (themeColorList.includes(val)) {
        clear();
        primaryColor.value = getComputedStyle(el).getPropertyValue(varNameList.vpBrand1);
      } else {
        const appendThemeColor = themeEnhanceConfig.value.themeColor?.append || [];
        const option = appendThemeColor.map((item) => item.options).flat().filter((item) => item.value === val);
        const color = option[0]?.color;
        !color && clear();
        primaryColor.value = color || getComputedStyle(el).getPropertyValue(varNameList.vpBrand1);
      }
      themeEnhanceConfig.value.themeColor?.switchColorDone?.(val);
    };
    watch(themeColorName, update, { immediate: true });
    watch(
      () => frontmatter.value.themeColorName,
      (newVal) => {
        if (newVal) {
          oldThemeColor.value = themeColorName.value;
          themeColorName.value = newVal;
        } else {
          themeColorName.value = oldThemeColor.value;
        }
      },
      { immediate: true }
    );
    onMounted(() => {
      if (frontmatter.value.themeColor) update(frontmatter.value.themeColor);
      else update(themeColorName.value);
    });
    const handleChangePrimaryColor = (option) => {
      themeColorName.value = option.value;
    };
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(_sfc_main$1), {
        class: normalizeClass(unref(ns).e("button")),
        "popper-class": unref(ns).e("dropdown"),
        placement: "left-start",
        width: 120,
        "x-offset": 15,
        "transition-name": unref(ns).join("fade-scale"),
        title: unref(t)("tk.themeEnhance.themeColor.title"),
        role: "button",
        "aria-label": unref(t)("tk.themeEnhance.themeColor.title")
      }, {
        reference: withCtx(() => [
          createVNode(unref(_sfc_main$2), {
            icon: unref(magicIcon),
            "aria-hidden": "true"
          }, null, 8, ["icon"])
        ]),
        default: withCtx(() => [
          (openBlock(true), createElementBlock(
            Fragment,
            null,
            renderList(unref(themeColorSelectList), (item) => {
              return openBlock(), createElementBlock("ul", {
                key: item.label
              }, [
                createElementVNode("li", {
                  class: normalizeClass(`${unref(ns).e("dropdown__title")} sle`),
                  title: item.tip,
                  "aria-label": item.label
                }, toDisplayString(item.label), 11, _hoisted_1),
                createElementVNode("li", null, [
                  createElementVNode("ul", null, [
                    (openBlock(true), createElementBlock(
                      Fragment,
                      null,
                      renderList(item.options, (option) => {
                        return openBlock(), createElementBlock("li", {
                          key: item.label + option.value,
                          class: normalizeClass(["dropdown-item", "sle", { active: option.value === unref(themeColorName) }]),
                          onClick: ($event) => handleChangePrimaryColor(option),
                          role: "button",
                          title: option.title,
                          "aria-label": option.ariaLabel ?? option.title ?? option.label
                        }, toDisplayString(option.label), 11, _hoisted_2);
                      }),
                      128
                      /* KEYED_FRAGMENT */
                    ))
                  ])
                ])
              ]);
            }),
            128
            /* KEYED_FRAGMENT */
          ))
        ]),
        _: 1
        /* STABLE */
      }, 8, ["class", "popper-class", "transition-name", "title", "aria-label"]);
    };
  }
});

export { _sfc_main as default };
