import { defineComponent, ref, computed, inject, onMounted, watch, createBlock, openBlock, unref, normalizeClass, withCtx, createElementBlock, TransitionGroup, createCommentVNode, Fragment, renderList, normalizeStyle, createElementVNode, toDisplayString } from 'vue';
import { useRouter, withBase } from 'vitepress';
import { isFunction } from '../../../../helper/dist/index.mjs';
import { useNamespace } from '../../../../composables/useNamespace.mjs';
import 'vitepress-theme-teek/theme-chalk/tk-copy-banner.css';
import { useLocale } from '../../../../composables/useLocale.mjs';
import '../../../../composables/useZIndex.mjs';
import tagIcon from '../../../../static/icons/tag.mjs';
import { pageNumKey } from '../../HomePostList/src/homePostList.mjs';
import { useTeekConfig, usePagePath, usePosts, useTagColor } from '../../ConfigProvider/index.mjs';
import { postDataUpdateSymbol } from '../../Home/src/home.mjs';
import _sfc_main$1 from '../../../common/PageCard/src/index.vue2.mjs';

const _hoisted_1 = ["onClick", "aria-label"];
const _hoisted_2 = { class: "num" };
const _hoisted_3 = ["href", "aria-label"];
const _hoisted_4 = ["aria-label"];
const tagKey = "tag";
var _sfc_main = /* @__PURE__ */ defineComponent({
  ...{ name: "HomeTagCard" },
  __name: "index",
  props: {
    tagsPage: { type: Boolean, default: false }
  },
  setup(__props) {
    const ns = useNamespace("tag");
    const { t } = useLocale();
    const { getTeekConfigRef } = useTeekConfig();
    const pageNum = ref(1);
    const tagConfig = getTeekConfigRef("tag", {
      pageTitle: t("tk.tagCard.pageTitle", { icon: tagIcon }),
      homeTitle: t("tk.tagCard.homeTitle", { icon: tagIcon }),
      emptyLabel: t("tk.tagCard.emptyLabel"),
      moreLabel: t("tk.tagCard.moreLabel"),
      limit: 21,
      autoPage: false,
      pageSpeed: 4e3,
      bgColor: ""
    });
    const { tagPath } = usePagePath();
    const posts = usePosts();
    const tagColor = useTagColor();
    const tags = computed(() => posts.value.groupCards.tags);
    const currentTags = computed(() => {
      const { limit } = tagConfig.value;
      const t2 = tags.value;
      const p = pageNum.value;
      return __props.tagsPage ? t2 : t2.slice((p - 1) * limit, p * limit);
    });
    const finalTitle = computed(() => {
      const { pageTitle, homeTitle } = tagConfig.value;
      const pt = isFunction(pageTitle) ? pageTitle(tagIcon) : pageTitle;
      const ht = isFunction(homeTitle) ? homeTitle(tagIcon) : homeTitle;
      return { pt, ht };
    });
    const getTagStyle = (index) => {
      const tagColorConst = tagColor.value;
      const color = tagColorConst[index % tagColorConst.length];
      return {
        [ns.cssVarName("home-tag-bg-color")]: color.bg,
        backgroundColor: color.bg,
        color: color.text,
        borderColor: color.border
      };
    };
    const updatePostListData = inject(postDataUpdateSymbol, () => {
    });
    const router = useRouter();
    const selectedTag = ref("");
    const handleSwitchTag = (tag = "") => {
      const { pathname, searchParams } = new URL(window.location.href);
      const categoriesPageLinkConst = withBase(tagPath.value);
      const inCategoriesPage = categoriesPageLinkConst === pathname;
      searchParams.delete(pageNumKey);
      searchParams.append(pageNumKey, "1");
      searchParams.delete(tagKey);
      if (tag) searchParams.append(tagKey, tag);
      const searchParamsStr = tag ? `?${searchParams.toString()}` : "";
      if (inCategoriesPage && selectedTag.value === tag) return;
      selectedTag.value = tag;
      if (!inCategoriesPage) return router.go(categoriesPageLinkConst + searchParamsStr);
      window.history.pushState({}, "", pathname + searchParamsStr);
      updatePostListData();
    };
    onMounted(() => {
      const { searchParams } = new URL(window.location.href);
      const tag = searchParams.get(tagKey);
      if (tag) selectedTag.value = tag;
    });
    watch(
      () => __props.tagsPage,
      () => {
        if (!__props.tagsPage) {
          selectedTag.value = "";
          return;
        }
        const { searchParams } = new URL(window.location.href);
        const tag = searchParams.get(tagKey);
        if (tag && selectedTag.value !== tag) selectedTag.value = tag;
      }
    );
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(_sfc_main$1), {
        page: !__props.tagsPage,
        modelValue: pageNum.value,
        "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => pageNum.value = $event),
        pageSize: unref(tagConfig).limit,
        total: tags.value.length,
        title: finalTitle.value[__props.tagsPage ? "pt" : "ht"],
        titleClick: handleSwitchTag,
        autoPage: unref(tagConfig).autoPage,
        pageSpeed: unref(tagConfig).pageSpeed,
        class: normalizeClass([unref(ns).b(), unref(ns).is("page", __props.tagsPage)]),
        "aria-label": unref(t)("tk.tagCard.label")
      }, {
        default: withCtx(({ transitionName }) => [
          tags.value.length ? (openBlock(), createBlock(TransitionGroup, {
            key: 0,
            name: transitionName,
            tag: "div",
            mode: "out-in",
            class: normalizeClass(unref(ns).e("list")),
            "aria-label": unref(t)("tk.tagCard.listLabel")
          }, {
            default: withCtx(() => [
              (openBlock(true), createElementBlock(
                Fragment,
                null,
                renderList(currentTags.value, (item, index) => {
                  return openBlock(), createElementBlock("a", {
                    key: item.name,
                    style: normalizeStyle(getTagStyle(index)),
                    onClick: ($event) => handleSwitchTag(item.name),
                    class: normalizeClass([{ active: item.name === selectedTag.value }, unref(ns).join("pointer")]),
                    "aria-label": item.name
                  }, [
                    createElementVNode(
                      "span",
                      null,
                      toDisplayString(item.name),
                      1
                      /* TEXT */
                    ),
                    createElementVNode(
                      "span",
                      _hoisted_2,
                      toDisplayString(item.length),
                      1
                      /* TEXT */
                    )
                  ], 14, _hoisted_1);
                }),
                128
                /* KEYED_FRAGMENT */
              )),
              !__props.tagsPage && unref(tagConfig).limit < tags.value.length ? (openBlock(), createElementBlock("a", {
                key: 0,
                href: unref(withBase)(unref(tagPath)),
                class: "more",
                "aria-label": unref(tagConfig).moreLabel
              }, toDisplayString(unref(tagConfig).moreLabel), 9, _hoisted_3)) : createCommentVNode("v-if", true)
            ]),
            _: 1
            /* STABLE */
          }, 8, ["name", "class", "aria-label"])) : (openBlock(), createElementBlock("div", {
            key: 1,
            class: normalizeClass(unref(ns).m("empty")),
            "aria-label": unref(tagConfig).emptyLabel
          }, toDisplayString(unref(tagConfig).emptyLabel), 11, _hoisted_4))
        ]),
        _: 1
        /* STABLE */
      }, 8, ["page", "modelValue", "pageSize", "total", "title", "autoPage", "pageSpeed", "class", "aria-label"]);
    };
  }
});

export { _sfc_main as default };
