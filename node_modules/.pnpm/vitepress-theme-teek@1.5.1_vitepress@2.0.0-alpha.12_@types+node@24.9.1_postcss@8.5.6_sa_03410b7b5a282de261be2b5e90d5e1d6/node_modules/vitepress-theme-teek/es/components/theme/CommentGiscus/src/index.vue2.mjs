import { defineComponent, computed, inject, ref, onMounted, createElementBlock, createCommentVNode, openBlock, normalizeClass, unref, createBlock, resolveDynamicComponent, mergeProps, nextTick } from 'vue';
import { useData } from 'vitepress';
import { isFunction } from '../../../../helper/dist/index.mjs';
import { useNamespace } from '../../../../composables/useNamespace.mjs';
import 'vitepress-theme-teek/theme-chalk/tk-copy-banner.css';
import { useVpRouter } from '../../../../composables/useVpRouter.mjs';
import '../../../../composables/useZIndex.mjs';
import { useTeekConfig } from '../../ConfigProvider/index.mjs';
import { giscusContext } from './giscus.mjs';

var _sfc_main = /* @__PURE__ */ defineComponent({
  ...{ name: "CommentGiscus" },
  __name: "index",
  setup(__props) {
    const ns = useNamespace();
    const vpRouter = useVpRouter();
    const { getTeekConfig } = useTeekConfig();
    const { isDark } = useData();
    const giscusOptions = getTeekConfig("comment", {}).options;
    const {
      repo,
      repoId,
      category,
      categoryId,
      mapping = "pathname",
      strict = "0",
      reactionsEnabled = "1",
      emitMetadata = "0",
      inputPosition = "top",
      lang = "zh-CN",
      theme: giscusThemeConfig,
      loading = "eager",
      useOnline = true,
      link = "https://giscus.app/client.js",
      integrity,
      ...options
    } = giscusOptions;
    const giscusTheme = computed(() => {
      if (isFunction(giscusThemeConfig)) return giscusThemeConfig(isDark.value);
      return giscusThemeConfig || (isDark.value ? "dark" : "light");
    });
    const giscusComponentFn = inject(giscusContext, () => null);
    const giscusComponent = giscusComponentFn?.(giscusOptions);
    const isShow = ref(false);
    const reloadGiscus = () => {
      isShow.value = false;
      nextTick(() => {
        isShow.value = true;
      });
    };
    onMounted(() => {
      if (!useOnline && !giscusComponent) {
        return console.error(
          "[Teek Error] Giscus initialization failed. Please configure the 'useOnline' to 'true' or provide the giscus component"
        );
      }
      reloadGiscus();
      vpRouter.bindAfterRouteChange(ns.join("giscus"), () => {
        reloadGiscus();
      });
    });
    return (_ctx, _cache) => {
      return isShow.value ? (openBlock(), createElementBlock(
        "div",
        {
          key: 0,
          class: normalizeClass(unref(ns).b("giscus"))
        },
        [
          unref(giscusComponent) ? (openBlock(), createBlock(resolveDynamicComponent(unref(giscusComponent)), mergeProps({
            key: 0,
            repo: unref(repo),
            "repo-id": unref(repoId),
            category: unref(category),
            "category-id": unref(categoryId),
            mapping: unref(mapping),
            "reactions-enabled": unref(reactionsEnabled),
            "emit-metadata": unref(emitMetadata),
            "input-position": unref(inputPosition),
            lang: unref(lang),
            theme: giscusTheme.value,
            loading: unref(loading)
          }, options), null, 16, ["repo", "repo-id", "category", "category-id", "mapping", "reactions-enabled", "emit-metadata", "input-position", "lang", "theme", "loading"])) : unref(useOnline) ? (openBlock(), createBlock(resolveDynamicComponent("script"), mergeProps({
            key: 1,
            defer: "",
            src: unref(link),
            integrity: unref(integrity),
            "data-repo": unref(repo),
            "data-repo-id": unref(repoId),
            "data-category": unref(category),
            "data-category-id": unref(categoryId),
            "data-mapping": unref(mapping),
            "data-strict": unref(strict),
            "data-reactions-enabled": unref(reactionsEnabled),
            "data-emit-metadata": unref(emitMetadata),
            "data-input-position": unref(inputPosition),
            "data-theme": giscusTheme.value,
            "data-lang": unref(lang)
          }, options, { crossorigin: "anonymous" }), null, 16, ["src", "integrity", "data-repo", "data-repo-id", "data-category", "data-category-id", "data-mapping", "data-strict", "data-reactions-enabled", "data-emit-metadata", "data-input-position", "data-theme", "data-lang"])) : createCommentVNode("v-if", true)
        ],
        2
        /* CLASS */
      )) : createCommentVNode("v-if", true);
    };
  }
});

export { _sfc_main as default };
