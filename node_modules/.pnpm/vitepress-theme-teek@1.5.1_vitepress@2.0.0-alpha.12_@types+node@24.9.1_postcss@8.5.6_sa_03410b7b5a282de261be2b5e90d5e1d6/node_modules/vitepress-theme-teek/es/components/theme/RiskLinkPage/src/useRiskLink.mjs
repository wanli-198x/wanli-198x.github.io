import { nextTick } from 'vue';
import { isClient, isString } from '../../../../helper/dist/index.mjs';
import { useEventListener } from '../../../../composables/useEventListener.mjs';
import 'vitepress';
import { useScopeDispose } from '../../../../composables/useScopeDispose.mjs';
import 'vitepress-theme-teek/theme-chalk/tk-copy-banner.css';
import '../../../../composables/useZIndex.mjs';
import { usePagePath } from '../../ConfigProvider/index.mjs';

const useRiskLink = (options = {}) => {
  const riskLinks = /* @__PURE__ */ new Set();
  const cleanups = [];
  const { riskLinkPath } = usePagePath();
  const { whitelist = [], blacklist = [] } = options;
  const isSome = (arr, name) => {
    return arr.some(
      (item) => item === name || isString(item) && name.startsWith(item) || item instanceof RegExp && item.test(name)
    );
  };
  const isRiskLink = (url, currentDomain) => {
    const link = new URL(url, window.location.origin);
    return link.hostname !== currentDomain && !isSome(whitelist, url);
  };
  const start = async () => {
    await nextTick();
    if (!isClient) return;
    document.querySelectorAll("a").forEach((link) => {
      const href = link.getAttribute("href");
      const currentDomain = window.location.hostname;
      if (!href || riskLinks.has(link)) return;
      if (blacklist.length && !isSome(blacklist, href)) return;
      if (!isRiskLink(href, currentDomain)) return;
      riskLinks.add(link);
      const stop2 = useEventListener(link, "click", (e) => {
        e.preventDefault();
        const encodedUrl = encodeURIComponent(href);
        window.open(`${riskLinkPath.value}?target=${encodedUrl}`);
      });
      cleanups.push(stop2);
    });
  };
  const stop = () => {
    cleanups.forEach((fn) => fn());
    cleanups.length = 0;
    riskLinks.clear();
  };
  const restart = () => {
    stop();
    start();
  };
  useScopeDispose(stop);
  return { start, stop, restart };
};

export { useRiskLink };
