import { defineComponent, mergeModels, useModel, ref, watch, createBlock, openBlock, unref, normalizeClass, withCtx, createElementVNode, renderSlot, createVNode } from 'vue';
import questionFilledIcon from '../../../../../static/icons/questionFilled.mjs';
import _sfc_main$2 from '../../../../common/Icon/src/index.vue2.mjs';
import '@iconify/vue';
import _sfc_main$1 from '../../../../common/Popover/src/index.vue2.mjs';
import { ns } from '../namespace.mjs';

var _sfc_main = /* @__PURE__ */ defineComponent({
  ...{ name: "Helper" },
  __name: "Helper",
  props: /* @__PURE__ */ mergeModels({
    triggerEl: {}
  }, {
    "modelValue": { default: false },
    "modelModifiers": {}
  }),
  emits: ["update:modelValue"],
  setup(__props) {
    const visible = useModel(__props, "modelValue");
    const popoverVisible = ref(visible.value);
    watch(popoverVisible, (newVal) => {
      visible.value = newVal;
    });
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(_sfc_main$1), {
        class: normalizeClass(unref(ns).e("helper")),
        modelValue: popoverVisible.value,
        "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => popoverVisible.value = $event),
        "trigger-el": __props.triggerEl,
        placement: "left-start"
      }, {
        reference: withCtx(() => [
          createVNode(unref(_sfc_main$2), {
            icon: unref(questionFilledIcon),
            size: 16
          }, null, 8, ["icon"])
        ]),
        default: withCtx(() => [
          createElementVNode(
            "div",
            {
              class: normalizeClass(unref(ns).e("helper__popup"))
            },
            [
              renderSlot(_ctx.$slots, "default")
            ],
            2
            /* CLASS */
          )
        ]),
        _: 3
        /* FORWARDED */
      }, 8, ["class", "modelValue", "trigger-el"]);
    };
  }
});

export { _sfc_main as default };
