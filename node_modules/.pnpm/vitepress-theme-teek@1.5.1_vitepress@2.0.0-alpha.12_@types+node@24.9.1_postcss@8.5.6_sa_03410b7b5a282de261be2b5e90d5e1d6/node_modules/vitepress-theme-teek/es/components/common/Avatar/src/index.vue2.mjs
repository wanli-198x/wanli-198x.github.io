import { defineComponent, ref, computed, watch, createElementBlock, openBlock, normalizeStyle, normalizeClass, createBlock, renderSlot, unref, toDisplayString } from 'vue';
import { isString, addUnit } from '../../../../helper/dist/index.mjs';
import 'vitepress';
import { useNamespace } from '../../../../composables/useNamespace.mjs';
import 'vitepress-theme-teek/theme-chalk/tk-copy-banner.css';
import '../../../../composables/useZIndex.mjs';
import _sfc_main$1 from '../../Icon/src/index.vue2.mjs';
import '@iconify/vue';

const _hoisted_1 = ["src", "alt", "srcSet"];
const _hoisted_2 = { key: 2 };
var _sfc_main = /* @__PURE__ */ defineComponent({
  ...{ name: "Avatar" },
  __name: "index",
  props: {
    size: {},
    shape: { default: "circle" },
    icon: {},
    iconSize: {},
    src: {},
    alt: {},
    srcSet: {},
    fit: { default: "cover" },
    bgColor: {},
    textColor: {},
    textSize: {},
    text: {}
  },
  emits: ["error"],
  setup(__props, { emit: __emit }) {
    const emit = __emit;
    const ns = useNamespace("avatar");
    const hasLoadError = ref(false);
    const avatarClass = computed(() => {
      const classList = [ns.b()];
      if (isString(__props.size)) classList.push(ns.m(__props.size));
      if (__props.icon) classList.push(ns.m("icon"));
      if (__props.shape) classList.push(ns.m(__props.shape));
      return classList;
    });
    const avatarStyle = computed(() => {
      return {
        [ns.cssVarName("avatar-size")]: addUnit(__props.size),
        [ns.cssVarName("avatar-bg-color")]: __props.bgColor,
        [ns.cssVarName("avatar-text-color")]: __props.textColor,
        [ns.cssVarName("avatar-text-size")]: addUnit(__props.textSize),
        [ns.cssVarName("avatar-icon-size")]: addUnit(__props.iconSize)
      };
    });
    const imgStyle = computed(() => ({ objectFit: __props.fit }));
    watch(
      () => __props.src,
      () => hasLoadError.value = false
    );
    const handleError = (e) => {
      hasLoadError.value = true;
      emit("error", e);
    };
    const captureText = (text) => {
      const isChinese = /^[\u4e00-\u9fa5]+$/.test(text);
      if (isChinese) return text.charAt(0);
      const words = text.split(/\s+/).filter((word) => word.length > 0);
      if (words.length >= 2) {
        return words.slice(0, 2).map((word) => word.charAt(0).toUpperCase()).join("");
      }
      if (words.length === 1) return text.slice(0, 2).toUpperCase();
      return "";
    };
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock(
        "span",
        {
          class: normalizeClass(avatarClass.value),
          style: normalizeStyle(avatarStyle.value)
        },
        [
          (__props.src || __props.srcSet) && !hasLoadError.value ? (openBlock(), createElementBlock("img", {
            key: 0,
            src: __props.src,
            alt: __props.alt,
            srcSet: __props.srcSet,
            style: normalizeStyle(imgStyle.value),
            onError: handleError
          }, null, 44, _hoisted_1)) : __props.icon ? (openBlock(), createBlock(unref(_sfc_main$1), {
            key: 1,
            icon: __props.icon
          }, null, 8, ["icon"])) : __props.text ? (openBlock(), createElementBlock(
            "span",
            _hoisted_2,
            toDisplayString(captureText(__props.text)),
            1
            /* TEXT */
          )) : renderSlot(_ctx.$slots, "default", { key: 3 })
        ],
        6
        /* CLASS, STYLE */
      );
    };
  }
});

export { _sfc_main as default };
