import { defineComponent, mergeDefaults, ref, computed, onMounted, onUnmounted, watch, createBlock, openBlock, Transition, unref, withCtx, withDirectives, createElementVNode, normalizeStyle, normalizeClass, createCommentVNode, renderSlot, createElementBlock, toDisplayString, withModifiers, vShow, nextTick } from 'vue';
import { VPBadge } from 'vitepress/theme';
import { useEventListener } from '../../../../composables/useEventListener.mjs';
import 'vitepress';
import { useNamespace } from '../../../../composables/useNamespace.mjs';
import 'vitepress-theme-teek/theme-chalk/tk-copy-banner.css';
import { useZIndex } from '../../../../composables/useZIndex.mjs';
import closeIcon from '../../../../static/icons/close.mjs';
import circleCloseFilledIcon from '../../../../static/icons/circleCloseFilled.mjs';
import infoFilledIcon from '../../../../static/icons/infoFilled.mjs';
import successFilledIcon from '../../../../static/icons/successFilled.mjs';
import warningFilledIcon from '../../../../static/icons/warningFilled.mjs';
import _sfc_main$1 from '../../Icon/src/index.vue2.mjs';
import '@iconify/vue';
import { messagePropsDefaults } from './message.mjs';
import { getLastOffset, getOffsetOrSpace } from './instance.mjs';

const _hoisted_1 = ["id"];
const _hoisted_2 = ["innerHTML"];
var _sfc_main = /* @__PURE__ */ defineComponent({
  ...{ name: "Message" },
  __name: "index",
  props: /* @__PURE__ */ mergeDefaults({
    customClass: {},
    center: { type: Boolean },
    dangerouslyUseHTMLString: { type: Boolean },
    duration: {},
    icon: {},
    id: {},
    message: { type: [String, Object, Function] },
    onClose: { type: Function },
    showClose: { type: Boolean },
    type: {},
    plain: { type: Boolean },
    offset: {},
    zIndex: {},
    grouping: { type: Boolean },
    repeatNum: {}
  }, messagePropsDefaults),
  emits: ["destroy"],
  setup(__props, { expose: __expose, emit: __emit }) {
    const props = __props;
    const emit = __emit;
    const iconsMap = {
      success: successFilledIcon,
      warning: warningFilledIcon,
      error: circleCloseFilledIcon,
      info: infoFilledIcon
    };
    const isStartTransition = ref(false);
    const ns = useNamespace("message");
    const { currentZIndex, nextZIndex } = useZIndex();
    const messageRef = ref();
    const visible = ref(false);
    const height = ref(0);
    const badeTypeMap = {
      info: "info",
      primary: "primary",
      success: "success",
      warning: "warning",
      error: "danger"
    };
    const badgeType = computed(() => props.type ? badeTypeMap[props.type] : "info");
    const typeClass = computed(() => {
      const type = props.type;
      return { [ns.bm("icon", type)]: type && iconsMap[type] };
    });
    const iconComponent = computed(() => props.icon || iconsMap[props.type] || "");
    const lastOffset = computed(() => getLastOffset(props.id));
    const offset = computed(() => getOffsetOrSpace(props.id, props.offset) + lastOffset.value);
    const bottom = computed(() => height.value + offset.value);
    const customStyle = computed(() => ({
      top: `${offset.value}px`,
      zIndex: currentZIndex.value
    }));
    let timer;
    const clearTimer = () => {
      if (timer) {
        clearTimeout(timer);
        timer = null;
      }
    };
    const startTimer = () => {
      if (props.duration === 0) return;
      clearTimer();
      timer = setTimeout(() => {
        close();
      }, props.duration);
    };
    const close = () => {
      visible.value = false;
      nextTick(() => {
        if (!isStartTransition.value) {
          props.onClose?.();
          emit("destroy");
        }
      });
    };
    const keydown = ({ code }) => {
      if (code === "Space") {
        close();
      }
    };
    let resizeObserver;
    onMounted(() => {
      startTimer();
      nextZIndex();
      visible.value = true;
      resizeObserver = new ResizeObserver(() => {
        if (messageRef.value) height.value = messageRef.value.getBoundingClientRect().height;
      });
      if (messageRef.value) resizeObserver.observe(messageRef.value);
    });
    onUnmounted(() => {
      if (resizeObserver && messageRef.value) resizeObserver.unobserve(messageRef.value);
    });
    watch(
      () => props.repeatNum,
      () => {
        clearTimer();
        startTimer();
      }
    );
    useEventListener(document, "keydown", keydown);
    __expose({
      visible,
      bottom,
      close
    });
    return (_ctx, _cache) => {
      return openBlock(), createBlock(Transition, {
        name: unref(ns).b("fade"),
        onBeforeEnter: _cache[0] || (_cache[0] = ($event) => isStartTransition.value = true),
        onBeforeLeave: __props.onClose,
        onAfterLeave: _cache[1] || (_cache[1] = ($event) => _ctx.$emit("destroy")),
        persisted: ""
      }, {
        default: withCtx(() => [
          withDirectives(createElementVNode("div", {
            id: __props.id,
            ref_key: "messageRef",
            ref: messageRef,
            class: normalizeClass([
              unref(ns).b(),
              { [unref(ns).m(__props.type)]: __props.type },
              unref(ns).is("center", __props.center),
              unref(ns).is("closable", __props.showClose),
              unref(ns).is("plain", __props.plain),
              __props.customClass
            ]),
            style: normalizeStyle(customStyle.value),
            role: "alert",
            onMouseenter: clearTimer,
            onMouseleave: startTimer
          }, [
            __props.repeatNum > 1 ? (openBlock(), createBlock(unref(VPBadge), {
              key: 0,
              text: __props.repeatNum,
              type: badgeType.value,
              class: normalizeClass(unref(ns).e("badge"))
            }, null, 8, ["text", "type", "class"])) : createCommentVNode("v-if", true),
            iconComponent.value ? (openBlock(), createBlock(unref(_sfc_main$1), {
              key: 1,
              icon: iconComponent.value,
              class: normalizeClass([unref(ns).e("icon"), typeClass.value])
            }, null, 8, ["icon", "class"])) : createCommentVNode("v-if", true),
            renderSlot(_ctx.$slots, "default", {}, () => [
              !__props.dangerouslyUseHTMLString ? (openBlock(), createElementBlock(
                "p",
                {
                  key: 0,
                  class: normalizeClass(unref(ns).e("content"))
                },
                toDisplayString(__props.message),
                3
                /* TEXT, CLASS */
              )) : (openBlock(), createElementBlock("p", {
                key: 1,
                class: normalizeClass(unref(ns).e("content")),
                innerHTML: __props.message
              }, null, 10, _hoisted_2))
            ]),
            __props.showClose ? (openBlock(), createBlock(unref(_sfc_main$1), {
              key: 2,
              icon: unref(closeIcon),
              class: normalizeClass(unref(ns).e("closeBtn")),
              onClick: withModifiers(close, ["stop"])
            }, null, 8, ["icon", "class"])) : createCommentVNode("v-if", true)
          ], 46, _hoisted_1), [
            [vShow, visible.value]
          ])
        ]),
        _: 3
        /* FORWARDED */
      }, 8, ["name", "onBeforeLeave"]);
    };
  }
});

export { _sfc_main as default };
