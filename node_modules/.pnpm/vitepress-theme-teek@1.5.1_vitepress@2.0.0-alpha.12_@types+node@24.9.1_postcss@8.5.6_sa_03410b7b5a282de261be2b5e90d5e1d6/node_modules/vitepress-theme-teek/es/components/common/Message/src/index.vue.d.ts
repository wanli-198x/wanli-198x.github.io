import { MessageProps, MessageType } from './message';
import { DefineComponent, Ref, ComputedRef, ComponentOptionsMixin, PublicProps, Component, VNode, ComponentProvideOptions } from 'vue';
import { IconifyIcon } from '@iconify/vue';
declare function __VLS_template(): {
    attrs: Partial<{}>;
    slots: {
        default?(_: {}): any;
    };
    refs: {
        messageRef: HTMLDivElement;
    };
    rootEl: any;
};
type __VLS_TemplateResult = ReturnType<typeof __VLS_template>;
declare const __VLS_component: DefineComponent<MessageProps, {
    visible: Ref<boolean, boolean>;
    bottom: ComputedRef<number>;
    close: () => void;
}, {}, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
    destroy: () => any;
}, string, PublicProps, Readonly<MessageProps> & Readonly<{
    onDestroy?: (() => any) | undefined;
}>, {
    center: boolean;
    id: string;
    type: MessageType;
    offset: number;
    icon: string | Object | Component | IconifyIcon;
    onClose: () => void;
    zIndex: number;
    customClass: string;
    dangerouslyUseHTMLString: boolean;
    duration: number;
    message: string | VNode | (() => VNode);
    showClose: boolean;
    plain: boolean;
    grouping: boolean;
    repeatNum: number;
}, {}, {}, {}, string, ComponentProvideOptions, false, {
    messageRef: HTMLDivElement;
}, any>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, __VLS_TemplateResult["slots"]>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
