import { ref, computed, toValue, nextTick } from 'vue';
import { useWindowSize } from './useWindowSize.mjs';
import { useScrollbarSize } from './useScrollbarSize.mjs';
import { isClient, isString } from '../helper/dist/index.mjs';
import { useEventListener } from './useEventListener.mjs';

const AUTO = "auto";
const defaultSpace = 10;
const usePopoverSize = (trigger, popover, options = {}) => {
  const { placement = "bottom", offset = 0, xOffset = 0, yOffset = 0 } = options;
  const top = ref(AUTO);
  const right = ref(AUTO);
  const bottom = ref(AUTO);
  const left = ref(AUTO);
  const { width: windowWidth, height: windowHeight } = useWindowSize();
  const { width: scrollbarWidth, height: scrollbarHeight } = useScrollbarSize();
  const triggerEl = computed(() => {
    const plain = toValue(trigger);
    return plain?.$el ?? plain;
  });
  const popoverEl = computed(() => {
    const plain = toValue(popover);
    return plain?.$el ?? plain;
  });
  const calculatePosition = async () => {
    if (!isClient || !triggerEl.value || !popoverEl.value) return;
    await nextTick();
    const {
      top: triggerTop,
      right: triggerLeftWidth,
      // 等于 left + width
      bottom: triggerTopHeigh,
      // 等于 top + height
      left: triggerLeft,
      width: triggerWidth,
      height: triggerHeight
    } = triggerEl.value.getBoundingClientRect();
    const triggerRight = windowWidth.value - triggerLeftWidth;
    const triggerBottom = windowHeight.value - triggerTopHeigh;
    const popoverWidth = popoverEl.value.offsetWidth;
    const popoverHeight = popoverEl.value.offsetHeight;
    const x = window.scrollX + (offset || xOffset);
    const y = window.scrollY + (offset || yOffset);
    let popoverTop = AUTO;
    let popoverRight = AUTO;
    let popoverBottom = AUTO;
    let popoverLeft = AUTO;
    const placementIsY = ["top", "bottom"].some((item) => placement.startsWith(item));
    const placementIsX = ["left", "right"].some((item) => placement.startsWith(item));
    const expectTop = () => triggerTop + triggerHeight + y;
    const expectRight = () => triggerRight + triggerWidth - x - scrollbarWidth.value;
    const expectBottom = () => triggerBottom + triggerHeight - y - scrollbarHeight.value;
    const expectLeft = () => triggerLeft + triggerWidth + x;
    if (placementIsY) {
      if (placement.endsWith("start")) popoverLeft = expectLeft() - triggerWidth;
      else if (placement.endsWith("end")) popoverRight = expectRight() - triggerWidth;
      else popoverLeft = triggerLeft + triggerWidth / 2 - popoverWidth / 2 + x;
    } else if (placementIsX) {
      if (placement.endsWith("start")) popoverTop = expectTop() - triggerHeight;
      else if (placement.endsWith("end")) popoverBottom = expectBottom() - triggerHeight;
      else popoverTop = triggerTop + triggerHeight / 2 - popoverHeight / 2 + y;
    }
    if (placement.startsWith("top")) popoverBottom = expectBottom() + defaultSpace;
    else if (placement.startsWith("right")) popoverLeft = expectLeft() + defaultSpace;
    else if (placement.startsWith("bottom")) popoverTop = expectTop() + defaultSpace;
    else if (placement.startsWith("left")) popoverRight = expectRight() + defaultSpace;
    const isOverTop = () => !isString(popoverBottom) && popoverBottom + popoverHeight > windowHeight.value - y;
    const isOverRight = () => !isString(popoverLeft) && popoverLeft + popoverWidth > windowWidth.value + x;
    const isOverBottom = () => !isString(popoverTop) && popoverTop + popoverHeight > windowHeight.value + y;
    const isOverLeft = () => !isString(popoverRight) && popoverRight + popoverWidth > windowWidth.value - x;
    if (isOverTop()) {
      popoverTop = (placementIsX ? expectTop() - triggerHeight : expectTop()) + defaultSpace;
      if (isOverBottom()) popoverTop = AUTO;
      else popoverBottom = AUTO;
    }
    if (isOverBottom()) {
      popoverBottom = (placementIsX ? expectBottom() - triggerHeight : expectBottom()) + defaultSpace;
      if (isOverTop()) popoverBottom = AUTO;
      else popoverTop = AUTO;
    }
    if (isOverRight()) {
      popoverRight = (placementIsY ? expectRight() - triggerWidth : expectRight()) + defaultSpace;
      if (isOverLeft()) popoverRight = AUTO;
      else popoverLeft = AUTO;
    }
    if (isOverLeft()) {
      popoverLeft = (placementIsY ? expectLeft() - triggerWidth : expectLeft()) + defaultSpace;
      if (isOverRight()) popoverLeft = AUTO;
      else popoverRight = AUTO;
    }
    top.value = popoverTop;
    right.value = popoverRight;
    bottom.value = popoverBottom;
    left.value = popoverLeft;
  };
  calculatePosition();
  const update = () => {
    calculatePosition();
  };
  useEventListener(() => window, "scroll", update);
  useEventListener(() => window, "resize", update);
  return { top, right, bottom, left, update };
};

export { usePopoverSize };
