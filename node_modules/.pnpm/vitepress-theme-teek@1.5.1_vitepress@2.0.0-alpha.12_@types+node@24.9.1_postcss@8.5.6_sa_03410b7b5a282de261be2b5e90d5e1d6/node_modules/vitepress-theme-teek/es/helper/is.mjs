const isExternal = (path) => /^(http?:|https?:|mailto:|tel:)/.test(path);
const isValidURL = (url) => {
  try {
    new URL(url);
    return true;
  } catch {
    return false;
  }
};
const isType = (val) => {
  if (val === null) return "null";
  if (typeof val !== "object") return typeof val;
  else return Object.prototype.toString.call(val).slice(8, -1).toLocaleLowerCase();
};
const is = (val, type) => {
  return Object.prototype.toString.call(val) === `[object ${type}]`;
};
const isPlainFunction = (val) => {
  return is(val, "Function");
};
const isFunction = (val) => {
  return is(val, "Function") || isAsyncFunction(val);
};
const isDef = (val) => {
  return val !== void 0;
};
const isUnDef = (val) => {
  return val === void 0;
};
const isObject = (val) => {
  return val !== null && is(val, "Object");
};
const isDate = (val) => {
  return is(val, "Date");
};
const isNumber = (val) => {
  return is(val, "Number") && !Number.isNaN(val);
};
const isStringNumber = (val) => {
  if (!isString(val)) return false;
  return !Number.isNaN(Number(val));
};
const isAsyncFunction = (val) => {
  return is(val, "AsyncFunction");
};
const isPromise = (val) => {
  return is(val, "Promise") && isObject(val) && isFunction(val.then) && isFunction(val.catch);
};
const isString = (val) => {
  return is(val, "String");
};
const isBoolean = (val) => {
  return is(val, "Boolean");
};
const isArray = (val) => {
  if (typeof Array.isArray === "undefined") {
    return Object.prototype.toString.call(val) === "[object Array]";
  }
  return Array.isArray(val);
};
const isElement = (val) => {
  if (typeof Element === "undefined") return false;
  return val instanceof Element;
};
const isNull = (val) => {
  return val === null;
};
const isNullAndUnDef = (val) => {
  return val === null && val === void 0;
};
const isNullOrUnDef = (val) => {
  return val === null || val === void 0;
};
const isPhone = (val) => {
  return /^(13[0-9]|14[01456879]|15[0-35-9]|16[2567]|17[0-8]|18[0-9]|19[0-35-9])\d{8}$/.test(val);
};
const isImagePath = (path) => {
  return /(https?:\/\/|data:image\/).*?\.(png|jpg|jpeg|gif|svg|webp|ico)/gi.test(path);
};
const isImageDom = (o) => {
  return o && ["IMAGE", "IMG"].includes(o.tagName);
};
const isIos = () => {
  return isClient && window?.navigator?.userAgent && (/iP(?:ad|hone|od)/.test(window.navigator.userAgent) || window?.navigator?.maxTouchPoints > 2 && /iPad|Macintosh/.test(window?.navigator.userAgent));
};
const isEmpty = (val, checkComplexType = true) => {
  if (isNumber(val) && isNaN(val)) return true;
  if (val === "" || val === null || val === void 0) return true;
  if (!checkComplexType) return false;
  if (isArray(val) && !val.length) return true;
  if (isObject(val) && !Object.keys(val).length) return true;
  return false;
};
const isFocusable = (element) => {
  if (element.tabIndex > 0 || element.tabIndex === 0 && element.getAttribute("tabIndex") !== null) {
    return true;
  }
  if (element.tabIndex < 0 || element.hasAttribute("disabled") || element.getAttribute("aria-disabled") === "true") {
    return false;
  }
  switch (element.nodeName) {
    case "A": {
      return !!element.href && element.rel !== "ignore";
    }
    case "INPUT": {
      return !(element.type === "hidden" || element.type === "file");
    }
    case "BUTTON":
    case "SELECT":
    case "TEXTAREA": {
      return true;
    }
    default: {
      return false;
    }
  }
};
const isClient = typeof window !== "undefined" && typeof document !== "undefined";
const isServer = !isClient;
const inBrowser = isClient;

export { inBrowser, is, isArray, isAsyncFunction, isBoolean, isClient, isDate, isDef, isElement, isEmpty, isExternal, isFocusable, isFunction, isImageDom, isImagePath, isIos, isNull, isNullAndUnDef, isNullOrUnDef, isNumber, isObject, isPhone, isPlainFunction, isPromise, isServer, isString, isStringNumber, isType, isUnDef, isValidURL };
