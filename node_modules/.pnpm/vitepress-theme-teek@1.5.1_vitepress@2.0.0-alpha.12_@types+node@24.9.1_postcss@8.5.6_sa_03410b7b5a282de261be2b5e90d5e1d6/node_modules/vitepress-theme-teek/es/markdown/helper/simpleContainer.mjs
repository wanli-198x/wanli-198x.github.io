import container from 'markdown-it-container';

const createContainerThenUse = (md, option) => {
  md.use(...createContainerThenGet(md, option));
};
const createContainerThenGet = (md, option) => {
  const { type, useTitle, defaultTitle, className } = option;
  return [
    container,
    type,
    {
      render(tokens, idx) {
        const token = tokens[idx];
        const info = token.info.trim().slice(type.length).trim();
        if (token.nesting === 1) {
          const title = useTitle ? md.renderInline(info || defaultTitle || "") : "";
          return `<div class="${type} ${className}">${useTitle ? `<p class="title ${type}-title ${className ? `${className}-title` : ""}">${title}</p>` : ""}
`;
        } else return `</div>
`;
      }
    }
  ];
};
const createContainersThenUse = (md, options) => {
  options.forEach((option) => {
    md.use(...createContainerThenGet(md, option));
  });
};
const createContainersThenGet = (md, options) => {
  const containers = [];
  options.forEach((option) => {
    containers.push(createContainerThenGet(md, option));
  });
  return containers;
};

export { createContainerThenGet, createContainerThenUse, createContainersThenGet, createContainersThenUse };
