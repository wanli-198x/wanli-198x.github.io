'use strict';

var index = require('../helper/dist/index.js');
var useScopeDispose = require('./useScopeDispose.js');
var useMounted = require('./useMounted.js');
var Vue = require('vue');

const useWindowTransition = (element, immediate = true) => {
  let startInMounted = false;
  const cleanup = [];
  const start = () => {
    const elementConst = Vue.unref(element);
    if (!elementConst) return;
    if (index.isArray(elementConst)) elementConst.forEach((el) => initTransition(el));
    else initTransition(elementConst);
  };
  const initTransition = (el) => {
    el.classList.add("scroll__animate");
    const { create, clean } = useIntersectionObserver(
      el,
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            requestAnimationFrame(() => {
              try {
                el.classList.add("visible");
                clean();
              } catch (error) {
                console.error("\u521D\u59CB\u5316\u52A8\u753B\u5931\u8D25:", error);
              }
            });
          }
        });
      },
      0.1
    );
    create();
    cleanup.push(clean);
  };
  const stop = () => {
    cleanup.forEach((fn) => fn());
  };
  const restart = () => {
    stop();
    start();
  };
  Vue.watch(
    () => Vue.unref(element),
    () => {
      !startInMounted && restart();
    },
    { deep: true }
  );
  useMounted.useMounted(async () => {
    startInMounted = true;
    immediate && restart();
    await Vue.nextTick();
    startInMounted = false;
  });
  useScopeDispose.useScopeDispose(stop);
  return { start, stop, restart };
};
const useIntersectionObserver = (observerDom, callback, threshold) => {
  let intersectionObserver = null;
  const createIntersectionObserver = () => {
    const observerDomValue = Vue.unref(observerDom);
    if (intersectionObserver || !observerDomValue) return;
    intersectionObserver = new IntersectionObserver(callback, { threshold });
    intersectionObserver.observe(observerDomValue);
  };
  const cleanIntersectionObserver = () => {
    if (intersectionObserver) {
      intersectionObserver.disconnect();
      intersectionObserver = null;
    }
  };
  useScopeDispose.useScopeDispose(cleanIntersectionObserver);
  return { create: createIntersectionObserver, clean: cleanIntersectionObserver };
};

exports.useIntersectionObserver = useIntersectionObserver;
exports.useWindowTransition = useWindowTransition;
