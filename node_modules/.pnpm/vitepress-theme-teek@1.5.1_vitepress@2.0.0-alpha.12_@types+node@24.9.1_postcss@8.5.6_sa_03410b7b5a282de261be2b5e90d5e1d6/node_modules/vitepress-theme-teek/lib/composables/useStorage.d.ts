import { MaybeRefOrGetter, Ref } from 'vue';
export type StorageType = "localStorage" | "sessionStorage";
export interface StorageEventLike {
    storageArea: Storage | null;
    key: StorageEvent["key"];
    oldValue: StorageEvent["oldValue"];
    newValue: StorageEvent["newValue"];
}
export interface UseStorageOptions<T> {
    /**
     * vue watch 的 flush 选项
     *
     * @default 'pre'
     */
    flush?: "pre" | "post" | "sync";
    /**
     * vue watch 的 deep 选项
     *
     * @default false
     */
    deep?: boolean;
    /**
     * 如果 storage 中没有值，则存储默认值
     *
     * @default true
     */
    writeDefaults?: boolean;
    /**
     * storage 的值是否与默认值合并
     *
     *  @default false
     */
    mergeDefaults?: boolean | ((storageValue: T, defaults: T) => T);
    /**
     * 存储值的序列化函数
     *
     * @default JSON.stringify
     */
    serializer?: Serializer<T>;
    /**
     * 是否在 onMounted 阶段读取 storage 的值
     *
     * @default true
     */
    initOnMounted?: boolean;
}
export interface Serializer<T> {
    read: (raw: string) => T;
    write: (value: T) => string;
}
export declare const StorageSerializers: Record<"boolean" | "object" | "number" | "any" | "string" | "map" | "set" | "date", Serializer<any>>;
export declare const guessSerializerType: <T extends string | number | boolean | object | null>(rawInit: T) => "string" | "boolean" | "object" | "number" | "any" | "map" | "set" | "date";
/**
 * 可以设置 null 或 undefined 的 ref 类型
 */
export type RemovableRef<T> = Omit<Ref<T>, "value"> & {
    get value(): T;
    set value(value: T | null | undefined);
};
/**
 * 使用 storage 获取 data，且支持响应式
 * 1、外界修改 data 后自动更新 storage
 * 2、任意区修改 data 后，其他区的 data 自动变化（相同的 key）
 *
 * 初始化流程（update 函数）：
 * 1、执行 update 函数，判断 data 是否与 storage 里数据一致，不一致则执行 read 函数
 * 2、read 函数从 storage 根据 key 读取数据给 data，如果数据不存在，则将 defaults 给 data（对象支持浅拷贝合并）
 * 3、onMounted 阶段绑定 storage 事件，该事件绑定 update 函数当外界修改 data 后，触发 storage 事件，将所有区的 data 重新更新
 *
 * 外界修改 data 流程
 * 2、修改 data 后，触发 watch 执行 write 函数
 * 3、write 函数先将 data 存入 storage，后触发 dispatchWriteEvent 函数
 * 4、dispatchWriteEvent 手动触发 storage 事件，storage 事件里执行 update 函数，将所有区的 data 重新更新
 */
export declare const useStorage: <T extends string | number | boolean | object | null>(key: MaybeRefOrGetter<string>, defaults: MaybeRefOrGetter<T>, storageType?: StorageType, options?: UseStorageOptions<T>) => RemovableRef<T>;
export type UseStorageReturn = ReturnType<typeof useStorage>;
