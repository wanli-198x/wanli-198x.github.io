'use strict';

var Vue = require('vue');
var index = require('../helper/dist/index.js');
var useDebounce = require('./useDebounce.js');
var useEventListener = require('./useEventListener.js');
var useMounted = require('./useMounted.js');

const useWindowSize = (sizeChangedCallback, options = {}) => {
  const {
    initialWidth = Number.POSITIVE_INFINITY,
    initialHeight = Number.POSITIVE_INFINITY,
    includeScrollbar = true,
    type = "inner"
  } = options;
  const width = Vue.shallowRef(initialWidth);
  const height = Vue.shallowRef(initialHeight);
  let stop = () => {
  };
  const update = useDebounce.useDebounce(() => {
    if (!index.isClient) return;
    if (type === "outer") {
      width.value = window.outerWidth;
      height.value = window.outerHeight;
    } else if (type === "visual" && window.visualViewport) {
      const { width: visualViewportWidth, height: visualViewportHeight, scale } = window.visualViewport;
      width.value = Math.round(visualViewportWidth * scale);
      height.value = Math.round(visualViewportHeight * scale);
    } else if (includeScrollbar) {
      width.value = window.innerWidth;
      height.value = window.innerHeight;
    } else {
      width.value = window.document.documentElement.clientWidth;
      height.value = window.document.documentElement.clientHeight;
    }
    sizeChangedCallback?.(width.value, height.value);
  }, 100);
  update();
  useMounted.useMounted(update);
  stop = useEventListener.useEventListener(() => window, "resize", update, { passive: true });
  if (index.isClient && type === "visual" && window.visualViewport) {
    stop = useEventListener.useEventListener(window.visualViewport, "resize", update, { passive: true });
  }
  return { width, height, update, stop };
};

exports.useWindowSize = useWindowSize;
