/**
 * 是否为合法的 URL 前缀
 */
declare const isExternal: (path: string) => boolean;
/**
 * 是否是有效的 URL
 */
declare const isValidURL: (url: string) => boolean;
/**
 * 判断数据类型
 */
declare const isType: (val: any) => any;
/**
 * 判断值是否未某个类型
 */
declare const is: (val: unknown, type: string) => boolean;
/**
 * 是否为纯粹的函数
 */
declare const isPlainFunction: <T = Function>(val: unknown) => val is T;
/**
 * 是否为函数
 */
declare const isFunction: <T = Function>(val: unknown) => val is T;
/**
 * 是否已定义
 */
declare const isDef: <T = unknown>(val?: T) => val is T;
/**
 * 是否为未定义
 */
declare const isUnDef: <T = unknown>(val?: T) => val is T;
/**
 * 是否为对象
 */
declare const isObject: (val: any) => val is Record<any, any>;
/**
 * 是否为时间
 */
declare const isDate: (val: unknown) => val is Date;
/**
 * 是否为数字
 */
declare const isNumber: (val: unknown) => val is number;
/**
 * 是否为字符串数字
 */
declare const isStringNumber: (val: string) => boolean;
/**
 *  是否为 AsyncFunction
 */
declare const isAsyncFunction: (val: unknown) => val is () => Promise<any>;
/**
 *  是否为 promise
 */
declare const isPromise: <T = any>(val: unknown) => val is Promise<T>;
/**
 *  是否为字符串
 */
declare const isString: (val: unknown) => val is string;
/**
 *  是否为boolean类型
 */
declare const isBoolean: (val: unknown) => val is boolean;
/**
 * 是否为数组
 */
declare const isArray: (val: unknown) => val is any[];
/**
 * 是否为元素节点
 */
declare const isElement: (val: unknown) => val is Element;
/**
 * 是否为 null
 */
declare const isNull: (val: unknown) => val is null;
/**
 * 是否为 null 且未定义
 */
declare const isNullAndUnDef: (val: unknown) => val is null | undefined;
/**
 * 是否为 null 或未定义
 */
declare const isNullOrUnDef: (val: unknown) => val is null | undefined;
/**
 * 是否为手机号
 */
declare const isPhone: (val: string) => boolean;
/**
 * 是否是图片链接
 */
declare const isImagePath: (path: string) => boolean;
/**
 * 是否为图片节点
 */
declare const isImageDom: (o: Element) => boolean;
/**
 * 是否为 iOS 系统
 */
declare const isIos: () => boolean;
/**
 * 是否为空值项（包含数组、对象判断）
 *
 * @param checkComplexType 是否检查数组、对象是否为空
 */
declare const isEmpty: (val: unknown, checkComplexType?: boolean) => boolean;
/**
 * 确定目标元素是否可聚焦
 *
 * @param element HTML 元素
 */
declare const isFocusable: (element: HTMLElement) => boolean;
/**
 * 是否客户端
 */
declare const isClient: boolean;
/**
 * 是否为服务器
 */
declare const isServer: boolean;
/**
 * 是否在浏览器中
 */
declare const inBrowser: boolean;

/**
 * 获取当前时间，返回格式为 yyyy-MM-dd HH:mm:ss
 */
declare const getNowDate: (format?: string, utc?: boolean) => string;
/**
 * 时间转换函数（支持时区调整）
 * @param date 日期对象或日期字符串
 * @param format 日期格式，如 'yyyy-MM-dd hh:mm:ss'、'yyyy-MM-dd'
 * @param utc 是否使用 UTC 时间，默认为 false
 */
declare const formatDate: (date: Date | string | number, format?: string, utc?: boolean) => string;
/**
 * 计算相差时间差，返回多少年（月/天/小时/分钟/秒）前
 */
declare const formatDiffDate: (startDate: Date | string | number, endDate?: Date | string | number) => string;
/**
 * 获取两个日期相差多少天
 */
declare const formatDiffDateToDay: (startDate: Date | string | number, endDate?: Date | string | number) => number;

/**
 * 为路径 path 添加站点根路径 base 前缀，等价于 vitepress 的 withBase。Markdown 插件需要用到
 */
declare const withBase: (base: string, path: string | undefined) => string;
/**
 * 将字符串的第一个字符大写
 */
declare const upperFirst: (str: string) => string;
/**
 * 添加单位，如 value 为 16，则返回 16px
 */
declare const addUnit: (value?: string | number, defaultUnit?: string) => string;
/**
 * 移除单位，如 value 为 16px，则返回 16
 */
declare const removeUnit: (value?: string | number, defaultUnit?: string) => number;
/**
 * 获取对象值
 */
declare const get: (object: Record<string, any>, path: string, defaultValue?: any) => any;
/**
 * 删除 Storage 的数据
 *
 * @param key 键名
 * @param storage 存储类型，如 localStorage, sessionStorage
 * @param vague 是否模糊匹配
 */
declare const removeStorageItem: (key: string, storage: Storage, vague?: boolean) => void;

/**
 * 将对象的某个属性变为可选，如：

interface User {
  name: string;
  age: string;
  gender: string;
}

// gender 变为可选
let user: PartialKey<User, "gender"> = {
  name: "",
  age: "",
};
// age 和 gender 变为可选
let user: PartialKey<User, "age" | gender"> = {
  name: "",
};

 */
type PartialKey<T, U extends keyof T> = Pick<T, Exclude<keyof T, U>> & Partial<Pick<T, U>>;
/**
 * 指定属性变为必选
 */
type RequiredKey<T, U extends keyof T> = Pick<T, Exclude<keyof T, U>> & Required<Pick<T, U>>;
/**
 * 指定的属性为必选，其他属性都变为可选
 *
 * 如 RequiredKey<User, "name">
 * 则只有 name 是必填，age 和 gender 变为可选
 */
type RequiredKeyPartialOther<T, U extends keyof T> = Partial<Pick<T, Exclude<keyof T, U>>> & Required<Pick<T, U>>;
/**
 * 指定属性变为只读
 */
type ReadOnlyKey<T, U extends keyof T> = Pick<T, Exclude<keyof T, U>> & Readonly<Pick<T, U>>;
/**
 * 对象类型
 */
type Recordable<T extends string | number | symbol = string, K = any> = Record<T extends null | undefined ? string : T, K>;
/**
 * 可空类型
 */
type Nullable<T> = T | null;

/**
 * hex 颜色转 rgb 颜色
 *
 * @param str 颜色值字符串
 */
declare const hexToRgb: (str: any) => any;
/**
 * rgb 颜色转 Hex 颜色
 *
 * @param r 代表红色
 * @param g 代表绿色
 * @param b 代表蓝色
 */
declare const rgbToHex: (r: any, g: any, b: any) => string | void;
/**
 * 加深颜色值
 *
 * @param color 颜色值字符串
 * @param level 加深的程度，限 0-1 之间
 */
declare const getDarkColor: (color: string, level: number) => string | void;
/**
 * 变浅颜色值
 *
 * @param color 颜色值字符串
 * @param level 加深的程度，限 0-1 之间
 */
declare const getLightColor: (color: string, level: number) => string | void;

declare global {
    interface Window {
        _hmt: any[];
    }
}
interface BaiduAnalyticsOptions {
    /**
     * 百度统计 ID
     */
    id: string;
    /**
     * 是否仅在生产环境下上报
     */
    production?: boolean;
}
/** 注册百度统计 */
declare const baiduAnalytics: (options: BaiduAnalyticsOptions) => void;
/**
 * 上报页面视图
 *
 * @param baiduId - 百度统计 ID
 * @param pageUrl - 页面 URL
 */
declare const trackPageview: (options: BaiduAnalyticsOptions, pageUrl: string) => void;

declare const dataLayer: any[];
declare const gtag: (...args: any[]) => void;
declare global {
    interface Window {
        dataLayer?: typeof dataLayer;
        gtag?: typeof gtag;
    }
}
interface GoogleAnalyticsOptions {
    /**
     * 谷歌分析 ID
     */
    id: string;
    /**
     * 是否仅在生产环境下上报
     */
    production?: boolean;
}
declare const googleAnalytics: (options: GoogleAnalyticsOptions) => void;

declare global {
    interface Window {
        umami: Function;
    }
}
interface UmamiAnalytics {
    id: string;
    src: string;
}
type UmamiAnalyticsOptions = UmamiAnalytics | UmamiAnalytics[];
declare const umamiAnalytics: (options: UmamiAnalyticsOptions, production?: boolean) => void;

export { type BaiduAnalyticsOptions, type GoogleAnalyticsOptions, type Nullable, type PartialKey, type ReadOnlyKey, type Recordable, type RequiredKey, type RequiredKeyPartialOther, type UmamiAnalytics, type UmamiAnalyticsOptions, addUnit, baiduAnalytics, formatDate, formatDiffDate, formatDiffDateToDay, get, getDarkColor, getLightColor, getNowDate, googleAnalytics, hexToRgb, inBrowser, is, isArray, isAsyncFunction, isBoolean, isClient, isDate, isDef, isElement, isEmpty, isExternal, isFocusable, isFunction, isImageDom, isImagePath, isIos, isNull, isNullAndUnDef, isNullOrUnDef, isNumber, isObject, isPhone, isPlainFunction, isPromise, isServer, isString, isStringNumber, isType, isUnDef, isValidURL, removeStorageItem, removeUnit, rgbToHex, trackPageview, umamiAnalytics, upperFirst, withBase };
