import { PostData } from '../../../config/post/types';
import { WindowTransition, TeekConfig } from '../../../config';
import { Component, Ref, InjectionKey, DefineComponent, VNode, RendererNode, RendererElement, ComponentOptionsMixin, PublicProps, ComponentProvideOptions, ComputedRef } from 'vue';
export declare const postsContext: InjectionKey<PostData>;
export declare const teekConfigContext: InjectionKey<TeekConfig | Ref<TeekConfig>>;
/**
 * 创建 Layout 组件
 */
export declare const TeekConfigProvider: (layout: Component) => DefineComponent<{}, () => VNode<RendererNode, RendererElement, {
    [key: string]: any;
}>, {}, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, string, ComponentProvideOptions, true, {}, any>;
/**
 * 获取 Teek 的主题配置数据
 * 支持（优先级） provide > frontmatter.tk.[key] > frontmatter.[key] > theme.[key] 4 种方式进行主题配置
 */
export declare const useTeekConfig: () => {
    getTeekConfig: <T = any>(key?: keyof TeekConfig | null, defaultValue?: any) => T;
    getTeekConfigRef: <T = any>(key?: keyof TeekConfig | null, defaultValue?: any) => ComputedRef<T>;
};
/**
 * 返回功能页面状态
 */
export declare const usePageState: () => {
    isHomePage: ComputedRef<boolean>;
    isCategoriesPage: ComputedRef<boolean>;
    isTagsPage: ComputedRef<boolean>;
    isArchivesPage: ComputedRef<boolean>;
    isCataloguePage: ComputedRef<boolean>;
    isArticleOverviewPage: ComputedRef<boolean>;
    isLoginUrl: ComputedRef<boolean>;
    isRiskLinkPage: ComputedRef<boolean>;
};
/**
 * 获取自定义页的访问地址
 */
export declare const usePagePath: () => {
    categoryPath: ComputedRef<string>;
    tagPath: ComputedRef<string>;
    archivesPath: ComputedRef<string>;
    articleOverviewPath: ComputedRef<string>;
    loginPath: ComputedRef<string>;
    riskLinkPath: ComputedRef<string>;
};
/**
 * 返回全部文章数据
 */
export declare const useAllPosts: () => PostData;
/**
 * 返回文章数据，当处于国际化环境时，返回对应语言的 Posts 数据，否则返回全部 Posts 数据
 */
export declare const usePosts: () => Ref<PostData>;
/**
 * 获取默认背景色
 */
export declare const useTagColor: () => ComputedRef<{
    bg: string;
    text: string;
    border: string;
}[]>;
/**
 * 视图渐入过渡效果的响应式配置项获取
 */
export declare const useWindowTransitionConfig: (condition?: (windowTransition: WindowTransition) => boolean | undefined) => ComputedRef<boolean>;
/**
 * 获取常用响应式变量
 */
export declare const useCommon: () => {
    isMobile: ComputedRef<boolean>;
};
/**
 * 侧边栏相关属性
 */
export declare const useSidebar: () => {
    hasSidebar: Ref<boolean, boolean>;
};
