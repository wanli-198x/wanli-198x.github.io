'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Vue = require('vue');
var vitepress = require('vitepress');
var index$1 = require('../../../../helper/dist/index.js');
var useUvPv = require('../../../../composables/useUvPv.js');
var useNamespace = require('../../../../composables/useNamespace.js');
require('vitepress-theme-teek/theme-chalk/tk-copy-banner.css');
var useLocale = require('../../../../composables/useLocale.js');
var useVpRouter = require('../../../../composables/useVpRouter.js');
require('../../../../composables/useZIndex.js');
var docAnalysis = require('../../../../static/icons/docAnalysis.js');
var index = require('../../ConfigProvider/index.js');
var index_vue_vue_type_script_setup_true_name_PageCard_lang = require('../../../common/PageCard/src/index.vue2.js');

const _hoisted_1 = ["innerHTML"];
const _hoisted_2 = ["innerHTML"];
var _sfc_main = /* @__PURE__ */ Vue.defineComponent({
  ...{ name: "HomeDocAnalysisCard" },
  __name: "index",
  setup(__props) {
    const ns = useNamespace.useNamespace("doc-analysis");
    const { t } = useLocale.useLocale();
    const { getTeekConfigRef } = index.useTeekConfig();
    const { theme } = vitepress.useData();
    const vpRouter = useVpRouter.useVpRouter();
    const docAnalysisConfig = getTeekConfigRef("docAnalysis", {
      createTime: void 0,
      title: t("tk.docAnalysisCard.title", { icon: docAnalysis.default }),
      statistics: {},
      overrideInfo: [],
      appendInfo: []
    });
    const docAnalysisInfo = Vue.computed(() => theme.value.docAnalysisInfo || {});
    const finalTitle = Vue.computed(() => {
      const { title } = docAnalysisConfig.value;
      if (index$1.isFunction(title)) return title(docAnalysis.default);
      return title;
    });
    const createToNowDay = Vue.computed(() => index$1.formatDiffDateToDay(docAnalysisConfig.value.createTime || index$1.getNowDate()));
    const posts = index.usePosts();
    const postAddNum = Vue.computed(() => {
      const sortPostsByDate = posts.value.sortPostsByDate;
      let weekAddNum = 0;
      let monthAddNum = 0;
      const currentDate = new Date(index$1.getNowDate());
      for (const item of sortPostsByDate) {
        if (!item.date) continue;
        const postDate = new Date(item.date);
        if (postDate.getTime() > currentDate.getTime() - 7 * 24 * 60 * 60 * 1e3) weekAddNum++;
        if (postDate.getTime() > currentDate.getTime() - 30 * 24 * 60 * 60 * 1e3) monthAddNum++;
        else return { weekAddNum, monthAddNum };
      }
      return { weekAddNum, monthAddNum };
    });
    const formatWordCount = (wordCount) => {
      if (wordCount < 1e3) return wordCount + "";
      if (wordCount < 1e6) return Math.round(wordCount / 100) / 10 + "k";
      return Math.round(wordCount / 1e4) / 10 + "w";
    };
    const statisticsConfig = Vue.computed(() => ({
      url: "",
      provider: "",
      siteView: true,
      iteration: false,
      pageIteration: 2e3,
      permalink: true,
      ...docAnalysisConfig.value.statistics
    }));
    const useSiteView = Vue.computed(() => !!statisticsConfig.value.provider && statisticsConfig.value.siteView);
    const { router } = vpRouter;
    const { sitePv, siteUv, isGet, request } = useUvPv.useUvPv(false, statisticsConfig.value);
    Vue.watch(useSiteView, (newVal) => {
      if (newVal) request();
    });
    Vue.watch(
      router.route,
      () => {
        if (useSiteView.value) {
          if (statisticsConfig.value.permalink && router.state?.permalinkPlugin) {
            Vue.nextTick(request);
          } else request();
        }
      },
      { immediate: true }
    );
    const appendInfo = Vue.computed(() => {
      const { appendInfo: appendInfo2 } = docAnalysisConfig.value;
      return index$1.isFunction(appendInfo2) ? appendInfo2() : appendInfo2;
    });
    const docAnalysisList = Vue.computed(() => {
      const { createTime, overrideInfo } = docAnalysisConfig.value;
      const { fileList = [], totalFileWords, lastCommitTime } = docAnalysisInfo.value;
      const list = [
        {
          key: "totalPosts",
          label: t("tk.docAnalysisCard.totalPosts"),
          originValue: fileList.length,
          value: `${fileList.length} ${t("tk.docAnalysisCard.fileUnit")}`
        },
        {
          key: "weekAddNum",
          label: t("tk.docAnalysisCard.weekAddNum"),
          originValue: postAddNum.value?.weekAddNum,
          value: `${postAddNum.value?.weekAddNum} ${t("tk.docAnalysisCard.fileUnit")}`
        },
        {
          key: "monthAddNum",
          label: t("tk.docAnalysisCard.monthAddNum"),
          originValue: postAddNum.value?.monthAddNum,
          value: `${postAddNum.value?.monthAddNum} ${t("tk.docAnalysisCard.fileUnit")}`
        },
        {
          key: "runtime",
          label: t("tk.docAnalysisCard.runtime"),
          originValue: createTime,
          value: `${createToNowDay.value === 0 ? t("tk.docAnalysisCard.runtimeLess") : `${createToNowDay.value} ${t("tk.docAnalysisCard.runtimeUnit")}`}`
        },
        {
          key: "totalWordCount",
          label: t("tk.docAnalysisCard.totalWordCount"),
          originValue: totalFileWords,
          value: `${formatWordCount(totalFileWords)} ${t("tk.docAnalysisCard.wordCountUnit")}`
        },
        {
          key: "lastActiveTime",
          label: t("tk.docAnalysisCard.lastActiveTime"),
          originValue: lastCommitTime,
          value: index$1.formatDiffDate(lastCommitTime)
        },
        {
          key: "viewCount",
          label: t("tk.docAnalysisCard.viewCount"),
          originValue: sitePv.value,
          value: isGet.value ? `${sitePv.value} ${t("tk.docAnalysisCard.viewCountUnit")}` : "Get...",
          show: useSiteView.value
        },
        {
          key: "visitCount",
          label: t("tk.docAnalysisCard.visitCount"),
          originValue: siteUv.value,
          value: isGet.value ? `${siteUv.value} ${t("tk.docAnalysisCard.visitCountUnit")}` : "Get...",
          show: useSiteView.value
        },
        ...appendInfo.value
      ];
      if (overrideInfo.length) {
        list.forEach((item) => {
          const override = overrideInfo.find((overrideItem) => overrideItem.key === item.key);
          if (override) {
            item.label = override.label || item.label;
            item.value = override.value ? override.value(item.originValue || "", item.value) : item.value;
            item.show = override.show !== false;
          }
        });
      }
      return list;
    });
    return (_ctx, _cache) => {
      return Vue.openBlock(), Vue.createBlock(Vue.unref(index_vue_vue_type_script_setup_true_name_PageCard_lang.default), {
        title: finalTitle.value,
        class: Vue.normalizeClass(Vue.unref(ns).b()),
        "aria-label": Vue.unref(t)("tk.docAnalysisCard.label")
      }, {
        default: Vue.withCtx(() => [
          (Vue.openBlock(true), Vue.createElementBlock(
            Vue.Fragment,
            null,
            Vue.renderList(docAnalysisList.value, (item) => {
              return Vue.openBlock(), Vue.createElementBlock(
                Vue.Fragment,
                {
                  key: item.key
                },
                [
                  item.show !== false ? (Vue.openBlock(), Vue.createElementBlock(
                    "div",
                    {
                      key: 0,
                      class: Vue.normalizeClass(Vue.unref(ns).e("item"))
                    },
                    [
                      Vue.createElementVNode("span", {
                        innerHTML: item.label
                      }, null, 8, _hoisted_1),
                      Vue.createElementVNode("span", {
                        innerHTML: item.value
                      }, null, 8, _hoisted_2)
                    ],
                    2
                    /* CLASS */
                  )) : Vue.createCommentVNode("v-if", true)
                ],
                64
                /* STABLE_FRAGMENT */
              );
            }),
            128
            /* KEYED_FRAGMENT */
          ))
        ]),
        _: 1
        /* STABLE */
      }, 8, ["title", "class", "aria-label"]);
    };
  }
});

exports.default = _sfc_main;
