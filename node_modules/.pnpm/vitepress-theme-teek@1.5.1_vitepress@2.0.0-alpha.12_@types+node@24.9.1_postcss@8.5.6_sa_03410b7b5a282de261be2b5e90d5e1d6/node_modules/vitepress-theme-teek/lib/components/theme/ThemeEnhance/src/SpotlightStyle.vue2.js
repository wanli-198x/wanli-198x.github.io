'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Vue = require('vue');
require('vitepress');
require('vitepress-theme-teek/theme-chalk/tk-copy-banner.css');
var useLocale = require('../../../../composables/useLocale.js');
var useMediaQuery = require('../../../../composables/useMediaQuery.js');
var useStorage = require('../../../../composables/useStorage.js');
require('../../../../composables/useZIndex.js');
var click = require('../../../../static/icons/theme-enhance/click.js');
var alignLeft = require('../../../../static/icons/theme-enhance/alignLeft.js');
var alignTextLeft = require('../../../../static/icons/theme-enhance/alignTextLeft.js');
var index = require('../../ConfigProvider/index.js');
var Segmented_vue_vue_type_script_setup_true_name_Segmented_lang = require('../../../common/Segmented/src/Segmented.vue2.js');
var themeEnhance = require('./themeEnhance.js');
var namespace = require('./namespace.js');
var BaseTemplate_vue_vue_type_script_setup_true_name_BaseTemplate_lang = require('./components/BaseTemplate.vue2.js');

var _sfc_main = /* @__PURE__ */ Vue.defineComponent({
  ...{ name: "SpotlightStyle" },
  __name: "SpotlightStyle",
  setup(__props) {
    const { getTeekConfigRef } = index.useTeekConfig();
    const themeEnhanceConfig = getTeekConfigRef("themeEnhance", {});
    const { t } = useLocale.useLocale();
    const spotlightStyle = useStorage.useStorage(
      namespace.spotlightStyleStorageKey,
      themeEnhanceConfig.value.spotlight?.defaultStyle || themeEnhance.SpotlightStyle.Aside
    );
    const spotlightToggledOn = useStorage.useStorage(namespace.spotlightStorageKey, themeEnhanceConfig.value.spotlight?.defaultValue ?? true);
    const supportTouch = useMediaQuery.useMediaQuery(themeEnhance.touchMedia);
    const content = Vue.computed(() => [
      {
        value: themeEnhance.SpotlightStyle.Aside,
        title: t("tk.themeEnhance.spotlightStyles.asideTipTitle"),
        helpMessage: t("tk.themeEnhance.spotlightStyles.asideHelpTipContent"),
        ariaLabel: t("tk.themeEnhance.spotlightStyles.asideTipTitle"),
        icon: alignTextLeft.default
      },
      {
        value: themeEnhance.SpotlightStyle.Under,
        title: t("tk.themeEnhance.spotlightStyles.underTipTitle"),
        helpMessage: t("tk.themeEnhance.spotlightStyles.underHelpTipContent"),
        ariaLabel: t("tk.themeEnhance.spotlightStyles.underTipTitle"),
        icon: alignLeft.default
      }
    ]);
    const segmentedOptions = Vue.computed(
      () => content.value.map((item) => ({
        value: item.value,
        title: item.title,
        ariaLabel: item.ariaLabel,
        icon: item.icon
      }))
    );
    const tips = Vue.computed(
      () => content.value.map((item) => ({
        title: item.title,
        icon: item.icon,
        content: item.helpMessage
      }))
    );
    return (_ctx, _cache) => {
      return Vue.openBlock(), Vue.createBlock(Vue.Transition, { name: Vue.unref(namespace.transitionName) }, {
        default: Vue.withCtx(() => [
          Vue.unref(spotlightToggledOn) ? (Vue.openBlock(), Vue.createBlock(BaseTemplate_vue_vue_type_script_setup_true_name_BaseTemplate_lang.default, {
            key: 0,
            icon: Vue.unref(click.default),
            title: Vue.unref(t)("tk.themeEnhance.spotlightStyles.title"),
            helper: !Vue.unref(themeEnhanceConfig).spotlight?.disableHelp,
            "helper-desc": Vue.unref(t)("tk.themeEnhance.spotlightStyles.helpDesc"),
            tips: tips.value,
            disabled: Vue.unref(supportTouch)
          }, {
            default: Vue.withCtx(() => [
              Vue.createVNode(Vue.unref(Segmented_vue_vue_type_script_setup_true_name_Segmented_lang.default), {
                modelValue: Vue.unref(spotlightStyle),
                "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => Vue.isRef(spotlightStyle) ? spotlightStyle.value = $event : null),
                options: segmentedOptions.value,
                disabled: Vue.unref(supportTouch)
              }, null, 8, ["modelValue", "options", "disabled"])
            ]),
            _: 1
            /* STABLE */
          }, 8, ["icon", "title", "helper", "helper-desc", "tips", "disabled"])) : Vue.createCommentVNode("v-if", true)
        ]),
        _: 1
        /* STABLE */
      }, 8, ["name"]);
    };
  }
});

exports.default = _sfc_main;
