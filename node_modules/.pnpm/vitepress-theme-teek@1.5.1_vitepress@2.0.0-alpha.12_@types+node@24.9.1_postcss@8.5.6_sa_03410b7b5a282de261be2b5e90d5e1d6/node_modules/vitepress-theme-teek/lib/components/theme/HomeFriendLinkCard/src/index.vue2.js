'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Vue = require('vue');
var vitepress = require('vitepress');
var index$1 = require('../../../../helper/dist/index.js');
var useNamespace = require('../../../../composables/useNamespace.js');
require('vitepress-theme-teek/theme-chalk/tk-copy-banner.css');
var useLocale = require('../../../../composables/useLocale.js');
var useScrollData = require('../../../../composables/useScrollData.js');
require('../../../../composables/useZIndex.js');
var friendLink = require('../../../../static/icons/friendLink.js');
var index = require('../../ConfigProvider/index.js');
var index_vue_vue_type_script_setup_true_name_PageCard_lang = require('../../../common/PageCard/src/index.vue2.js');
var ItemInfo_vue_vue_type_script_setup_true_name_ItemInfo_lang = require('./ItemInfo.vue2.js');

const _hoisted_1 = ["aria-label"];
var _sfc_main = /* @__PURE__ */ Vue.defineComponent({
  ...{ name: "HomeFriendLinkCard" },
  __name: "index",
  setup(__props) {
    const ns = useNamespace.useNamespace("friend-link");
    const { t } = useLocale.useLocale();
    const { getTeekConfigRef } = index.useTeekConfig();
    const friendLinkConfig = getTeekConfigRef("friendLink", {
      list: [],
      limit: 4,
      title: t("tk.friendLinkCard.title", { icon: friendLink.default }),
      emptyLabel: t("tk.friendLinkCard.emptyLabel"),
      autoScroll: false,
      scrollSpeed: 2500,
      autoPage: false,
      pageSpeed: 4e3,
      titleClick: void 0
    });
    const { data, start, stop } = useScrollData.useScrollData(friendLinkConfig.value.list, 5, {
      intervalTime: friendLinkConfig.value.scrollSpeed
    });
    const pageNum = Vue.ref(1);
    const currentFriendLinkList = Vue.computed(() => {
      const { list, limit, autoScroll } = friendLinkConfig.value;
      if (autoScroll) return data.value;
      const p = pageNum.value;
      return list.slice((p - 1) * limit, p * limit);
    });
    const finalTitle = Vue.computed(() => {
      const { title } = friendLinkConfig.value;
      if (index$1.isFunction(title)) return title(friendLink.default);
      return title;
    });
    Vue.onMounted(() => {
      if (friendLinkConfig.value.autoScroll) start();
    });
    const itemRefs = Vue.ref([]);
    const getLiStyle = (index) => {
      if (friendLinkConfig.value.autoScroll) return {};
      const clientRect = itemRefs.value?.[index]?.getBoundingClientRect();
      return {
        top: `calc(${index} * (calc(${ns.cssVar("home-friend-link-gap")} + ${clientRect?.height || 0}px)))`
      };
    };
    const router = vitepress.useRouter();
    const handleTitleClick = () => {
      friendLinkConfig.value.titleClick?.(router);
    };
    return (_ctx, _cache) => {
      return Vue.openBlock(), Vue.createBlock(Vue.unref(index_vue_vue_type_script_setup_true_name_PageCard_lang.default), {
        page: !Vue.unref(friendLinkConfig).autoScroll,
        modelValue: pageNum.value,
        "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => pageNum.value = $event),
        pageSize: Vue.unref(friendLinkConfig).limit,
        total: Vue.unref(friendLinkConfig).list.length,
        title: finalTitle.value,
        titleClick: Vue.unref(friendLinkConfig).titleClick ? handleTitleClick : void 0,
        autoPage: Vue.unref(friendLinkConfig).autoPage,
        pageSpeed: Vue.unref(friendLinkConfig).pageSpeed,
        class: Vue.normalizeClass(Vue.unref(ns).b()),
        "aria-label": Vue.unref(t)("tk.friendLinkCard.label")
      }, {
        default: Vue.withCtx(({ transitionName, startAutoPage, closeAutoPage }) => [
          Vue.unref(friendLinkConfig).list.length ? (Vue.openBlock(), Vue.createBlock(Vue.TransitionGroup, {
            key: 0,
            name: transitionName,
            tag: "ul",
            mode: "out-in",
            class: Vue.normalizeClass(`${Vue.unref(ns).e("list")} flx-column`),
            onMouseenter: ($event) => Vue.unref(friendLinkConfig).autoScroll ? Vue.unref(stop)() : Vue.unref(friendLinkConfig).autoPage ? closeAutoPage() : () => {
            },
            onMouseleave: ($event) => Vue.unref(friendLinkConfig).autoScroll ? Vue.unref(start)() : Vue.unref(friendLinkConfig).autoPage ? startAutoPage() : () => {
            },
            "aria-label": Vue.unref(t)("tk.friendLinkCard.listLabel")
          }, {
            default: Vue.withCtx(() => [
              Vue.unref(friendLinkConfig).autoScroll ? (Vue.openBlock(true), Vue.createElementBlock(
                Vue.Fragment,
                { key: 0 },
                Vue.renderList(currentFriendLinkList.value, (item, index) => {
                  return Vue.openBlock(), Vue.createElementBlock(
                    "li",
                    {
                      key: item.name,
                      class: Vue.normalizeClass(Vue.unref(ns).e("list__item")),
                      style: Vue.normalizeStyle(getLiStyle(index))
                    },
                    [
                      Vue.createVNode(ItemInfo_vue_vue_type_script_setup_true_name_ItemInfo_lang.default, {
                        item,
                        ns: Vue.unref(ns)
                      }, null, 8, ["item", "ns"])
                    ],
                    6
                    /* CLASS, STYLE */
                  );
                }),
                128
                /* KEYED_FRAGMENT */
              )) : (Vue.openBlock(true), Vue.createElementBlock(
                Vue.Fragment,
                { key: 1 },
                Vue.renderList(currentFriendLinkList.value, (item, index) => {
                  return Vue.openBlock(), Vue.createElementBlock(
                    "li",
                    {
                      ref_for: true,
                      ref_key: "itemRefs",
                      ref: itemRefs,
                      key: item.name,
                      class: Vue.normalizeClass(Vue.unref(ns).e("list__item")),
                      style: Vue.normalizeStyle(getLiStyle(index))
                    },
                    [
                      Vue.createVNode(ItemInfo_vue_vue_type_script_setup_true_name_ItemInfo_lang.default, {
                        item,
                        ns: Vue.unref(ns)
                      }, null, 8, ["item", "ns"])
                    ],
                    6
                    /* CLASS, STYLE */
                  );
                }),
                128
                /* KEYED_FRAGMENT */
              ))
            ]),
            _: 1
            /* STABLE */
          }, 8, ["name", "class", "onMouseenter", "onMouseleave", "aria-label"])) : (Vue.openBlock(), Vue.createElementBlock("div", {
            key: 1,
            class: Vue.normalizeClass(Vue.unref(ns).m("empty")),
            "aria-label": Vue.unref(friendLinkConfig).emptyLabel
          }, Vue.toDisplayString(Vue.unref(friendLinkConfig).emptyLabel), 11, _hoisted_1))
        ]),
        _: 1
        /* STABLE */
      }, 8, ["page", "modelValue", "pageSize", "total", "title", "titleClick", "autoPage", "pageSpeed", "class", "aria-label"]);
    };
  }
});

exports.default = _sfc_main;
