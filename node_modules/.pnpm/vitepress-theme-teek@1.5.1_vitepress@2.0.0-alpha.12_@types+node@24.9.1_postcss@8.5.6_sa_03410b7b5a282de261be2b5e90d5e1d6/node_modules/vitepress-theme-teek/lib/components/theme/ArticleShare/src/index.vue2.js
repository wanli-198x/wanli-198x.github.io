'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Vue = require('vue');
require('vitepress');
var useClipboard = require('../../../../composables/useClipboard.js');
var useNamespace = require('../../../../composables/useNamespace.js');
require('vitepress-theme-teek/theme-chalk/tk-copy-banner.css');
var useLocale = require('../../../../composables/useLocale.js');
require('../../../../composables/useZIndex.js');
var share = require('../../../../static/icons/share.js');
var thumbs = require('../../../../static/icons/thumbs.js');
var index = require('../../ConfigProvider/index.js');
var index_vue_vue_type_script_setup_true_name_Icon_lang = require('../../../common/Icon/src/index.vue2.js');
require('@iconify/vue');

const _hoisted_1 = ["aria-label"];
const _hoisted_2 = {
  key: 0,
  class: "flx-center"
};
const _hoisted_3 = {
  key: 1,
  class: "flx-center"
};
var _sfc_main = /* @__PURE__ */ Vue.defineComponent({
  ...{ name: "ArticleShare" },
  __name: "index",
  setup(__props) {
    const ns = useNamespace.useNamespace("article-share");
    const { t } = useLocale.useLocale();
    const { getTeekConfigRef } = index.useTeekConfig();
    const articleShareConfig = getTeekConfigRef("articleShare", {
      icon: share.default,
      text: t("tk.articleShare.text"),
      copiedIcon: thumbs.default,
      copiedText: t("tk.articleShare.copiedText"),
      query: false,
      hash: false
    });
    const shareLink = Vue.computed(() => {
      const { hash, query } = articleShareConfig.value;
      const { origin, pathname, search } = location;
      return `${origin}${pathname}${query ? search : ""}${hash ? location.hash : ""}`;
    });
    const { copy, copied } = useClipboard.useClipboard(2e3);
    return (_ctx, _cache) => {
      return Vue.openBlock(), Vue.createElementBlock(
        "div",
        {
          class: Vue.normalizeClass(Vue.unref(ns).b())
        },
        [
          Vue.createElementVNode("button", {
            class: Vue.normalizeClass([Vue.unref(ns).e("button"), { copied: Vue.unref(copied) }, "flx-center"]),
            "aria-label": Vue.unref(copied) ? Vue.unref(articleShareConfig).copiedText : Vue.unref(articleShareConfig).text,
            "aria-live": "polite",
            onClick: _cache[0] || (_cache[0] = ($event) => Vue.unref(copy)(shareLink.value))
          }, [
            !Vue.unref(copied) ? (Vue.openBlock(), Vue.createElementBlock("div", _hoisted_2, [
              Vue.createVNode(Vue.unref(index_vue_vue_type_script_setup_true_name_Icon_lang.default), {
                icon: Vue.unref(share.default),
                style: { "margin-right": "4px" }
              }, null, 8, ["icon"]),
              Vue.createTextVNode(
                " " + Vue.toDisplayString(Vue.unref(articleShareConfig).text),
                1
                /* TEXT */
              )
            ])) : (Vue.openBlock(), Vue.createElementBlock("div", _hoisted_3, [
              Vue.createVNode(Vue.unref(index_vue_vue_type_script_setup_true_name_Icon_lang.default), {
                icon: Vue.unref(thumbs.default),
                style: { "margin-right": "4px" }
              }, null, 8, ["icon"]),
              Vue.createTextVNode(
                " " + Vue.toDisplayString(Vue.unref(articleShareConfig).copiedText),
                1
                /* TEXT */
              )
            ]))
          ], 10, _hoisted_1)
        ],
        2
        /* CLASS */
      );
    };
  }
});

exports.default = _sfc_main;
