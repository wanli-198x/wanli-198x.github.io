'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Vue = require('vue');
var vitepress = require('vitepress');
var index$1 = require('../../../../helper/dist/index.js');
require('vitepress-theme-teek/theme-chalk/tk-copy-banner.css');
var useLocale = require('../../../../composables/useLocale.js');
var useMediaQuery = require('../../../../composables/useMediaQuery.js');
var useStorage = require('../../../../composables/useStorage.js');
var useThemeColor = require('../../../../composables/useThemeColor.js');
require('../../../../composables/useZIndex.js');
var water = require('../../../../static/icons/theme-enhance/water.js');
var index = require('../../ConfigProvider/index.js');
var themeEnhance = require('./themeEnhance.js');
var namespace = require('./namespace.js');
var BaseTemplate_vue_vue_type_script_setup_true_name_BaseTemplate_lang = require('./components/BaseTemplate.vue2.js');
var Switch_vue_vue_type_script_setup_true_name_Switch_lang = require('./components/Switch.vue2.js');
var useThemeColorList = require('./useThemeColorList.js');

const _hoisted_1 = { class: "flx-justify-between flx-1" };
const _hoisted_2 = { class: "flx-align-center" };
const _hoisted_3 = { class: "label" };
const _hoisted_4 = ["title", "aria-label"];
const _hoisted_5 = { class: "color-list flx-justify-between flx-wrap" };
const _hoisted_6 = ["onClick", "title", "aria-label"];
var _sfc_main = /* @__PURE__ */ Vue.defineComponent({
  ...{ name: "ThemeColor" },
  __name: "ThemeColor",
  setup(__props) {
    const { getTeekConfigRef } = index.useTeekConfig();
    const themeEnhanceConfig = getTeekConfigRef("themeEnhance", {});
    const { t } = useLocale.useLocale();
    const { frontmatter } = vitepress.useData();
    const isMobile = useMediaQuery.useMediaQuery(themeEnhance.mobileMaxWidthMedia);
    const themeColorName = useStorage.useStorage(
      namespace.themeColorStorageKey,
      themeEnhanceConfig.value.themeColor?.defaultColorName || themeEnhance.ThemeColorName.vpDefault
    );
    const isSpread = useStorage.useStorage(namespace.themeBgColorStorageKey, themeEnhanceConfig.value.themeColor?.defaultSpread || false);
    const oldThemeColor = Vue.ref(themeColorName.value);
    const primaryColor = Vue.ref("");
    const { clear, updateSpread } = useThemeColor.useThemeColor(primaryColor, () => {
      if (themeEnhance.themeColorList.includes(themeColorName.value)) {
        return [useThemeColor.varNameList.vpBrand1, useThemeColor.varNameList.vpBrand2, useThemeColor.varNameList.vpBrand3, useThemeColor.varNameList.vpBrandSoft];
      }
    });
    const themeColorSelectList = useThemeColorList.useThemeColorList();
    const update = (val) => {
      if (!index$1.isClient) return;
      const el = document.documentElement;
      if (el.getAttribute(themeEnhance.themeColorAttribute) === val) return;
      el.setAttribute(themeEnhance.themeColorAttribute, val);
      if (themeEnhance.themeColorList.includes(val)) {
        clear();
        primaryColor.value = getComputedStyle(el).getPropertyValue(useThemeColor.varNameList.vpBrand1);
      } else {
        const appendThemeColor = themeEnhanceConfig.value.themeColor?.append || [];
        const option = appendThemeColor.map((item) => item.options).flat().filter((item) => item.value === val);
        const color = option[0]?.color;
        !color && clear();
        primaryColor.value = color || getComputedStyle(el).getPropertyValue(useThemeColor.varNameList.vpBrand1);
      }
      themeEnhanceConfig.value.themeColor?.switchColorDone?.(val);
    };
    Vue.watch(themeColorName, update, { immediate: true });
    Vue.watch(
      () => frontmatter.value.themeColorName,
      (newVal) => {
        if (newVal) {
          oldThemeColor.value = themeColorName.value;
          themeColorName.value = newVal;
        } else {
          themeColorName.value = oldThemeColor.value;
        }
      },
      { immediate: true }
    );
    Vue.watch(isSpread, updateSpread, { immediate: true, flush: "post" });
    const tips = [
      { title: t("tk.themeEnhance.themeColor.vpHelpTipTitle"), content: t("tk.themeEnhance.themeColor.vpHelpTipContent") },
      { title: t("tk.themeEnhance.themeColor.epHelpTipTitle"), content: t("tk.themeEnhance.themeColor.epHelpTipContent") }
    ];
    const handleChangePrimaryColor = (option) => {
      themeColorName.value = option.value;
    };
    const getStyle = (color) => {
      return color ? { backgroundColor: color } : {};
    };
    return (_ctx, _cache) => {
      return Vue.openBlock(), Vue.createBlock(BaseTemplate_vue_vue_type_script_setup_true_name_BaseTemplate_lang.default, {
        class: Vue.normalizeClass(Vue.unref(namespace.ns).e("theme-color")),
        icon: Vue.unref(water.default),
        title: Vue.unref(t)("tk.themeEnhance.themeColor.title"),
        helper: !Vue.unref(themeEnhanceConfig).themeColor?.disableHelp,
        "helper-desc": Vue.unref(t)("tk.themeEnhance.themeColor.helpDesc"),
        tips,
        disabled: Vue.unref(isMobile)
      }, {
        title: Vue.withCtx(() => [
          Vue.createElementVNode("div", _hoisted_1, [
            Vue.createTextVNode(
              Vue.toDisplayString(Vue.unref(t)("tk.themeEnhance.themeColor.title")) + " ",
              1
              /* TEXT */
            ),
            Vue.createElementVNode("div", _hoisted_2, [
              Vue.createElementVNode(
                "span",
                _hoisted_3,
                Vue.toDisplayString(Vue.unref(t)("tk.themeEnhance.themeColor.speedLabel")),
                1
                /* TEXT */
              ),
              Vue.createVNode(Switch_vue_vue_type_script_setup_true_name_Switch_lang.default, {
                modelValue: Vue.unref(isSpread),
                "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => Vue.isRef(isSpread) ? isSpread.value = $event : null)
              }, null, 8, ["modelValue"])
            ])
          ])
        ]),
        default: Vue.withCtx(() => [
          (Vue.openBlock(true), Vue.createElementBlock(
            Vue.Fragment,
            null,
            Vue.renderList(Vue.unref(themeColorSelectList), (item) => {
              return Vue.openBlock(), Vue.createElementBlock(
                Vue.Fragment,
                {
                  key: item.label
                },
                [
                  Vue.createElementVNode("h3", {
                    title: item.tip,
                    "aria-label": item.label
                  }, Vue.toDisplayString(item.label), 9, _hoisted_4),
                  Vue.createElementVNode("ul", _hoisted_5, [
                    (Vue.openBlock(true), Vue.createElementBlock(
                      Vue.Fragment,
                      null,
                      Vue.renderList(item.options, (option) => {
                        return Vue.openBlock(), Vue.createElementBlock("li", {
                          key: item.label + option.value,
                          class: "flx-column-center",
                          onClick: ($event) => handleChangePrimaryColor(option),
                          title: option.title,
                          "aria-label": option.ariaLabel ?? option.title ?? option.label
                        }, [
                          Vue.createElementVNode(
                            "div",
                            {
                              class: Vue.normalizeClass(["color-wrapper flx-center", Vue.unref(namespace.ns).is("active", option.value === Vue.unref(themeColorName))])
                            },
                            [
                              Vue.createElementVNode(
                                "div",
                                {
                                  class: "color-bg",
                                  style: Vue.normalizeStyle(getStyle(option.color))
                                },
                                null,
                                4
                                /* STYLE */
                              )
                            ],
                            2
                            /* CLASS */
                          ),
                          Vue.createElementVNode(
                            "span",
                            null,
                            Vue.toDisplayString(option.label),
                            1
                            /* TEXT */
                          )
                        ], 8, _hoisted_6);
                      }),
                      128
                      /* KEYED_FRAGMENT */
                    ))
                  ])
                ],
                64
                /* STABLE_FRAGMENT */
              );
            }),
            128
            /* KEYED_FRAGMENT */
          ))
        ]),
        _: 1
        /* STABLE */
      }, 8, ["class", "icon", "title", "helper", "helper-desc", "disabled"]);
    };
  }
});

exports.default = _sfc_main;
