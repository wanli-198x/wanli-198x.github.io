'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Vue = require('vue');
var vitepress = require('vitepress');
var index$1 = require('../../../../helper/dist/index.js');
var useNamespace = require('../../../../composables/useNamespace.js');
require('vitepress-theme-teek/theme-chalk/tk-copy-banner.css');
var useVpRouter = require('../../../../composables/useVpRouter.js');
require('../../../../composables/useZIndex.js');
var index = require('../../ConfigProvider/index.js');

const _sfc_main = {
  __name: "index",
  props: {
    "modelValue": { default: true },
    "modelModifiers": {}
  },
  emits: ["update:modelValue"],
  setup(__props) {
    const loading = Vue.useModel(__props, "modelValue");
    const ns = useNamespace.useNamespace("route-loading");
    const vpRouter = useVpRouter.useVpRouter();
    const { getTeekConfigRef } = index.useTeekConfig();
    const loadingConfig = getTeekConfigRef("loading", false);
    const handleRouteStart = () => {
      if (!loading.value) loading.value = true;
    };
    const handleRouteComplete = () => {
      setTimeout(
        () => {
          if (loading.value) loading.value = false;
        },
        Math.floor(Math.random() * (500 - 460 + 1)) + 460
      );
    };
    vpRouter.bindBeforeRouteChange(
      "routeLoadingBefore",
      () => {
        handleRouteStart();
      },
      "before"
    );
    vpRouter.bindAfterRouteChange(
      "routeLoadingAfter",
      () => {
        handleRouteComplete();
      },
      "before"
    );
    Vue.watch(
      () => vpRouter.route.path,
      () => {
        handleRouteStart();
        handleRouteComplete();
      }
    );
    Vue.onBeforeMount(handleRouteStart);
    Vue.onMounted(handleRouteComplete);
    vitepress.onContentUpdated(handleRouteComplete);
    return (_ctx, _cache) => {
      return Vue.renderSlot(_ctx.$slots, "default", { loading: loading.value }, () => [
        Vue.createElementVNode(
          "div",
          {
            class: Vue.normalizeClass(Vue.unref(ns).b())
          },
          [
            Vue.createVNode(Vue.Transition, {
              name: Vue.unref(ns).join("fade"),
              mode: "out-in",
              persisted: ""
            }, {
              default: Vue.withCtx(() => [
                Vue.withDirectives(Vue.createElementVNode(
                  "div",
                  {
                    class: Vue.normalizeClass(Vue.unref(ns).e("mask"))
                  },
                  [
                    Vue.createElementVNode(
                      "div",
                      {
                        class: Vue.normalizeClass(Vue.unref(ns).e("loader"))
                      },
                      [
                        Vue.createElementVNode(
                          "div",
                          {
                            class: Vue.normalizeClass(Vue.unref(ns).e("spinner"))
                          },
                          null,
                          2
                          /* CLASS */
                        ),
                        Vue.createElementVNode(
                          "p",
                          null,
                          Vue.toDisplayString(Vue.unref(index$1.isString)(Vue.unref(loadingConfig)) ? Vue.unref(loadingConfig) : "Teek \u62FC\u547D\u52A0\u8F7D\u4E2D ..."),
                          1
                          /* TEXT */
                        )
                      ],
                      2
                      /* CLASS */
                    )
                  ],
                  2
                  /* CLASS */
                ), [
                  [Vue.vShow, loading.value]
                ])
              ]),
              _: 1
              /* STABLE */
            }, 8, ["name"])
          ],
          2
          /* CLASS */
        )
      ]);
    };
  }
};

exports.default = _sfc_main;
