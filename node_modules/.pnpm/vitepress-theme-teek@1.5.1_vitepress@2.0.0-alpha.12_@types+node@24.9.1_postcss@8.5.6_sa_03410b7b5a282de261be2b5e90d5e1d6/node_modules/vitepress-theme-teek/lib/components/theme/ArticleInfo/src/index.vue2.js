'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Vue = require('vue');
var vitepress = require('vitepress');
var index$1 = require('../../../../helper/dist/index.js');
var useNamespace = require('../../../../composables/useNamespace.js');
require('vitepress-theme-teek/theme-chalk/tk-copy-banner.css');
var useLocale = require('../../../../composables/useLocale.js');
require('../../../../composables/useZIndex.js');
var user = require('../../../../static/icons/user.js');
var calendar = require('../../../../static/icons/calendar.js');
var folderOpened = require('../../../../static/icons/folderOpened.js');
var collectionTag = require('../../../../static/icons/collectionTag.js');
var editPen = require('../../../../static/icons/editPen.js');
var index = require('../../ConfigProvider/index.js');
var index_vue_vue_type_script_setup_true_name_Icon_lang = require('../../../common/Icon/src/index.vue2.js');
require('@iconify/vue');

const _hoisted_1 = ["aria-label"];
const _hoisted_2 = ["aria-label"];
const _hoisted_3 = ["title", "href", "target", "aria-label"];
const _hoisted_4 = ["title", "href", "aria-label"];
var _sfc_main = /* @__PURE__ */ Vue.defineComponent({
  ...{ name: "ArticleInfo" },
  __name: "index",
  props: {
    post: {},
    scope: {},
    split: { type: Boolean, default: false }
  },
  setup(__props) {
    const ns = useNamespace.useNamespace("article-info");
    const { t } = useLocale.useLocale();
    const { getTeekConfigRef } = index.useTeekConfig();
    const { page } = vitepress.useData();
    const articleConfig = getTeekConfigRef("articleAnalyze", {
      showIcon: true,
      dateFormat: "yyyy-MM-dd",
      showAuthor: true,
      showCreateDate: true,
      showUpdateDate: false,
      showCategory: false,
      showTag: false
    });
    const posts = index.usePosts();
    const route = vitepress.useRoute();
    const createDate = Vue.computed(() => {
      const originPosts = posts.value.originPosts;
      const date = __props.post.date || originPosts.find((item) => [item.url, item.frontmatter.permalink].includes(route.path))?.date;
      const dateFormatConst = articleConfig.value.dateFormat;
      if (index$1.isFunction(dateFormatConst)) return dateFormatConst(date || "");
      return index$1.formatDate(date || /* @__PURE__ */ new Date(), dateFormatConst);
    });
    const updateDate = Vue.computed(() => {
      const date = page.value.lastUpdated;
      if (!date) return "";
      const dateFormatConst = articleConfig.value.dateFormat;
      if (index$1.isFunction(dateFormatConst)) return dateFormatConst(date);
      return index$1.formatDate(date, dateFormatConst);
    });
    const baseInfo = Vue.computed(() => {
      const { showAuthor, showCreateDate, showUpdateDate, showCategory, showTag } = articleConfig.value;
      return [
        {
          title: t("tk.articleInfo.author"),
          icon: user.default,
          data: __props.post.author?.name,
          href: __props.post.author?.link,
          target: __props.post.author?.link ? "_blank" : "_self",
          show: isShow(showAuthor)
        },
        {
          title: t("tk.articleInfo.createTime"),
          icon: calendar.default,
          data: createDate.value,
          show: isShow(showCreateDate)
        },
        {
          title: t("tk.articleInfo.updateTime"),
          icon: editPen.default,
          data: updateDate.value,
          show: updateDate.value && (__props.scope === "article" && showUpdateDate || __props.scope === "article-banner")
        },
        {
          title: t("tk.articleInfo.category"),
          icon: folderOpened.default,
          dataList: __props.post.frontmatter?.categories || [],
          href: "/categories?category={data}",
          class: "or",
          show: __props.scope !== "article-banner" && (__props.scope === "post" || isShow(showCategory))
        },
        {
          title: t("tk.articleInfo.tag"),
          icon: collectionTag.default,
          dataList: __props.post.frontmatter?.tags || [],
          href: "/tags?tag={data}",
          class: "or",
          show: __props.scope !== "article-banner" && (__props.scope === "post" || isShow(showTag))
        }
      ];
    });
    const isShow = (showInfo) => {
      const arr = [showInfo || []].flat();
      return arr.includes(true) || arr.includes(__props.scope);
    };
    return (_ctx, _cache) => {
      return Vue.openBlock(), Vue.createElementBlock("div", {
        class: Vue.normalizeClass([Vue.unref(ns).b(), __props.scope]),
        role: "group",
        "aria-label": Vue.unref(t)("tk.articleInfo.label")
      }, [
        (Vue.openBlock(true), Vue.createElementBlock(
          Vue.Fragment,
          null,
          Vue.renderList(baseInfo.value, (item) => {
            return Vue.openBlock(), Vue.createElementBlock(
              Vue.Fragment,
              {
                key: item.title
              },
              [
                item.show && (item.data || item.dataList?.length) ? (Vue.openBlock(), Vue.createElementBlock("span", {
                  key: 0,
                  class: Vue.normalizeClass([Vue.unref(ns).e("item"), { split: __props.split }]),
                  role: "group",
                  "aria-label": item.title
                }, [
                  Vue.unref(articleConfig).showIcon ? (Vue.openBlock(), Vue.createBlock(Vue.unref(index_vue_vue_type_script_setup_true_name_Icon_lang.default), {
                    key: 0,
                    icon: item.icon,
                    class: Vue.normalizeClass(Vue.unref(ns).e("icon")),
                    "aria-hidden": "true"
                  }, null, 8, ["icon", "class"])) : Vue.createCommentVNode("v-if", true),
                  item.data ? (Vue.openBlock(), Vue.createElementBlock("a", {
                    key: 1,
                    title: item.title,
                    href: item.href && Vue.unref(vitepress.withBase)(item.href),
                    target: item.target,
                    class: Vue.normalizeClass([item.class, "hover-color"]),
                    "aria-label": item.data
                  }, Vue.toDisplayString(item.data), 11, _hoisted_3)) : (Vue.openBlock(true), Vue.createElementBlock(
                    Vue.Fragment,
                    { key: 2 },
                    Vue.renderList(item.dataList, (data, index) => {
                      return Vue.openBlock(), Vue.createElementBlock("a", {
                        key: index,
                        title: item.title,
                        href: item.href && Vue.unref(vitepress.withBase)(item.href.replace("{data}", encodeURIComponent(data))),
                        class: Vue.normalizeClass([item.class, "hover-color"]),
                        "aria-label": data
                      }, Vue.toDisplayString(data), 11, _hoisted_4);
                    }),
                    128
                    /* KEYED_FRAGMENT */
                  ))
                ], 10, _hoisted_2)) : Vue.createCommentVNode("v-if", true)
              ],
              64
              /* STABLE_FRAGMENT */
            );
          }),
          128
          /* KEYED_FRAGMENT */
        )),
        Vue.renderSlot(_ctx.$slots, "default")
      ], 10, _hoisted_1);
    };
  }
});

exports.default = _sfc_main;
