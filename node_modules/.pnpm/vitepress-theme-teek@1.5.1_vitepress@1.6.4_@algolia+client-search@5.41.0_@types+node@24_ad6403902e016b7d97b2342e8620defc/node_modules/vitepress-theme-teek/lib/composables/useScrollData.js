'use strict';

var Vue = require('vue');
var useScopeDispose = require('./useScopeDispose.js');

const useScrollData = (data, limit, options = {}) => {
  const { intervalTime = 3e3, reloadWhenDataChanged = false } = options;
  const dataComputed = Vue.computed(() => Vue.toValue(data) || []);
  const visibleData = Vue.ref(dataComputed.value.slice(0, limit));
  let currentIndex = limit;
  let timer = null;
  const scrollData = () => {
    const nextIndex = (currentIndex + 1) % dataComputed.value.length;
    visibleData.value.push(dataComputed.value[nextIndex]);
    visibleData.value.shift();
    currentIndex = nextIndex;
  };
  const start = () => {
    scrollData();
    timer = setInterval(() => {
      scrollData();
    }, intervalTime);
  };
  const stop = (restore = false) => {
    if (timer) {
      clearInterval(timer);
      timer = null;
    }
    if (restore) {
      visibleData.value = dataComputed.value.slice(0, limit);
      currentIndex = limit;
    }
  };
  const restart = () => {
    stop(true);
    start();
  };
  if (reloadWhenDataChanged) Vue.watch(dataComputed, () => restart());
  useScopeDispose.useScopeDispose(stop);
  return {
    data: visibleData,
    start,
    stop,
    restart
  };
};

exports.useScrollData = useScrollData;
