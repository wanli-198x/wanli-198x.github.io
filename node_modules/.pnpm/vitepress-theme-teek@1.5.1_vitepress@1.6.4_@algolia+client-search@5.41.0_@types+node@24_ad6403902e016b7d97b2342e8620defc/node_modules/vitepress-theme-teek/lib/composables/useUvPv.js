'use strict';

var Vue = require('vue');
var index = require('../helper/dist/index.js');
var useScopeDispose = require('./useScopeDispose.js');

const DEFAULT_SITE_PV = 9999;
const DEFAULT_SITE_UV = 9999;
const DEFAULT_PAGE_PV = 9999;
const DEFAULT_PAGE_UV = 9999;
const DEFAULT_TODAY_DATA = {
  site_pv: 9999,
  site_uv: 9999,
  page_pv: 9999,
  page_uv: 9999
};
const DEFAULT_YESTERDAY_DATA = {
  site_pv: 9999,
  site_uv: 9999,
  page_pv: 9999,
  page_uv: 9999
};
const useUvPv = (immediate = false, options = {}) => {
  const { url, provider = "busuanzi", tryRequest = false, tryCount = 5, tryIterationTime = 2e3, requestFn } = options;
  const sitePv = Vue.ref(0);
  const siteUv = Vue.ref(0);
  const pagePv = Vue.ref(0);
  const pageUv = Vue.ref(0);
  const today = Vue.ref({ site_pv: 0, site_uv: 0, page_pv: 0, page_uv: 0 });
  const yesterday = Vue.ref({ site_pv: 0, site_uv: 0, page_pv: 0, page_uv: 0 });
  const isGet = Vue.ref(true);
  const request = () => {
    if (!index.isClient) return;
    if (isGet.value === false) return;
    isGet.value = false;
    const call = async (url2) => {
      if (requestFn) {
        const response = await requestFn(url2, createScript);
        window.dispatchEvent(new CustomEvent("views", { detail: response }));
        return Promise.resolve(response);
      }
      switch (provider) {
        case "busuanzi":
          return callBusuanzi(url2);
        case "vercount":
          return callVercount(url2);
        default:
          return callBusuanzi(url2);
      }
    };
    call(url || void 0).then((data) => {
      sitePv.value = data.site_pv || DEFAULT_SITE_PV;
      siteUv.value = data.site_uv || DEFAULT_SITE_UV;
      pagePv.value = data.page_pv || DEFAULT_PAGE_PV;
      pageUv.value = data.page_uv || DEFAULT_PAGE_UV;
      today.value = data.today || DEFAULT_TODAY_DATA;
      yesterday.value = data.yesterday || DEFAULT_YESTERDAY_DATA;
      isGet.value = true;
      window.dispatchEvent(new CustomEvent("views", { detail: data }));
    });
  };
  immediate && Vue.nextTick(request);
  if (tryRequest) {
    let i = 0;
    const clearTimer = (timer2) => {
      if (timer2) {
        clearInterval(timer2);
        timer2 = null;
      }
    };
    const timer = setInterval(() => {
      if (isGet.value) return clearTimer(timer);
      request();
      i += tryIterationTime;
      if (i > tryIterationTime * tryCount) clearTimer(timer);
    }, tryIterationTime);
    useScopeDispose.useScopeDispose(() => clearTimer(timer));
  }
  return {
    sitePv: Vue.readonly(sitePv),
    siteUv: Vue.readonly(siteUv),
    pagePv: Vue.readonly(pagePv),
    pageUv: Vue.readonly(pageUv),
    today: Vue.readonly(today),
    yesterday: Vue.readonly(yesterday),
    isGet: Vue.readonly(isGet),
    request
  };
};
const createScript = (url, immediate = true) => {
  const scriptDom = document.createElement("script");
  scriptDom.type = "text/javascript";
  scriptDom.defer = true;
  scriptDom.src = url;
  immediate && document.body.appendChild(scriptDom);
  return scriptDom;
};
const callBusuanzi = (url = "//busuanzi.ibruce.info/busuanzi?jsonpCallback=BusuanziCallback") => {
  const jsonpCallback = "BusuanziCallback_" + Math.floor(1099511627776 * Math.random());
  url = url.replace("=BusuanziCallback", "=" + jsonpCallback);
  const scriptDom = createScript(url);
  scriptDom.referrerPolicy = "no-referrer-when-downgrade";
  let response;
  window[jsonpCallback] = (data) => response = data;
  return new Promise((resolve, reject) => {
    scriptDom.onload = () => {
      resolve(response);
      setTimeout(() => {
        document.body.removeChild(scriptDom);
      }, 10);
    };
    scriptDom.onerror = () => reject("Error Loading " + url);
  });
};
const callVercount = async (url = "//events.vercount.one/js", timeout = 5e3) => {
  localStorage.removeItem("visitorCountData");
  const scriptDom = createScript(url);
  return new Promise((resolve, reject) => {
    scriptDom.onload = () => {
      const intervalTime = 500;
      let count = timeout / intervalTime;
      const timer = setInterval(() => {
        count--;
        if (count <= 0) {
          clearInterval(timer);
          resolve({});
        }
        const visitorCountData = localStorage.getItem("visitorCountData");
        if (visitorCountData) {
          clearInterval(timer);
          resolve(JSON.parse(visitorCountData));
        }
      }, intervalTime);
      setTimeout(() => {
        document.body.removeChild(scriptDom);
      }, 10);
    };
    scriptDom.onerror = () => reject("Error Loading " + url);
  });
};

exports.callBusuanzi = callBusuanzi;
exports.callVercount = callVercount;
exports.createScript = createScript;
exports.useUvPv = useUvPv;
