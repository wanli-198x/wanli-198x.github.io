'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Vue = require('vue');
var vitepress = require('vitepress');
var index$1 = require('../../../../helper/dist/index.js');
require('vitepress-theme-teek/theme-chalk/tk-copy-banner.css');
var useLocale = require('../../../../composables/useLocale.js');
var useMediaQuery = require('../../../../composables/useMediaQuery.js');
var useStorage = require('../../../../composables/useStorage.js');
require('../../../../composables/useZIndex.js');
var fullscreen = require('../../../../static/icons/fullscreen.js');
var fullScreenOne = require('../../../../static/icons/theme-enhance/fullScreenOne.js');
var fullscreenTwo = require('../../../../static/icons/theme-enhance/fullscreenTwo.js');
var layout = require('../../../../static/icons/theme-enhance/layout.js');
var overallReduction = require('../../../../static/icons/theme-enhance/overallReduction.js');
var index = require('../../ConfigProvider/index.js');
var Segmented_vue_vue_type_script_setup_true_name_Segmented_lang = require('../../../common/Segmented/src/Segmented.vue2.js');
var themeEnhance = require('./themeEnhance.js');
var namespace = require('./namespace.js');
var useAnimated = require('./useAnimated.js');
var BaseTemplate_vue_vue_type_script_setup_true_name_BaseTemplate_lang = require('./components/BaseTemplate.vue2.js');

var _sfc_main = /* @__PURE__ */ Vue.defineComponent({
  ...{ name: "LayoutSwitch" },
  __name: "LayoutSwitch",
  setup(__props) {
    const { getTeekConfigRef } = index.useTeekConfig();
    const themeEnhanceConfig = getTeekConfigRef("themeEnhance", {});
    const { t } = useLocale.useLocale();
    const { frontmatter } = vitepress.useData();
    const layoutMode = useStorage.useStorage(
      namespace.layoutModeStorageKey,
      themeEnhanceConfig.value.layoutSwitch?.defaultMode || themeEnhance.LayoutMode.Original
    );
    const isMobile = useMediaQuery.useMediaQuery(themeEnhance.mobileMaxWidthMedia);
    const oldLayoutMode = Vue.ref(layoutMode.value);
    const { start: startAnimated } = useAnimated.useAnimated();
    const update = (val) => {
      if (!index$1.isClient) return;
      const { layoutSwitch } = themeEnhanceConfig.value;
      if (!layoutSwitch?.disableAnimation) startAnimated();
      const el = document.documentElement;
      if (el.getAttribute(themeEnhance.layoutModeAttribute) === val) return;
      el.setAttribute(themeEnhance.layoutModeAttribute, val);
      themeEnhanceConfig.value.layoutSwitch?.switchModeDone?.(val);
    };
    Vue.watch(layoutMode, update, { immediate: true });
    Vue.watch(
      () => frontmatter.value.layoutMode,
      (newVal) => {
        if (newVal) {
          oldLayoutMode.value = layoutMode.value;
          layoutMode.value = newVal;
        } else {
          layoutMode.value = oldLayoutMode.value;
        }
      },
      { immediate: true }
    );
    Vue.watch(
      () => themeEnhanceConfig.value.layoutSwitch?.defaultMode,
      (newVal) => {
        if (newVal) layoutMode.value = newVal;
      }
    );
    const content = Vue.computed(() => [
      {
        value: themeEnhance.LayoutMode.FullWidth,
        title: t("tk.themeEnhance.layoutSwitch.fullWidthTipTitle"),
        tipContent: t("tk.themeEnhance.layoutSwitch.fullWidthHelpTipContent"),
        icon: fullScreenOne.default
      },
      {
        value: themeEnhance.LayoutMode.SidebarWidthAdjustableOnly,
        title: t("tk.themeEnhance.layoutSwitch.sidebarWidthAdjustableOnlyTipTitle"),
        tipContent: t("tk.themeEnhance.layoutSwitch.sidebarWidthAdjustableOnlyHelpTipContent"),
        icon: fullscreenTwo.default
      },
      {
        value: themeEnhance.LayoutMode.BothWidthAdjustable,
        title: t("tk.themeEnhance.layoutSwitch.bothWidthAdjustableTipTitle"),
        tipContent: t("tk.themeEnhance.layoutSwitch.bothWidthAdjustableHelpTipContent"),
        icon: fullscreen.default
      },
      {
        value: themeEnhance.LayoutMode.Original,
        title: t("tk.themeEnhance.layoutSwitch.originalWidthTipTitle"),
        tipContent: t("tk.themeEnhance.layoutSwitch.originalWidthHelpTipContent"),
        icon: overallReduction.default
      }
    ]);
    const segmentedOptions = Vue.computed(
      () => content.value.map((item) => ({
        value: item.value,
        title: item.title,
        ariaLabel: item.title,
        icon: item.icon
      }))
    );
    const tips = Vue.computed(
      () => content.value.map((item) => ({
        title: item.title,
        icon: item.icon,
        content: item.tipContent
      }))
    );
    return (_ctx, _cache) => {
      return Vue.openBlock(), Vue.createBlock(BaseTemplate_vue_vue_type_script_setup_true_name_BaseTemplate_lang.default, {
        icon: Vue.unref(layout.default),
        title: Vue.unref(t)("tk.themeEnhance.layoutSwitch.title"),
        helper: !Vue.unref(themeEnhanceConfig).layoutSwitch?.disableHelp,
        "helper-desc": Vue.unref(t)("tk.themeEnhance.layoutSwitch.helpDesc"),
        tips: tips.value,
        disabled: Vue.unref(isMobile)
      }, {
        default: Vue.withCtx(() => [
          Vue.createVNode(Vue.unref(Segmented_vue_vue_type_script_setup_true_name_Segmented_lang.default), {
            modelValue: Vue.unref(layoutMode),
            "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => Vue.isRef(layoutMode) ? layoutMode.value = $event : null),
            options: segmentedOptions.value,
            disabled: Vue.unref(isMobile)
          }, null, 8, ["modelValue", "options", "disabled"])
        ]),
        _: 1
        /* STABLE */
      }, 8, ["icon", "title", "helper", "helper-desc", "tips", "disabled"]);
    };
  }
});

exports.default = _sfc_main;
