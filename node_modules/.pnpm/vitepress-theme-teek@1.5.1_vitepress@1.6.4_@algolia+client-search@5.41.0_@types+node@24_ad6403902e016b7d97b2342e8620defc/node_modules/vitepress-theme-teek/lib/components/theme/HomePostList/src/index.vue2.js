'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Vue = require('vue');
var vitepress = require('vitepress');
var index$1 = require('../../../../helper/dist/index.js');
var useNamespace = require('../../../../composables/useNamespace.js');
require('vitepress-theme-teek/theme-chalk/tk-copy-banner.css');
var useLocale = require('../../../../composables/useLocale.js');
var useWindowSize = require('../../../../composables/useWindowSize.js');
var useWindowTransition = require('../../../../composables/useWindowTransition.js');
require('../../../../composables/useZIndex.js');
var empty = require('../../../../static/icons/empty.js');
var index = require('../../ConfigProvider/index.js');
var index_vue_vue_type_script_setup_true_name_Pagination_lang = require('../../../common/Pagination/src/index.vue2.js');
var index_vue_vue_type_script_setup_true_name_Icon_lang = require('../../../common/Icon/src/index.vue2.js');
require('@iconify/vue');
var homePostList = require('./homePostList.js');
var HomePostItem_vue_vue_type_script_setup_true_name_HomePostItem_lang = require('./HomePostItem.vue2.js');
var HomePostItemCard_vue_vue_type_script_setup_true_name_HomePostItemCard_lang = require('./HomePostItemCard.vue2.js');

const _hoisted_1 = ["aria-label"];
const _hoisted_2 = ["aria-label"];
const targetSize = "small";
const targetLayout = "prev, pager, next";
var _sfc_main = /* @__PURE__ */ Vue.defineComponent({
  ...{ name: "HomePostList" },
  __name: "index",
  props: {
    "modelValue": { default: false },
    "modelModifiers": {}
  },
  emits: ["update:modelValue"],
  setup(__props, { expose: __expose }) {
    const ns = useNamespace.useNamespace("post-list");
    const { t } = useLocale.useLocale();
    const { getTeekConfigRef } = index.useTeekConfig();
    const posts = index.usePosts();
    const { frontmatter } = vitepress.useData();
    const postConfig = getTeekConfigRef("post", {
      postStyle: "list",
      coverImgMode: "default",
      emptyLabel: t("tk.homePost.emptyLabel"),
      transition: true,
      transitionName: ns.join("slide-fade")
    });
    const pageConfig = getTeekConfigRef("page", {});
    const pageNum = Vue.ref(1);
    const total = Vue.ref(0);
    const coverImgMode = Vue.ref(postConfig.value.coverImgMode);
    const isPaging = Vue.useModel(__props, "modelValue");
    const defaultPageSize = Vue.computed(() => postConfig.value.postStyle === "list" ? 10 : 15);
    const pageSize = Vue.computed(() => pageConfig.value.pageSize || defaultPageSize.value);
    const route = vitepress.useRoute();
    const currentPosts = Vue.ref([]);
    const totalPostsCount = Vue.ref(0);
    Vue.watchEffect(() => {
      coverImgMode.value = postConfig.value.coverImgMode;
    });
    const updateData = () => {
      if (!index$1.isClient) return;
      const { searchParams } = new URL(window.location.href);
      const p = Number(searchParams.get(homePostList.pageNumKey)) || 1;
      if (p !== pageNum.value) pageNum.value = p;
      isPaging.value = p > 1;
      const postConst = posts.value;
      const frontmatterConst = frontmatter.value;
      let post = postConst.sortPostsByDateAndSticky;
      if (frontmatterConst.categoriesPage) {
        const c = searchParams.get("category");
        post = c ? postConst.groupPosts.categories[c] : post.filter((item) => item.frontmatter.categories);
      } else if (frontmatterConst.tagsPage) {
        const t2 = searchParams.get("tag");
        post = t2 ? postConst.groupPosts.tags[t2] : post.filter((item) => item.frontmatter.tags);
      }
      if (total.value !== post?.length) total.value = post?.length || 0;
      const inHomePosts = post.filter((item) => item.frontmatter.inHomePost !== false);
      totalPostsCount.value = inHomePosts.length;
      currentPosts.value = inHomePosts.slice((pageNum.value - 1) * pageSize.value, pageNum.value * pageSize.value);
    };
    Vue.watch(() => route.path, updateData, { immediate: true });
    const handlePagination = () => {
      const { searchParams } = new URL(window.location.href);
      searchParams.delete(homePostList.pageNumKey);
      searchParams.append(homePostList.pageNumKey, String(pageNum.value));
      window.history.pushState({}, "", `${window.location.pathname}?${searchParams.toString()}`);
      updateData();
      Vue.nextTick(() => {
        const rootStyles = getComputedStyle(document.documentElement);
        const navHeight = index$1.removeUnit(rootStyles.getPropertyValue("--vp-c-text-1"));
        document.querySelector("html")?.scrollTo({ top: window.innerHeight - navHeight, behavior: "smooth" });
      });
    };
    const pagePropsRef = Vue.reactive({ ...pageConfig.value });
    const { size = "default", layout = "prev, pager, next, jumper, ->, total" } = pageConfig.value;
    useWindowSize.useWindowSize((width) => {
      if (width <= 768) {
        if (pagePropsRef.size !== targetSize) pagePropsRef.size = targetSize;
      } else if (pagePropsRef.size !== size) pagePropsRef.size = size;
      if (width <= 960) {
        if (pagePropsRef.layout !== targetLayout) pagePropsRef.layout = targetLayout;
      } else if (pagePropsRef.layout !== layout) pagePropsRef.layout = layout;
      if (width <= 960) {
        if (coverImgMode.value !== "default") coverImgMode.value = "default";
      } else if (coverImgMode.value !== postConfig.value.coverImgMode) coverImgMode.value = postConfig.value.coverImgMode;
    });
    const windowTransition = index.useWindowTransitionConfig((config) => config.post);
    const postItemListInstance = Vue.ref(null);
    const { start } = useWindowTransition.useWindowTransition(postItemListInstance, false);
    Vue.onMounted(() => {
      windowTransition.value && start();
    });
    __expose({ updateData });
    return (_ctx, _cache) => {
      return Vue.openBlock(), Vue.createElementBlock(
        "div",
        {
          class: Vue.normalizeClass([Vue.unref(ns).b(), Vue.unref(ns).is("card", Vue.unref(postConfig).postStyle === "card")])
        },
        [
          currentPosts.value ? (Vue.openBlock(), Vue.createElementBlock(
            Vue.Fragment,
            { key: 0 },
            [
              Vue.renderSlot(_ctx.$slots, "teek-home-post-list", Vue.normalizeProps(Vue.guardReactiveProps({ currentPosts: currentPosts.value, transitionName: Vue.unref(postConfig).transitionName })), () => [
                Vue.createVNode(Vue.TransitionGroup, {
                  tag: "ul",
                  name: Vue.unref(postConfig).transition ? Vue.unref(postConfig).transitionName : "",
                  "aria-label": Vue.unref(t)("tk.homePost.label")
                }, {
                  default: Vue.withCtx(() => [
                    (Vue.openBlock(true), Vue.createElementBlock(
                      Vue.Fragment,
                      null,
                      Vue.renderList(currentPosts.value, (post) => {
                        return Vue.openBlock(), Vue.createElementBlock(
                          "li",
                          {
                            key: post.url,
                            class: Vue.normalizeClass({ "full-img": coverImgMode.value === "full" })
                          },
                          [
                            Vue.unref(windowTransition) ? (Vue.openBlock(), Vue.createElementBlock(
                              "div",
                              {
                                key: 0,
                                ref_for: true,
                                ref_key: "postItemListInstance",
                                ref: postItemListInstance,
                                style: { "width": "100%", "height": "100%" }
                              },
                              [
                                Vue.unref(postConfig).postStyle === "card" ? (Vue.openBlock(), Vue.createBlock(HomePostItemCard_vue_vue_type_script_setup_true_name_HomePostItemCard_lang.default, {
                                  key: 0,
                                  post
                                }, null, 8, ["post"])) : (Vue.openBlock(), Vue.createBlock(HomePostItem_vue_vue_type_script_setup_true_name_HomePostItem_lang.default, {
                                  key: 1,
                                  post,
                                  coverImgMode: coverImgMode.value
                                }, null, 8, ["post", "coverImgMode"]))
                              ],
                              512
                              /* NEED_PATCH */
                            )) : (Vue.openBlock(), Vue.createElementBlock(
                              Vue.Fragment,
                              { key: 1 },
                              [
                                Vue.unref(postConfig).postStyle === "card" ? (Vue.openBlock(), Vue.createBlock(HomePostItemCard_vue_vue_type_script_setup_true_name_HomePostItemCard_lang.default, {
                                  key: 0,
                                  post
                                }, null, 8, ["post"])) : (Vue.openBlock(), Vue.createBlock(HomePostItem_vue_vue_type_script_setup_true_name_HomePostItem_lang.default, {
                                  key: 1,
                                  post,
                                  coverImgMode: coverImgMode.value
                                }, null, 8, ["post", "coverImgMode"]))
                              ],
                              64
                              /* STABLE_FRAGMENT */
                            ))
                          ],
                          2
                          /* CLASS */
                        );
                      }),
                      128
                      /* KEYED_FRAGMENT */
                    ))
                  ]),
                  _: 1
                  /* STABLE */
                }, 8, ["name", "aria-label"])
              ]),
              Vue.createElementVNode("div", {
                class: Vue.normalizeClass(`${Vue.unref(ns).e("pagination")} flx-justify-center`),
                "aria-label": Vue.unref(t)("tk.homePost.pageLabel")
              }, [
                totalPostsCount.value >= pageSize.value ? (Vue.openBlock(), Vue.createBlock(Vue.unref(index_vue_vue_type_script_setup_true_name_Pagination_lang.default), Vue.mergeProps({
                  key: 0,
                  "page-size": pageSize.value,
                  "onUpdate:pageSize": _cache[0] || (_cache[0] = ($event) => pageSize.value = $event),
                  "current-page": pageNum.value,
                  "onUpdate:currentPage": _cache[1] || (_cache[1] = ($event) => pageNum.value = $event),
                  total: total.value,
                  background: "",
                  onCurrentChange: handlePagination
                }, { ...pagePropsRef }), null, 16, ["page-size", "current-page", "total"])) : Vue.createCommentVNode("v-if", true)
              ], 10, _hoisted_1)
            ],
            64
            /* STABLE_FRAGMENT */
          )) : (Vue.openBlock(), Vue.createElementBlock("div", {
            key: 1,
            class: Vue.normalizeClass([Vue.unref(ns).e("empty"), "flx-column-center"]),
            "aria-label": Vue.unref(postConfig).emptyLabel
          }, [
            Vue.createVNode(Vue.unref(index_vue_vue_type_script_setup_true_name_Icon_lang.default), {
              icon: Vue.unref(empty.default),
              size: 160,
              color: "var(--vp-c-text-3)",
              "aria-hidden": "true"
            }, null, 8, ["icon"]),
            Vue.createElementVNode(
              "span",
              {
                class: Vue.normalizeClass(Vue.unref(ns).e("empty__title"))
              },
              Vue.toDisplayString(Vue.unref(postConfig).emptyLabel),
              3
              /* TEXT, CLASS */
            )
          ], 10, _hoisted_2))
        ],
        2
        /* CLASS */
      );
    };
  }
});

exports.default = _sfc_main;
