'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Vue = require('vue');
var index$1 = require('../../../../helper/dist/index.js');
var useEventListener = require('../../../../composables/useEventListener.js');
require('vitepress');
var useNamespace = require('../../../../composables/useNamespace.js');
require('vitepress-theme-teek/theme-chalk/tk-copy-banner.css');
require('../../../../composables/useZIndex.js');
var arrowDown = require('../../../../static/icons/arrowDown.js');
var method = require('../../../common/Message/src/method.js');
var index = require('../../ConfigProvider/index.js');
var createOverlay = require('./createOverlay.js');

const documentAttribute = "code-block";
const foldClass = "fold";
const arrowClass = "code-arrow";
var _sfc_main = /* @__PURE__ */ Vue.defineComponent({
  ...{ name: "CodeBlockToggle" },
  __name: "index",
  setup(__props) {
    const ns = useNamespace.useNamespace();
    const { getTeekConfigRef } = index.useTeekConfig();
    const codeBlockConfig = getTeekConfigRef("codeBlock", {
      enabled: true,
      collapseHeight: 700,
      copiedDone: void 0,
      overlay: false,
      overlayHeight: 400,
      langTextTransform: ""
    });
    Vue.watch(
      codeBlockConfig,
      (newVal) => {
        if (!index$1.isClient) return;
        const { enabled = true, langTextTransform } = newVal || {};
        if (!enabled) return document.documentElement.removeAttribute(documentAttribute);
        document.documentElement.setAttribute(documentAttribute, ns.namespace);
        if (langTextTransform) {
          document.documentElement.style.setProperty(ns.cssVarName("code-block-lang-transform"), langTextTransform);
        }
        Vue.nextTick(() => initCodeBlock());
      },
      { immediate: true }
    );
    const initCodeBlock = () => {
      const modes = document.querySelectorAll(".vp-doc div[class*='language-']");
      Array.from(modes).forEach((item) => {
        const copyDom = item.querySelector(`.copy`);
        copyDom?.addEventListener("click", () => {
          codeBlockConfig.value.copiedDone?.(method.default);
        });
        const className = item.parentElement?.className;
        if (className?.includes("details") || className?.includes(ns.join("vp-code"))) return;
        const arrowElement = item.querySelector(`.${arrowClass}`);
        if (arrowElement) return;
        const newArrowElement = document.createElement("div");
        newArrowElement.setAttribute("aria-hidden", "true");
        newArrowElement.classList.add(arrowClass);
        newArrowElement.innerHTML = arrowDown.default;
        if (codeBlockConfig.value.overlay) {
          const overlay = createOverlay.createOverlay(() => newArrowElement.click());
          item.appendChild(overlay);
        }
        addClickEvent(newArrowElement, item);
        item.append(newArrowElement);
      });
    };
    const addClickEvent = (arrowDom, codeDom) => {
      const modeHeight = getElementHeight(codeDom);
      codeDom.style.height = index$1.addUnit(modeHeight);
      const preDom = codeDom.querySelector("pre");
      const lineNumbersWrapperDom = codeDom.querySelector(".line-numbers-wrapper");
      const codeBlockOverlayDom = codeDom.querySelector(".code-block-overlay");
      const codeBlockState = {
        expand: { height: index$1.addUnit(modeHeight), display: "block", overlayDisplay: "none", speed: 80 },
        fold: {
          height: codeBlockConfig.value.overlay ? index$1.addUnit(codeBlockConfig.value.overlayHeight) ?? "400px" : ns.cssVar("code-block-fold-height"),
          display: codeBlockConfig.value.overlay ? "block" : "none",
          overlayDisplay: "flex",
          speed: 400
        }
      };
      let timer;
      const clearTimer = () => {
        if (timer) {
          clearTimeout(timer);
          timer = null;
        }
      };
      const toggle = () => {
        const isFold = arrowDom.classList.contains(foldClass);
        const state = codeBlockState[isFold ? "expand" : "fold"];
        codeDom.style.height = state.height;
        clearTimer();
        if (preDom || lineNumbersWrapperDom) {
          timer = setTimeout(() => {
            if (preDom) preDom.style.display = state.display;
            if (lineNumbersWrapperDom) lineNumbersWrapperDom.style.display = state.display;
            if (codeBlockOverlayDom) codeBlockOverlayDom.style.display = state.overlayDisplay;
            clearTimer();
          }, state.speed);
        }
        arrowDom.classList.toggle(foldClass);
      };
      useEventListener.useEventListener(arrowDom, "click", toggle);
      const collapseHeight = codeBlockConfig.value.collapseHeight;
      if (index$1.isBoolean(collapseHeight)) {
        if (collapseHeight) toggle();
        else if (codeBlockOverlayDom) codeBlockOverlayDom.style.display = "none";
      } else if (collapseHeight && modeHeight > collapseHeight) toggle();
      else if (codeBlockOverlayDom) codeBlockOverlayDom.style.display = "none";
    };
    const getElementHeight = (item) => {
      const parentElementClass = item.parentElement?.className || "";
      if (!parentElementClass.includes("blocks")) return item.offsetHeight;
      if (parentElementClass.includes("blocks") && item.className.includes("active")) return item.offsetHeight;
      item.style.display = "block";
      const height = item.offsetHeight;
      item.style.display = "";
      return height;
    };
    return (_ctx, _cache) => {
      return null;
    };
  }
});

exports.default = _sfc_main;
