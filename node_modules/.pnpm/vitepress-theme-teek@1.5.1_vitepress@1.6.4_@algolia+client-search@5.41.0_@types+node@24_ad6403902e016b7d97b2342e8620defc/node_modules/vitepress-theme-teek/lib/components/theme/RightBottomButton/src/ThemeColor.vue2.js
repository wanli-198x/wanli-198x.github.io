'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Vue = require('vue');
var vitepress = require('vitepress');
var index$1 = require('../../../../helper/dist/index.js');
require('vitepress-theme-teek/theme-chalk/tk-copy-banner.css');
var useLocale = require('../../../../composables/useLocale.js');
var useStorage = require('../../../../composables/useStorage.js');
var useThemeColor = require('../../../../composables/useThemeColor.js');
require('../../../../composables/useZIndex.js');
var index = require('../../ConfigProvider/index.js');
var index_vue_vue_type_script_setup_true_name_Icon_lang = require('../../../common/Icon/src/index.vue2.js');
require('@iconify/vue');
var index_vue_vue_type_script_setup_true_name_Popover_lang = require('../../../common/Popover/src/index.vue2.js');
var themeEnhance = require('../../ThemeEnhance/src/themeEnhance.js');
var namespace = require('../../ThemeEnhance/src/namespace.js');
var useThemeColorList = require('../../ThemeEnhance/src/useThemeColorList.js');
var magic = require('../../../../static/icons/magic.js');
var namespace$1 = require('./namespace.js');

const _hoisted_1 = ["title", "aria-label"];
const _hoisted_2 = ["onClick", "title", "aria-label"];
var _sfc_main = /* @__PURE__ */ Vue.defineComponent({
  ...{ name: "ThemeColor" },
  __name: "ThemeColor",
  setup(__props) {
    const { t } = useLocale.useLocale();
    const { frontmatter } = vitepress.useData();
    const { getTeekConfigRef } = index.useTeekConfig();
    const themeEnhanceConfig = getTeekConfigRef("themeEnhance", {});
    const themeColorName = useStorage.useStorage(
      namespace.themeColorStorageKey,
      themeEnhanceConfig.value.themeColor?.defaultColorName || themeEnhance.ThemeColorName.vpDefault
    );
    const oldThemeColor = Vue.ref(themeColorName.value);
    const primaryColor = Vue.ref("");
    const { clear } = useThemeColor.useThemeColor(primaryColor, () => {
      if (themeEnhance.themeColorList.includes(themeColorName.value)) {
        return [useThemeColor.varNameList.vpBrand1, useThemeColor.varNameList.vpBrand2, useThemeColor.varNameList.vpBrand3, useThemeColor.varNameList.vpBrandSoft];
      }
    });
    const themeColorSelectList = useThemeColorList.useThemeColorList();
    const update = (val) => {
      if (!index$1.isClient) return;
      const el = document.documentElement;
      themeColorName.value = val;
      if (el.getAttribute(themeEnhance.themeColorAttribute) === val) return;
      el.setAttribute(themeEnhance.themeColorAttribute, val);
      if (themeEnhance.themeColorList.includes(val)) {
        clear();
        primaryColor.value = getComputedStyle(el).getPropertyValue(useThemeColor.varNameList.vpBrand1);
      } else {
        const appendThemeColor = themeEnhanceConfig.value.themeColor?.append || [];
        const option = appendThemeColor.map((item) => item.options).flat().filter((item) => item.value === val);
        const color = option[0]?.color;
        !color && clear();
        primaryColor.value = color || getComputedStyle(el).getPropertyValue(useThemeColor.varNameList.vpBrand1);
      }
      themeEnhanceConfig.value.themeColor?.switchColorDone?.(val);
    };
    Vue.watch(themeColorName, update, { immediate: true });
    Vue.watch(
      () => frontmatter.value.themeColorName,
      (newVal) => {
        if (newVal) {
          oldThemeColor.value = themeColorName.value;
          themeColorName.value = newVal;
        } else {
          themeColorName.value = oldThemeColor.value;
        }
      },
      { immediate: true }
    );
    Vue.onMounted(() => {
      if (frontmatter.value.themeColor) update(frontmatter.value.themeColor);
      else update(themeColorName.value);
    });
    const handleChangePrimaryColor = (option) => {
      themeColorName.value = option.value;
    };
    return (_ctx, _cache) => {
      return Vue.openBlock(), Vue.createBlock(Vue.unref(index_vue_vue_type_script_setup_true_name_Popover_lang.default), {
        class: Vue.normalizeClass(Vue.unref(namespace$1.ns).e("button")),
        "popper-class": Vue.unref(namespace$1.ns).e("dropdown"),
        placement: "left-start",
        width: 120,
        "x-offset": 15,
        "transition-name": Vue.unref(namespace$1.ns).join("fade-scale"),
        title: Vue.unref(t)("tk.themeEnhance.themeColor.title"),
        role: "button",
        "aria-label": Vue.unref(t)("tk.themeEnhance.themeColor.title")
      }, {
        reference: Vue.withCtx(() => [
          Vue.createVNode(Vue.unref(index_vue_vue_type_script_setup_true_name_Icon_lang.default), {
            icon: Vue.unref(magic.default),
            "aria-hidden": "true"
          }, null, 8, ["icon"])
        ]),
        default: Vue.withCtx(() => [
          (Vue.openBlock(true), Vue.createElementBlock(
            Vue.Fragment,
            null,
            Vue.renderList(Vue.unref(themeColorSelectList), (item) => {
              return Vue.openBlock(), Vue.createElementBlock("ul", {
                key: item.label
              }, [
                Vue.createElementVNode("li", {
                  class: Vue.normalizeClass(`${Vue.unref(namespace$1.ns).e("dropdown__title")} sle`),
                  title: item.tip,
                  "aria-label": item.label
                }, Vue.toDisplayString(item.label), 11, _hoisted_1),
                Vue.createElementVNode("li", null, [
                  Vue.createElementVNode("ul", null, [
                    (Vue.openBlock(true), Vue.createElementBlock(
                      Vue.Fragment,
                      null,
                      Vue.renderList(item.options, (option) => {
                        return Vue.openBlock(), Vue.createElementBlock("li", {
                          key: item.label + option.value,
                          class: Vue.normalizeClass(["dropdown-item", "sle", { active: option.value === Vue.unref(themeColorName) }]),
                          onClick: ($event) => handleChangePrimaryColor(option),
                          role: "button",
                          title: option.title,
                          "aria-label": option.ariaLabel ?? option.title ?? option.label
                        }, Vue.toDisplayString(option.label), 11, _hoisted_2);
                      }),
                      128
                      /* KEYED_FRAGMENT */
                    ))
                  ])
                ])
              ]);
            }),
            128
            /* KEYED_FRAGMENT */
          ))
        ]),
        _: 1
        /* STABLE */
      }, 8, ["class", "popper-class", "transition-name", "title", "aria-label"]);
    };
  }
});

exports.default = _sfc_main;
