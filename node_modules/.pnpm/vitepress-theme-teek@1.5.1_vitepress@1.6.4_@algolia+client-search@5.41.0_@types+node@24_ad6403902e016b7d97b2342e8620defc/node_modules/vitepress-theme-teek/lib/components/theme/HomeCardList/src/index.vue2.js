'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Vue = require('vue');
require('vitepress');
var useNamespace = require('../../../../composables/useNamespace.js');
require('vitepress-theme-teek/theme-chalk/tk-copy-banner.css');
var useWindowTransition = require('../../../../composables/useWindowTransition.js');
require('../../../../composables/useZIndex.js');
var index = require('../../ConfigProvider/index.js');
var index_vue_vue_type_script_setup_true_name_HomeMyCard_lang = require('../../HomeMyCard/src/index.vue2.js');
var index_vue_vue_type_script_setup_true_name_HomeTopArticleCard_lang = require('../../HomeTopArticleCard/src/index.vue2.js');
var index_vue_vue_type_script_setup_true_name_HomeCategoryCard_lang = require('../../HomeCategoryCard/src/index.vue2.js');
var index_vue_vue_type_script_setup_true_name_HomeTagCard_lang = require('../../HomeTagCard/src/index.vue2.js');
var index_vue_vue_type_script_setup_true_name_HomeFriendLinkCard_lang = require('../../HomeFriendLinkCard/src/index.vue2.js');
var index_vue_vue_type_script_setup_true_name_HomeDocAnalysisCard_lang = require('../../HomeDocAnalysisCard/src/index.vue2.js');

var _sfc_main = /* @__PURE__ */ Vue.defineComponent({
  ...{ name: "HomeCardList" },
  __name: "index",
  setup(__props) {
    const ns = useNamespace.useNamespace("home-card-list");
    const { getTeekConfigRef } = index.useTeekConfig();
    const teekConfig = getTeekConfigRef(null, {});
    const finalHomeCardSort = Vue.computed(() => {
      const configCardSort = teekConfig.value.homeCardSort || [];
      return ["my", .../* @__PURE__ */ new Set([...configCardSort, ...["topArticle", "category", "tag", "friendLink", "docAnalysis"]])];
    });
    const { isHomePage, isCategoriesPage, isTagsPage } = index.usePageState();
    const componentMap = Vue.computed(() => {
      const { topArticle, category, tag, docAnalysis, friendLink } = teekConfig.value;
      const homePage = isHomePage.value;
      const categoriesPage = isCategoriesPage.value;
      const tagsPage = isTagsPage.value;
      return {
        my: {
          el: index_vue_vue_type_script_setup_true_name_HomeMyCard_lang.default,
          show: homePage,
          slot: "teek-home-card-my"
        },
        topArticle: {
          el: index_vue_vue_type_script_setup_true_name_HomeTopArticleCard_lang.default,
          show: homePage && topArticle?.enabled !== false,
          slot: "teek-home-card-top-article"
        },
        category: {
          el: index_vue_vue_type_script_setup_true_name_HomeCategoryCard_lang.default,
          props: { categoriesPage },
          show: (homePage || categoriesPage) && category?.enabled !== false,
          slot: "teek-home-card-category"
        },
        tag: {
          el: index_vue_vue_type_script_setup_true_name_HomeTagCard_lang.default,
          props: { tagsPage },
          show: (homePage || tagsPage) && tag?.enabled !== false,
          slot: "teek-home-card-tag"
        },
        docAnalysis: {
          el: index_vue_vue_type_script_setup_true_name_HomeDocAnalysisCard_lang.default,
          show: homePage && docAnalysis?.enabled !== false,
          slot: "teek-home-card-doc-analysis"
        },
        friendLink: {
          el: index_vue_vue_type_script_setup_true_name_HomeFriendLinkCard_lang.default,
          show: homePage && friendLink?.enabled !== false,
          slot: "teek-home-card-friend-link"
        }
      };
    });
    const windowTransition = index.useWindowTransitionConfig((config) => config.card);
    const cardListInstance = Vue.ref(null);
    const { start } = useWindowTransition.useWindowTransition(cardListInstance, false);
    Vue.onMounted(() => {
      windowTransition.value && start();
    });
    return (_ctx, _cache) => {
      return Vue.openBlock(), Vue.createElementBlock(
        "div",
        {
          class: Vue.normalizeClass([Vue.unref(ns).b(), "flx-column"])
        },
        [
          Vue.renderSlot(_ctx.$slots, "teek-home-card-before"),
          Vue.renderSlot(_ctx.$slots, "teek-home-card", { homeCard: finalHomeCardSort.value }, () => [
            (Vue.openBlock(true), Vue.createElementBlock(
              Vue.Fragment,
              null,
              Vue.renderList(finalHomeCardSort.value, (item) => {
                return Vue.openBlock(), Vue.createElementBlock(
                  Vue.Fragment,
                  { key: item },
                  [
                    Vue.createCommentVNode(" \u4F7F\u7528\u6DE1\u5165\u52A8\u753B "),
                    Vue.unref(windowTransition) ? (Vue.openBlock(), Vue.createElementBlock(
                      Vue.Fragment,
                      { key: 0 },
                      [
                        _ctx.$slots[`${componentMap.value[item]?.slot}-before`] ? (Vue.openBlock(), Vue.createElementBlock(
                          "div",
                          {
                            key: 0,
                            ref_for: true,
                            ref_key: "cardListInstance",
                            ref: cardListInstance
                          },
                          [
                            Vue.renderSlot(_ctx.$slots, `${componentMap.value[item]?.slot}-before`)
                          ],
                          512
                          /* NEED_PATCH */
                        )) : Vue.createCommentVNode("v-if", true),
                        Vue.createElementVNode(
                          "div",
                          {
                            ref_for: true,
                            ref_key: "cardListInstance",
                            ref: cardListInstance
                          },
                          [
                            Vue.renderSlot(_ctx.$slots, componentMap.value[item]?.slot, {}, () => [
                              componentMap.value[item]?.show ? (Vue.openBlock(), Vue.createBlock(
                                Vue.resolveDynamicComponent(componentMap.value[item]?.el),
                                Vue.mergeProps({
                                  key: 0,
                                  ref_for: true
                                }, componentMap.value[item]?.props),
                                null,
                                16
                                /* FULL_PROPS */
                              )) : Vue.createCommentVNode("v-if", true)
                            ])
                          ],
                          512
                          /* NEED_PATCH */
                        ),
                        _ctx.$slots[`${componentMap.value[item]?.slot}-after`] ? (Vue.openBlock(), Vue.createElementBlock(
                          "div",
                          {
                            key: 1,
                            ref_for: true,
                            ref_key: "cardListInstance",
                            ref: cardListInstance
                          },
                          [
                            Vue.renderSlot(_ctx.$slots, `${componentMap.value[item]?.slot}-after`)
                          ],
                          512
                          /* NEED_PATCH */
                        )) : Vue.createCommentVNode("v-if", true)
                      ],
                      64
                      /* STABLE_FRAGMENT */
                    )) : (Vue.openBlock(), Vue.createElementBlock(
                      Vue.Fragment,
                      { key: 1 },
                      [
                        Vue.createCommentVNode(" \u4E0D\u4F7F\u7528\u6DE1\u5165\u52A8\u753B "),
                        componentMap.value[item]?.slot ? Vue.renderSlot(_ctx.$slots, `${componentMap.value[item]?.slot}-before`, { key: 0 }) : Vue.createCommentVNode("v-if", true),
                        componentMap.value[item]?.slot ? Vue.renderSlot(_ctx.$slots, componentMap.value[item]?.slot, { key: 1 }, () => [
                          componentMap.value[item]?.show ? (Vue.openBlock(), Vue.createBlock(
                            Vue.resolveDynamicComponent(componentMap.value[item]?.el),
                            Vue.mergeProps({
                              key: 0,
                              ref_for: true
                            }, componentMap.value[item]?.props),
                            null,
                            16
                            /* FULL_PROPS */
                          )) : Vue.createCommentVNode("v-if", true)
                        ]) : Vue.createCommentVNode("v-if", true),
                        componentMap.value[item]?.slot ? Vue.renderSlot(_ctx.$slots, `${componentMap.value[item]?.slot}-after`, { key: 2 }) : Vue.createCommentVNode("v-if", true)
                      ],
                      64
                      /* STABLE_FRAGMENT */
                    ))
                  ],
                  64
                  /* STABLE_FRAGMENT */
                );
              }),
              128
              /* KEYED_FRAGMENT */
            ))
          ]),
          Vue.renderSlot(_ctx.$slots, "teek-home-card-after")
        ],
        2
        /* CLASS */
      );
    };
  }
});

exports.default = _sfc_main;
