'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Vue = require('vue');
var vitepress = require('vitepress');
var useUvPv = require('../../../../composables/useUvPv.js');
var useNamespace = require('../../../../composables/useNamespace.js');
require('vitepress-theme-teek/theme-chalk/tk-copy-banner.css');
var useLocale = require('../../../../composables/useLocale.js');
var useVpRouter = require('../../../../composables/useVpRouter.js');
require('../../../../composables/useZIndex.js');
var reading = require('../../../../static/icons/reading.js');
var clock = require('../../../../static/icons/clock.js');
var view = require('../../../../static/icons/view.js');
var index_vue_vue_type_script_setup_true_name_ArticleBreadcrumb_lang = require('../../ArticleBreadcrumb/src/index.vue2.js');
var index = require('../../ConfigProvider/index.js');
var index_vue_vue_type_script_setup_true_name_ArticleInfo_lang = require('../../ArticleInfo/src/index.vue2.js');
var index_vue_vue_type_script_setup_true_name_Icon_lang = require('../../../common/Icon/src/index.vue2.js');
require('@iconify/vue');

const _hoisted_1 = ["aria-label"];
const _hoisted_2 = {
  key: 0,
  class: "flx-center"
};
const _hoisted_3 = ["title", "aria-label"];
const _hoisted_4 = {
  key: 1,
  class: "flx-center"
};
const _hoisted_5 = ["title", "aria-label"];
const _hoisted_6 = {
  key: 2,
  class: "flx-center"
};
const _hoisted_7 = ["title", "aria-label"];
var _sfc_main = /* @__PURE__ */ Vue.defineComponent({
  ...{ name: "ArticleAnalyze" },
  __name: "index",
  props: {
    breadcrumb: { type: Boolean, default: true },
    scope: { default: "article" }
  },
  setup(__props) {
    const ns = useNamespace.useNamespace("article-analyze");
    const { t } = useLocale.useLocale();
    const { getTeekConfig, getTeekConfigRef } = index.useTeekConfig();
    const { theme, frontmatter } = vitepress.useData();
    const vpRouter = useVpRouter.useVpRouter();
    const { router } = vpRouter;
    const post = Vue.computed(() => ({
      author: getTeekConfig("author", {}),
      date: frontmatter.value.date,
      frontmatter: frontmatter.value,
      url: "",
      relativePath: ""
    }));
    const docAnalysisInfo = Vue.computed(() => theme.value.docAnalysisInfo || {});
    const pageViewInfo = Vue.computed(() => {
      let pageViewInfo2 = {};
      docAnalysisInfo.value.eachFileWords?.forEach((item) => {
        if (item.fileInfo.relativePath === router.route.data.filePath) pageViewInfo2 = item;
      });
      return pageViewInfo2;
    });
    const articleConfig = getTeekConfigRef("articleAnalyze", {
      showInfo: true,
      showIcon: true,
      teleport: {}
    });
    const isShowInfo = Vue.computed(() => {
      const arr = [articleConfig.value.showInfo].flat();
      if (arr.includes(true) || arr.includes("article")) return true;
      return false;
    });
    const baseInfoRef = Vue.ref();
    const teleportInfo = () => {
      const { selector, position = "after", className = "teleport" } = articleConfig.value.teleport || {};
      const baseInfoRefConst = baseInfoRef.value;
      if (!selector || !baseInfoRefConst) return;
      const docDomContainer = document.querySelector("#VPContent");
      const targetDom = docDomContainer?.querySelector(selector);
      targetDom?.parentElement?.querySelectorAll(`.${ns.e("wrapper")}`).forEach((v) => v.remove());
      baseInfoRefConst.classList.add(className);
      targetDom?.[position]?.(baseInfoRefConst);
    };
    Vue.watch(router.route, () => Vue.nextTick(teleportInfo), { immediate: true, flush: "post" });
    const docAnalysisConfig = getTeekConfigRef("docAnalysis", {
      wordCount: true,
      readingTime: true,
      statistics: {}
    });
    const statisticsConfig = Vue.computed(() => ({
      url: "",
      provider: "",
      pageView: true,
      tryRequest: false,
      tryCount: 5,
      tryIterationTime: 2e3,
      permalink: true,
      ...docAnalysisConfig.value.statistics
    }));
    const usePageView = Vue.computed(() => !!statisticsConfig.value.provider && statisticsConfig.value.pageView);
    const { pagePv, isGet, request } = useUvPv.useUvPv(false, statisticsConfig.value);
    Vue.watch(usePageView, (newVal) => {
      if (newVal) request();
    });
    Vue.watch(
      router.route,
      () => {
        if (usePageView.value) {
          if (statisticsConfig.value.permalink && router.state?.permalinkPlugin) {
            Vue.nextTick(request);
          } else request();
        }
      },
      { immediate: true }
    );
    return (_ctx, _cache) => {
      return Vue.openBlock(), Vue.createElementBlock("div", {
        class: Vue.normalizeClass(`${Vue.unref(ns).b()} flx-justify-between`),
        "aria-label": Vue.unref(t)("tk.articleAnalyze.label")
      }, [
        __props.breadcrumb ? (Vue.openBlock(), Vue.createBlock(Vue.unref(index_vue_vue_type_script_setup_true_name_ArticleBreadcrumb_lang.default), { key: 0 })) : Vue.createCommentVNode("v-if", true),
        isShowInfo.value ? (Vue.openBlock(), Vue.createElementBlock(
          "div",
          {
            key: 1,
            ref_key: "baseInfoRef",
            ref: baseInfoRef,
            class: Vue.normalizeClass(`${Vue.unref(ns).e("wrapper")} flx-align-center`)
          },
          [
            Vue.createVNode(Vue.unref(index_vue_vue_type_script_setup_true_name_ArticleInfo_lang.default), {
              post: post.value,
              scope: __props.scope
            }, null, 8, ["post", "scope"]),
            Vue.unref(docAnalysisConfig).wordCount && pageViewInfo.value.wordCount ? (Vue.openBlock(), Vue.createElementBlock("div", _hoisted_2, [
              Vue.unref(articleConfig).showIcon ? (Vue.openBlock(), Vue.createBlock(Vue.unref(index_vue_vue_type_script_setup_true_name_Icon_lang.default), {
                key: 0,
                icon: Vue.unref(reading.default),
                "aria-hidden": "true"
              }, null, 8, ["icon"])) : Vue.createCommentVNode("v-if", true),
              Vue.createElementVNode("a", {
                title: Vue.unref(t)("tk.articleAnalyze.wordCount"),
                class: "hover-color",
                "aria-label": Vue.unref(t)("tk.articleAnalyze.wordCount")
              }, Vue.toDisplayString(pageViewInfo.value.wordCount), 9, _hoisted_3)
            ])) : Vue.createCommentVNode("v-if", true),
            Vue.unref(docAnalysisConfig).readingTime && pageViewInfo.value.readingTime ? (Vue.openBlock(), Vue.createElementBlock("div", _hoisted_4, [
              Vue.unref(articleConfig).showIcon ? (Vue.openBlock(), Vue.createBlock(Vue.unref(index_vue_vue_type_script_setup_true_name_Icon_lang.default), {
                key: 0,
                icon: Vue.unref(clock.default)
              }, null, 8, ["icon"])) : Vue.createCommentVNode("v-if", true),
              Vue.createElementVNode("a", {
                title: Vue.unref(t)("tk.articleAnalyze.readingTime"),
                class: "hover-color",
                "aria-label": Vue.unref(t)("tk.articleAnalyze.readingTime")
              }, Vue.toDisplayString(pageViewInfo.value.readingTime), 9, _hoisted_5)
            ])) : Vue.createCommentVNode("v-if", true),
            usePageView.value ? (Vue.openBlock(), Vue.createElementBlock("div", _hoisted_6, [
              Vue.unref(articleConfig).showIcon ? (Vue.openBlock(), Vue.createBlock(Vue.unref(index_vue_vue_type_script_setup_true_name_Icon_lang.default), {
                key: 0,
                icon: Vue.unref(view.default)
              }, null, 8, ["icon"])) : Vue.createCommentVNode("v-if", true),
              Vue.createElementVNode("a", {
                title: Vue.unref(t)("tk.articleAnalyze.pageView"),
                class: "hover-color",
                "aria-label": Vue.unref(t)("tk.articleAnalyze.pageView")
              }, Vue.toDisplayString(Vue.unref(isGet) ? Vue.unref(pagePv) : "Get..."), 9, _hoisted_7)
            ])) : Vue.createCommentVNode("v-if", true)
          ],
          2
          /* CLASS */
        )) : Vue.createCommentVNode("v-if", true)
      ], 10, _hoisted_1);
    };
  }
});

exports.default = _sfc_main;
