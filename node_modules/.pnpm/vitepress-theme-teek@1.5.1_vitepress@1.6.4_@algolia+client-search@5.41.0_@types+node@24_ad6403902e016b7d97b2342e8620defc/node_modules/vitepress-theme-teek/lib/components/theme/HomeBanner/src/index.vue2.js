'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Vue = require('vue');
var vitepress = require('vitepress');
var index = require('../../ConfigProvider/index.js');
var index$1 = require('../../../../helper/dist/index.js');
var useEventListener = require('../../../../composables/useEventListener.js');
var useNamespace = require('../../../../composables/useNamespace.js');
require('vitepress-theme-teek/theme-chalk/tk-copy-banner.css');
var useLocale = require('../../../../composables/useLocale.js');
require('../../../../composables/useZIndex.js');
var HomeBannerBgPure_vue_vue_type_script_setup_true_name_HomeBannerBgPure_lang = require('./HomeBannerBgPure.vue2.js');
var HomeBannerBgImage_vue_vue_type_script_setup_true_name_HomeBannerBgImage_lang = require('./HomeBannerBgImage.vue2.js');
var HomeBannerContent_vue_vue_type_script_setup_true_name_HomeBannerContent_lang = require('./HomeBannerContent.vue2.js');
var HomeBannerFeature_vue_vue_type_script_setup_true_name_HomeBannerFeature_lang = require('./HomeBannerFeature.vue2.js');
var HomeBannerWaves_vue_vue_type_script_setup_true_name_HomeBannerWaves_lang = require('./HomeBannerWaves.vue2.js');

const _hoisted_1 = ["aria-label"];
const fullImgNavBarKey = "full-img-nav-bar";
var _sfc_main = /* @__PURE__ */ Vue.defineComponent({
  ...{ name: "HomeBanner" },
  __name: "index",
  props: {
    disabled: { type: Boolean, default: false }
  },
  setup(__props) {
    const ns = useNamespace.useNamespace("banner");
    const { t } = useLocale.useLocale();
    const { getTeekConfigRef } = index.useTeekConfig();
    const { frontmatter } = vitepress.useData();
    const bannerConfig = getTeekConfigRef("banner", {
      bgStyle: "pure",
      imgWaves: true,
      textColor: "#ffffff",
      titleFontSize: "3.2rem",
      descFontSize: "1.4rem",
      features: frontmatter.value.tk?.features || []
    });
    const bodyBgImgConfig = getTeekConfigRef("bodyBgImg", {
      imgSrc: "",
      bannerStyle: "full"
    });
    const currentBgStyle = Vue.computed(() => {
      const { bgStyle } = bannerConfig.value;
      const { imgSrc, bannerStyle } = bodyBgImgConfig.value;
      const isBannerPureBgStyle = bgStyle === "pure";
      const isBannerPartImgBgStyle = bgStyle === "partImg";
      const isBannerFullImgBgStyle = bgStyle === "fullImg";
      const isBodyImgBgStyle = !!imgSrc;
      const isBodyPartImgBgStyle = isBodyImgBgStyle && bannerStyle === "part";
      const isBodyFullImgBgStyle = isBodyImgBgStyle && bannerStyle === "full";
      return {
        isBannerPureBgStyle,
        isBannerPartImgBgStyle,
        isBannerFullImgBgStyle,
        isBodyImgBgStyle,
        isBodyPartImgBgStyle,
        isBodyFullImgBgStyle
      };
    });
    const getStyle = () => {
      const titleTextVar = ns.cssVarName("banner-title-text");
      const descTextVar = ns.cssVarName("banner-desc-text");
      const textColorVar = ns.cssVarName("banner-text-color");
      const { titleFontSize, descFontSize, textColor } = bannerConfig.value;
      return { [titleTextVar]: titleFontSize, [descTextVar]: descFontSize, [textColorVar]: textColor };
    };
    const bannerRef = Vue.ref(null);
    const toggleFullImgNavBarClass = (add = true) => {
      const vPNavDom = document.querySelector(".VPNavBar");
      if (add) vPNavDom?.classList.add(fullImgNavBarKey);
      else vPNavDom?.classList.remove(fullImgNavBarKey);
    };
    const toggleClass = async () => {
      if (!bannerRef.value || __props.disabled) return;
      const current = currentBgStyle.value;
      if (!current.isBannerFullImgBgStyle && !current.isBodyFullImgBgStyle) return;
      await Vue.nextTick();
      const offset = current.isBodyImgBgStyle ? 0 : 100;
      const windowInBanner = document.documentElement.scrollTop + offset < document.documentElement.clientHeight;
      toggleFullImgNavBarClass(windowInBanner);
    };
    Vue.watch(
      () => __props.disabled,
      () => toggleFullImgNavBarClass(!__props.disabled)
    );
    Vue.onMounted(() => {
      if (!__props.disabled && currentBgStyle.value.isBannerFullImgBgStyle || currentBgStyle.value.isBodyFullImgBgStyle) {
        toggleClass();
        useEventListener.useEventListener(window, "scroll", toggleClass);
      }
    });
    Vue.onUnmounted(() => {
      toggleFullImgNavBarClass(false);
    });
    const className = Vue.computed(() => {
      const {
        isBannerPureBgStyle,
        isBannerPartImgBgStyle,
        isBannerFullImgBgStyle,
        isBodyPartImgBgStyle,
        isBodyFullImgBgStyle
      } = currentBgStyle.value;
      if (isBodyPartImgBgStyle) return ns.is("part-img");
      if (isBodyFullImgBgStyle) return ns.is("full-img");
      if (isBannerPureBgStyle) return ns.is("pure");
      if (isBannerPartImgBgStyle) return ns.is("part-img");
      if (isBannerFullImgBgStyle) return ns.is("full-img");
      return "";
    });
    const styleComponentMap = {
      bodyPart: { el: "div", props: { class: `body-pure` } },
      bodyFull: { el: "div", props: { class: `body-full` } },
      bannerPure: { el: HomeBannerBgPure_vue_vue_type_script_setup_true_name_HomeBannerBgPure_lang.default },
      bannerPartImg: { el: HomeBannerBgImage_vue_vue_type_script_setup_true_name_HomeBannerBgImage_lang.default },
      bannerFullImg: { el: HomeBannerBgImage_vue_vue_type_script_setup_true_name_HomeBannerBgImage_lang.default }
    };
    const styleComponent = Vue.computed(() => {
      const { isBodyImgBgStyle } = currentBgStyle.value;
      const { bgStyle } = bannerConfig.value;
      const { bannerStyle } = bodyBgImgConfig.value;
      const currentStyle = isBodyImgBgStyle ? `body${index$1.upperFirst(bannerStyle)}` : `banner${index$1.upperFirst(bgStyle)}`;
      return styleComponentMap[currentStyle];
    });
    return (_ctx, _cache) => {
      return Vue.openBlock(), Vue.createElementBlock(
        Vue.Fragment,
        null,
        [
          Vue.renderSlot(_ctx.$slots, "teek-home-banner-before"),
          Vue.createElementVNode("div", {
            ref_key: "bannerRef",
            ref: bannerRef,
            class: Vue.normalizeClass([Vue.unref(ns).b(), className.value]),
            style: Vue.normalizeStyle(getStyle()),
            "aria-label": Vue.unref(t)("tk.homeBanner.label")
          }, [
            (Vue.openBlock(), Vue.createBlock(
              Vue.resolveDynamicComponent(styleComponent.value.el),
              Vue.normalizeProps(Vue.guardReactiveProps(styleComponent.value.props)),
              {
                default: Vue.withCtx(() => [
                  Vue.createElementVNode(
                    "div",
                    {
                      class: Vue.normalizeClass([Vue.unref(ns).e("content"), { "no-feature": !Vue.unref(bannerConfig).features.length }])
                    },
                    [
                      Vue.renderSlot(_ctx.$slots, "teek-home-banner-content-before"),
                      Vue.createVNode(
                        HomeBannerContent_vue_vue_type_script_setup_true_name_HomeBannerContent_lang.default,
                        null,
                        Vue.createSlots({
                          _: 2
                          /* DYNAMIC */
                        }, [
                          Vue.renderList(_ctx.$slots, (_, name) => {
                            return {
                              name,
                              fn: Vue.withCtx((scope) => [
                                Vue.renderSlot(_ctx.$slots, name, Vue.normalizeProps(Vue.guardReactiveProps(scope)))
                              ])
                            };
                          })
                        ]),
                        1024
                        /* DYNAMIC_SLOTS */
                      ),
                      Vue.renderSlot(_ctx.$slots, "teek-home-banner-content-after"),
                      Vue.renderSlot(_ctx.$slots, "teek-home-banner-feature-before"),
                      Vue.createVNode(HomeBannerFeature_vue_vue_type_script_setup_true_name_HomeBannerFeature_lang.default),
                      Vue.renderSlot(_ctx.$slots, "teek-home-banner-feature-after")
                    ],
                    2
                    /* CLASS */
                  )
                ]),
                _: 3
                /* FORWARDED */
              },
              16
              /* FULL_PROPS */
            )),
            Vue.unref(bannerConfig).imgWaves && currentBgStyle.value.isBannerFullImgBgStyle && !currentBgStyle.value.isBodyImgBgStyle ? (Vue.openBlock(), Vue.createBlock(HomeBannerWaves_vue_vue_type_script_setup_true_name_HomeBannerWaves_lang.default, {
              key: 0,
              "aria-label": Vue.unref(t)("tk.homeBanner.wavesLabel")
            }, null, 8, ["aria-label"])) : Vue.createCommentVNode("v-if", true)
          ], 14, _hoisted_1),
          Vue.renderSlot(_ctx.$slots, "teek-home-banner-after")
        ],
        64
        /* STABLE_FRAGMENT */
      );
    };
  }
});

exports.default = _sfc_main;
