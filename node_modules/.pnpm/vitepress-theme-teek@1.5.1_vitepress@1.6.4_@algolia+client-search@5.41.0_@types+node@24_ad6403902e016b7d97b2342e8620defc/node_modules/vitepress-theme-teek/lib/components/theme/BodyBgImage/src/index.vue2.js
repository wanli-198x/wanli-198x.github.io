'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Vue = require('vue');
var vitepress = require('vitepress');
var index$1 = require('../../../../helper/dist/index.js');
var useNamespace = require('../../../../composables/useNamespace.js');
require('vitepress-theme-teek/theme-chalk/tk-copy-banner.css');
var useSwitchData = require('../../../../composables/useSwitchData.js');
require('../../../../composables/useZIndex.js');
var index = require('../../ConfigProvider/index.js');

const _hoisted_1 = {
  key: 0,
  class: "mask"
};
var _sfc_main = /* @__PURE__ */ Vue.defineComponent({
  ...{ name: "BodyBgImage" },
  __name: "index",
  setup(__props) {
    const ns = useNamespace.useNamespace("body-bg-image");
    const { getTeekConfigRef } = index.useTeekConfig();
    const bodyBgImgConfig = getTeekConfigRef("bodyBgImg", {
      imgSrc: void 0,
      imgOpacity: 1,
      imgInterval: 15e3,
      imgShuffle: false,
      mask: false,
      maskBg: "rgba(0, 0, 0, 0.2)"
    });
    const dataArray = Vue.computed(() => {
      const imgSrc = bodyBgImgConfig.value.imgSrc;
      return [index$1.isFunction(imgSrc) ? imgSrc() : imgSrc || []].flat().map((item) => item && vitepress.withBase(item));
    });
    const {
      data: imageSrc,
      start,
      index: index$2
    } = useSwitchData.useSwitchData(dataArray, {
      timeout: bodyBgImgConfig.value.imgInterval,
      shuffle: bodyBgImgConfig.value.imgShuffle,
      onAfterUpdate: () => {
        const nextIndex = (index$2.value + 1) % dataArray.value.length;
        const newValue = dataArray.value[nextIndex];
        if (newValue) {
          const img = new Image();
          img.src = newValue;
        }
      }
    });
    Vue.onMounted(() => {
      start();
    });
    const getStyle = () => {
      const { imgSrc, imgOpacity, maskBg } = bodyBgImgConfig.value;
      const imgBgVar = ns.cssVarName("body-bg-img");
      const imgBgOpacityVar = ns.cssVarName("body-bg-img-opacity");
      const maskBgColorVar = ns.cssVarName("body-mask-bg-color");
      if (!imgSrc?.length) return { [imgBgVar]: ns.cssVar("bg-img-default") };
      return {
        [imgBgVar]: `url(${imageSrc.value}) center center / cover no-repeat`,
        [imgBgOpacityVar]: imgOpacity,
        [maskBgColorVar]: index$1.isString(maskBg) ? maskBg : `rgba(0, 0, 0, ${maskBg})`
      };
    };
    return (_ctx, _cache) => {
      return Vue.openBlock(), Vue.createElementBlock(
        "div",
        {
          class: Vue.normalizeClass(Vue.unref(ns).b()),
          style: Vue.normalizeStyle(getStyle())
        },
        [
          Vue.unref(bodyBgImgConfig).mask ? (Vue.openBlock(), Vue.createElementBlock("div", _hoisted_1)) : Vue.createCommentVNode("v-if", true)
        ],
        6
        /* CLASS, STYLE */
      );
    };
  }
});

exports.default = _sfc_main;
