'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Vue = require('vue');
var namespace = require('../namespace.js');
var index_vue_vue_type_script_setup_true_name_Icon_lang = require('../../../../common/Icon/src/index.vue2.js');
require('@iconify/vue');
var Title_vue_vue_type_script_setup_true_name_Title_lang = require('./Title.vue2.js');
var Helper_vue_vue_type_script_setup_true_name_Helper_lang = require('./Helper.vue2.js');
var BorderHighlight_vue_vue_type_script_setup_true_name_BorderHighlight_lang = require('./BorderHighlight.vue2.js');

const _hoisted_1 = {
  class: "flx-align-center",
  style: { "margin-bottom": "6px" }
};
const _hoisted_2 = {
  key: 1,
  style: { "font-weight": "600" }
};
const _hoisted_3 = { key: 0 };
const _hoisted_4 = {
  key: 1,
  style: { "margin-top": "8px" }
};
var _sfc_main = /* @__PURE__ */ Vue.defineComponent({
  ...{ name: "BaseTemplate" },
  __name: "BaseTemplate",
  props: {
    title: {},
    helperDesc: {},
    icon: {},
    tips: {},
    disabled: { type: Boolean },
    helper: { type: Boolean },
    borderHighlight: { type: Boolean, default: true }
  },
  setup(__props) {
    const helperVisible = Vue.ref(false);
    const titleElementRef = Vue.ref();
    return (_ctx, _cache) => {
      return Vue.openBlock(), Vue.createElementBlock("div", null, [
        Vue.createElementVNode(
          "div",
          {
            ref_key: "titleElementRef",
            ref: titleElementRef,
            class: "flx-align-center"
          },
          [
            Vue.createVNode(Title_vue_vue_type_script_setup_true_name_Title_lang.default, {
              title: __props.title,
              icon: __props.icon,
              disabled: __props.disabled,
              "aria-label": __props.title
            }, {
              default: Vue.withCtx(() => [
                Vue.renderSlot(_ctx.$slots, "title")
              ]),
              _: 3
              /* FORWARDED */
            }, 8, ["title", "icon", "disabled", "aria-label"]),
            __props.helper ? (Vue.openBlock(), Vue.createBlock(Helper_vue_vue_type_script_setup_true_name_Helper_lang.default, {
              key: 0,
              modelValue: helperVisible.value,
              "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => helperVisible.value = $event),
              "trigger-el": titleElementRef.value
            }, {
              default: Vue.withCtx(() => [
                Vue.createElementVNode(
                  "div",
                  {
                    class: Vue.normalizeClass(Vue.unref(namespace.ns).e("helper__body"))
                  },
                  [
                    Vue.createElementVNode(
                      "h4",
                      {
                        class: Vue.normalizeClass(Vue.unref(namespace.ns).em("helper", "title"))
                      },
                      [
                        Vue.renderSlot(_ctx.$slots, "helper-title", {}, () => [
                          Vue.createTextVNode(
                            Vue.toDisplayString(__props.title),
                            1
                            /* TEXT */
                          )
                        ])
                      ],
                      2
                      /* CLASS */
                    ),
                    Vue.createElementVNode(
                      "p",
                      {
                        class: Vue.normalizeClass(Vue.unref(namespace.ns).em("helper", "desc"))
                      },
                      [
                        Vue.renderSlot(_ctx.$slots, "helper-desc", {}, () => [
                          Vue.createTextVNode(
                            Vue.toDisplayString(__props.helperDesc),
                            1
                            /* TEXT */
                          )
                        ])
                      ],
                      2
                      /* CLASS */
                    ),
                    (Vue.openBlock(true), Vue.createElementBlock(
                      Vue.Fragment,
                      null,
                      Vue.renderList(__props.tips, (tip, index) => {
                        return Vue.openBlock(), Vue.createElementBlock(
                          "div",
                          {
                            key: index,
                            class: Vue.normalizeClass(Vue.unref(namespace.ns).e("helper__body__tip"))
                          },
                          [
                            Vue.createElementVNode("div", _hoisted_1, [
                              tip.icon ? (Vue.openBlock(), Vue.createBlock(Vue.unref(index_vue_vue_type_script_setup_true_name_Icon_lang.default), {
                                key: 0,
                                icon: tip.icon,
                                size: 16,
                                style: { "margin-right": "4px" }
                              }, null, 8, ["icon"])) : Vue.createCommentVNode("v-if", true),
                              tip.title ? (Vue.openBlock(), Vue.createElementBlock(
                                "span",
                                _hoisted_2,
                                Vue.toDisplayString(tip.title),
                                1
                                /* TEXT */
                              )) : Vue.createCommentVNode("v-if", true)
                            ]),
                            tip.content ? (Vue.openBlock(), Vue.createElementBlock(
                              "span",
                              _hoisted_3,
                              Vue.toDisplayString(tip.content),
                              1
                              /* TEXT */
                            )) : Vue.createCommentVNode("v-if", true)
                          ],
                          2
                          /* CLASS */
                        );
                      }),
                      128
                      /* KEYED_FRAGMENT */
                    ))
                  ],
                  2
                  /* CLASS */
                )
              ]),
              _: 3
              /* FORWARDED */
            }, 8, ["modelValue", "trigger-el"])) : Vue.createCommentVNode("v-if", true)
          ],
          512
          /* NEED_PATCH */
        ),
        __props.borderHighlight ? (Vue.openBlock(), Vue.createBlock(BorderHighlight_vue_vue_type_script_setup_true_name_BorderHighlight_lang.default, {
          key: 0,
          active: helperVisible.value,
          style: { "margin-top": "8px" }
        }, {
          default: Vue.withCtx(() => [
            Vue.renderSlot(_ctx.$slots, "default")
          ]),
          _: 3
          /* FORWARDED */
        }, 8, ["active"])) : (Vue.openBlock(), Vue.createElementBlock("div", _hoisted_4, [
          Vue.renderSlot(_ctx.$slots, "default")
        ]))
      ]);
    };
  }
});

exports.default = _sfc_main;
