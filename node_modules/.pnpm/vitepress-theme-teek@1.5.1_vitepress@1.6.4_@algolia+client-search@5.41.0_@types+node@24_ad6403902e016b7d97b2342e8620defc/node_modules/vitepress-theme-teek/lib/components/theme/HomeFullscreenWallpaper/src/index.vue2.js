'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Vue = require('vue');
var useEventListener = require('../../../../composables/useEventListener.js');
require('vitepress');
var useNamespace = require('../../../../composables/useNamespace.js');
require('vitepress-theme-teek/theme-chalk/tk-copy-banner.css');
require('../../../../composables/useZIndex.js');
var index = require('../../ConfigProvider/index.js');

var _sfc_main = /* @__PURE__ */ Vue.defineComponent({
  ...{ name: "HomeFullscreenWallpaper" },
  __name: "index",
  setup(__props) {
    const ns = useNamespace.useNamespace("fullscreen-wallpaper");
    const { getTeekConfigRef } = index.useTeekConfig();
    const isFullscreen = Vue.ref(false);
    const wallpaperConfig = getTeekConfigRef("wallpaper", {
      hideBanner: false,
      hideMask: false
    });
    const handleKeyDown = (event) => {
      if (event.key === "F12" && isFullscreen.value) return event.preventDefault();
      if (event.key === "I" && event.ctrlKey && event.shiftKey && isFullscreen.value) return event.preventDefault();
      if (event.key === "F11") {
        event.preventDefault();
        if (document.documentElement.requestFullscreen) {
          document.documentElement.requestFullscreen();
        } else if (document.documentElement.mozRequestFullScreen) {
          document.documentElement.mozRequestFullScreen();
        } else if (document.documentElement.webkitRequestFullscreen) {
          document.documentElement.webkitRequestFullscreen();
        } else if (document.documentElement.msRequestFullscreen) {
          document.documentElement.msRequestFullscreen();
        }
      }
    };
    const handleFullscreenChange = () => {
      const htmlDom = document.documentElement;
      if (htmlDom.scrollTop !== 0) return;
      const vpDocDom = document.querySelector(".vp-doc");
      const bannerContentDom = document.querySelector(`.${ns.join("banner__content")}`);
      const wavesDom = document.querySelector(`.${ns.join("banner-waves")}`);
      const bodyBgImageMaskDom = document.querySelector(`.${ns.join("body-bg-image")} .mask`);
      const bannerMaskDom = document.querySelector(`.${ns.join("banner-bg-image")} .mask`);
      isFullscreen.value = !!document.fullscreenElement;
      const { hideBanner, hideMask } = wallpaperConfig.value;
      const options = [
        { el: htmlDom, executeClass: ns.b() },
        { el: vpDocDom, executeClass: "display-none" },
        { el: bannerContentDom, executeClass: "no-feature" },
        {
          el: bannerContentDom,
          executeClass: "display-none",
          execute: hideBanner
        },
        { el: wavesDom, executeClass: "display-none", execute: hideBanner },
        { el: bodyBgImageMaskDom, executeClass: "display-none", execute: hideMask },
        { el: bannerMaskDom, executeClass: "display-none", execute: hideMask }
      ];
      addOrRemoveClass(!!document.fullscreenElement, options);
    };
    const addOrRemoveClass = (add, options) => {
      if (add) {
        options.forEach((item) => {
          if (item.execute !== false) item.executeClass && item.el?.classList.add(item.executeClass);
          else item.notExecuteClass && item.el?.classList.add(item.notExecuteClass);
        });
        return;
      }
      options.forEach((item) => {
        if (item.execute !== false) item.executeClass && item.el?.classList.remove(item.executeClass);
        else item.notExecuteClass && item.el?.classList.remove(item.notExecuteClass);
      });
    };
    const handleContextMenu = (event) => {
      if (isFullscreen.value) event.preventDefault();
    };
    const getDocument = () => document;
    useEventListener.useEventListener(getDocument, "keydown", handleKeyDown);
    useEventListener.useEventListener(getDocument, "fullscreenchange", handleFullscreenChange);
    useEventListener.useEventListener(getDocument, "contextmenu", handleContextMenu);
    return (_ctx, _cache) => {
      return Vue.openBlock(), Vue.createElementBlock(
        "div",
        {
          class: Vue.normalizeClass(Vue.unref(ns).b())
        },
        null,
        2
        /* CLASS */
      );
    };
  }
});

exports.default = _sfc_main;
