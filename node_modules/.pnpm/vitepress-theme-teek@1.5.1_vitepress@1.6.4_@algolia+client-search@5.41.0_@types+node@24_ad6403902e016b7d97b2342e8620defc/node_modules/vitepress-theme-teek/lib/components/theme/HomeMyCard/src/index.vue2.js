'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Vue = require('vue');
var vitepress = require('vitepress');
var index$1 = require('../../../../helper/dist/index.js');
var useNamespace = require('../../../../composables/useNamespace.js');
require('vitepress-theme-teek/theme-chalk/tk-copy-banner.css');
var useLocale = require('../../../../composables/useLocale.js');
require('../../../../composables/useZIndex.js');
var index = require('../../ConfigProvider/index.js');
var index_vue_vue_type_script_setup_true_name_PageCard_lang = require('../../../common/PageCard/src/index.vue2.js');
var index_vue_vue_type_script_setup_true_name_Avatar_lang = require('../../../common/Avatar/src/index.vue2.js');
var index_vue_vue_type_script_setup_true_name_Icon_lang = require('../../../common/Icon/src/index.vue2.js');
require('@iconify/vue');

const _hoisted_1 = ["aria-label"];
const _hoisted_2 = ["href", "title", "aria-label"];
const _hoisted_3 = ["aria-label"];
const _hoisted_4 = { class: "name" };
const _hoisted_5 = { class: "slogan" };
var _sfc_main = /* @__PURE__ */ Vue.defineComponent({
  ...{ name: "HomeMyCard" },
  __name: "index",
  setup(__props) {
    const ns = useNamespace.useNamespace("my");
    const { t } = useLocale.useLocale();
    const { getTeekConfigRef } = index.useTeekConfig();
    const bloggerConfig = getTeekConfigRef("blogger", { shape: "square", circleBgMask: true });
    const socialConfig = getTeekConfigRef("social", []);
    const shape = Vue.computed(() => bloggerConfig.value.shape.replace(/-.*$/, ""));
    const isCircleBgImg = Vue.computed(() => shape.value === "circle" && !!bloggerConfig.value.circleBgImg);
    const avatarBgStyle = Vue.computed(() => ({ backgroundImage: `url(${vitepress.withBase(bloggerConfig.value.circleBgImg)})` }));
    const myCardColorStyle = Vue.computed(() => ({ color: bloggerConfig.value.color }));
    const isSrc = Vue.computed(() => {
      const icon = bloggerConfig.value.status?.icon;
      if (!icon) return false;
      return index$1.isValidURL(icon) || icon.startsWith("/");
    });
    return (_ctx, _cache) => {
      return Vue.unref(bloggerConfig).name ? (Vue.openBlock(), Vue.createBlock(Vue.unref(index_vue_vue_type_script_setup_true_name_PageCard_lang.default), {
        key: 0,
        class: Vue.normalizeClass([Vue.unref(ns).b(), Vue.unref(ns).is("circle-bg", isCircleBgImg.value)]),
        style: Vue.normalizeStyle(myCardColorStyle.value),
        "aria-label": Vue.unref(t)("tk.myCard.label")
      }, {
        default: Vue.withCtx(() => [
          isCircleBgImg.value ? (Vue.openBlock(), Vue.createElementBlock(
            "div",
            {
              key: 0,
              class: Vue.normalizeClass([Vue.unref(ns).em("avatar__circle", "bg"), Vue.unref(ns).is("mask", Vue.unref(bloggerConfig).circleBgMask)]),
              style: Vue.normalizeStyle(avatarBgStyle.value)
            },
            null,
            6
            /* CLASS, STYLE */
          )) : Vue.createCommentVNode("v-if", true),
          Vue.createElementVNode(
            "div",
            {
              class: Vue.normalizeClass(`${Vue.unref(ns).e("avatar")} ${Vue.unref(bloggerConfig).shape} flx-center`)
            },
            [
              Vue.createElementVNode("div", null, [
                Vue.unref(bloggerConfig).avatar ? (Vue.openBlock(), Vue.createBlock(Vue.unref(index_vue_vue_type_script_setup_true_name_Avatar_lang.default), {
                  key: 0,
                  src: Vue.unref(vitepress.withBase)(Vue.unref(bloggerConfig).avatar),
                  size: Vue.unref(bloggerConfig).shape === "square" ? "100%" : Vue.unref(bloggerConfig).circleSize ?? 100,
                  shape: shape.value,
                  "bg-color": "transparent",
                  alt: Vue.unref(t)("tk.myCard.avatarAlt"),
                  title: Vue.unref(t)("tk.myCard.avatarTitle"),
                  "aria-hidden": "true"
                }, null, 8, ["src", "size", "shape", "alt", "title"])) : (Vue.openBlock(), Vue.createBlock(Vue.unref(index_vue_vue_type_script_setup_true_name_Avatar_lang.default), {
                  key: 1,
                  size: Vue.unref(bloggerConfig).circleSize ?? 100,
                  shape: shape.value,
                  text: Vue.unref(bloggerConfig).name,
                  "text-size": 50,
                  "bg-color": Vue.unref(ns).cssVar("theme-color"),
                  "aria-hidden": "true"
                }, null, 8, ["size", "shape", "text", "bg-color"])),
                Vue.unref(bloggerConfig).status?.icon && shape.value?.startsWith("circle") ? (Vue.openBlock(), Vue.createBlock(Vue.unref(index_vue_vue_type_script_setup_true_name_Avatar_lang.default), {
                  key: 2,
                  src: isSrc.value ? Vue.unref(bloggerConfig).status.icon : "",
                  text: Vue.unref(bloggerConfig).status.icon,
                  size: Vue.unref(bloggerConfig).status.size ?? 26,
                  "icon-size": Vue.unref(bloggerConfig).status.size ?? 26,
                  "text-size": Vue.unref(bloggerConfig).status.size ?? 26,
                  title: Vue.unref(bloggerConfig).status.title,
                  circle: "",
                  "bg-color": "transparent",
                  class: "avatar-sticker",
                  "aria-hidden": "true"
                }, null, 8, ["src", "text", "size", "icon-size", "text-size", "title"])) : Vue.createCommentVNode("v-if", true)
              ])
            ],
            2
            /* CLASS */
          ),
          Vue.unref(socialConfig).length ? (Vue.openBlock(), Vue.createElementBlock("div", {
            key: 1,
            class: Vue.normalizeClass(`${Vue.unref(ns).e("icons")} flx-justify-around`),
            "aria-label": Vue.unref(t)("tk.myCard.socialLabel")
          }, [
            (Vue.openBlock(true), Vue.createElementBlock(
              Vue.Fragment,
              null,
              Vue.renderList(Vue.unref(socialConfig), (item, index) => {
                return Vue.openBlock(), Vue.createElementBlock("a", {
                  key: index,
                  href: item.link && Vue.unref(vitepress.withBase)(item.link),
                  title: item.name,
                  target: "_blank",
                  "aria-label": item.name
                }, [
                  item.icon ? (Vue.openBlock(), Vue.createBlock(Vue.unref(index_vue_vue_type_script_setup_true_name_Icon_lang.default), {
                    key: 0,
                    iconType: item.iconType,
                    icon: item.icon,
                    size: "20px",
                    hover: "",
                    imgAlt: item.imgAlt,
                    "aria-hidden": "true"
                  }, null, 8, ["iconType", "icon", "imgAlt"])) : Vue.createCommentVNode("v-if", true)
                ], 8, _hoisted_2);
              }),
              128
              /* KEYED_FRAGMENT */
            ))
          ], 10, _hoisted_1)) : Vue.createCommentVNode("v-if", true),
          Vue.createElementVNode("div", {
            class: Vue.normalizeClass(Vue.unref(ns).e("blogger")),
            "aria-label": Vue.unref(t)("tk.myCard.bloggerLabel")
          }, [
            Vue.createElementVNode(
              "h3",
              _hoisted_4,
              Vue.toDisplayString(Vue.unref(bloggerConfig).name),
              1
              /* TEXT */
            ),
            Vue.createElementVNode(
              "span",
              _hoisted_5,
              Vue.toDisplayString(Vue.unref(bloggerConfig).slogan),
              1
              /* TEXT */
            )
          ], 10, _hoisted_3)
        ]),
        _: 1
        /* STABLE */
      }, 8, ["class", "style", "aria-label"])) : Vue.createCommentVNode("v-if", true);
    };
  }
});

exports.default = _sfc_main;
