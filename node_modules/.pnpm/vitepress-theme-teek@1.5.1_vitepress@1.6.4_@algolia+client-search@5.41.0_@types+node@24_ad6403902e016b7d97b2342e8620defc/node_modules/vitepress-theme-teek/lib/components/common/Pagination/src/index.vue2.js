'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Vue = require('vue');
require('vitepress');
var useNamespace = require('../../../../composables/useNamespace.js');
require('vitepress-theme-teek/theme-chalk/tk-copy-banner.css');
require('../../../../composables/useZIndex.js');
var arrowLeft = require('../../../../static/icons/arrowLeft.js');
var arrowRight = require('../../../../static/icons/arrowRight.js');
var pagination = require('./pagination.js');
var prev_vue_vue_type_script_setup_true_lang = require('./components/prev.vue2.js');
var next_vue_vue_type_script_setup_true_lang = require('./components/next.vue2.js');
var jumper_vue_vue_type_script_setup_true_lang = require('./components/jumper.vue2.js');
var total_vue_vue_type_script_setup_true_lang = require('./components/total.vue2.js');
var pager_vue_vue_type_script_setup_true_lang = require('./components/pager.vue2.js');

var _sfc_main = /* @__PURE__ */ Vue.defineComponent({
  ...{ name: "Pagination" },
  __name: "index",
  props: /* @__PURE__ */ Vue.mergeModels({
    total: {},
    pageCount: {},
    pagerCount: { default: 7 },
    layout: { default: ["prev, pager, next, jumper, ->, total"].join(", ") },
    prevText: {},
    prevIcon: { default: () => arrowLeft.default },
    nextText: {},
    nextIcon: { default: () => arrowRight.default },
    size: { default: "default" },
    background: { type: Boolean, default: false },
    disabled: { type: Boolean, default: false },
    hideOnSinglePage: { type: Boolean, default: false }
  }, {
    "currentPage": { type: Number, default: 1 },
    "currentPageModifiers": {},
    "pageSize": { type: Number, default: 10 },
    "pageSizeModifiers": {}
  }),
  emits: /* @__PURE__ */ Vue.mergeModels(["size-change", "change", "current-change", "prev-click", "next-click"], ["update:currentPage", "update:pageSize"]),
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emit = __emit;
    const ns = useNamespace.useNamespace("pagination");
    const slots = Vue.useSlots();
    const currentPageModel = Vue.useModel(__props, "currentPage");
    const pageSizeModel = Vue.useModel(__props, "pageSize");
    const isAbsent = (v) => typeof v !== "number";
    const pageCountBridge = Vue.computed(() => {
      let pageCount = 0;
      if (!isAbsent(props.pageCount)) pageCount = props.pageCount;
      else if (!isAbsent(props.total)) pageCount = Math.max(1, Math.ceil(props.total / pageSizeModel.value));
      return pageCount;
    });
    Vue.watch(pageCountBridge, (val) => {
      if (currentPageModel.value > val) currentPageModel.value = val;
    });
    Vue.watch(
      [currentPageModel, pageSizeModel],
      (value) => {
        emit("change", ...value);
      },
      { flush: "post" }
    );
    const handleSizeChange = (val) => {
      pageSizeModel.value = val;
      emit("size-change", pageSizeModel.value);
      const newPageCount = pageCountBridge.value;
      if (currentPageModel.value > newPageCount) currentPageModel.value = newPageCount;
    };
    const prev = () => {
      if (props.disabled) return;
      handleCurrentChange(currentPageModel.value - 1);
      emit("prev-click", currentPageModel.value);
    };
    const next = () => {
      if (props.disabled) return;
      handleCurrentChange(currentPageModel.value + 1);
      emit("next-click", currentPageModel.value);
    };
    const handleCurrentChange = (val) => {
      currentPageModel.value = val;
      const newPageCount = pageCountBridge.value;
      if (currentPageModel.value < 1) currentPageModel.value = 1;
      else if (currentPageModel.value > newPageCount) currentPageModel.value = newPageCount;
      emit("current-change", currentPageModel.value);
    };
    const addClass = (element, cls) => {
      if (element) {
        if (!element.props) element.props = {};
        element.props.class = [element.props.class, cls].join(" ");
      }
    };
    Vue.provide(pagination.paginationKey, {
      pageCount: pageCountBridge,
      disabled: Vue.computed(() => props.disabled),
      currentPage: currentPageModel,
      changeEvent: handleCurrentChange,
      handleSizeChange
    });
    const components = Vue.computed(() => {
      if (!props.layout) return [];
      if (props.hideOnSinglePage && pageCountBridge.value <= 1) return [];
      const components2 = props.layout.split(",").map((item) => item.trim());
      const rootChildren = [];
      const rightWrapperChildren = [];
      const rightWrapperRoot = Vue.h("div", { class: ns.e("right-wrapper") }, rightWrapperChildren);
      let haveRightWrapper = false;
      components2.forEach((c) => {
        if (c === "->") {
          haveRightWrapper = true;
          return;
        }
        if (!haveRightWrapper) rootChildren.push(componentMap.value[c]);
        else rightWrapperChildren.push(componentMap.value[c]);
      });
      addClass(rootChildren[0], ns.is("first"));
      addClass(rootChildren[rootChildren.length - 1], ns.is("last"));
      if (rightWrapperChildren.length > 0) {
        addClass(rightWrapperChildren[0], ns.is("first"));
        addClass(rightWrapperChildren[rightWrapperChildren.length - 1], ns.is("last"));
        rootChildren.push(rightWrapperRoot);
      }
      return rootChildren;
    });
    const componentMap = Vue.computed(() => ({
      prev: Vue.h(prev_vue_vue_type_script_setup_true_lang.default, {
        disabled: props.disabled,
        currentPage: currentPageModel.value,
        prevText: props.prevText,
        prevIcon: props.prevIcon,
        onClick: prev
      }),
      jumper: Vue.h(jumper_vue_vue_type_script_setup_true_lang.default, {
        size: props.size
      }),
      pager: Vue.h(pager_vue_vue_type_script_setup_true_lang.default, {
        currentPage: currentPageModel.value,
        pageCount: pageCountBridge.value,
        pagerCount: props.pagerCount,
        onChange: handleCurrentChange,
        disabled: props.disabled
      }),
      next: Vue.h(next_vue_vue_type_script_setup_true_lang.default, {
        disabled: props.disabled,
        currentPage: currentPageModel.value,
        pageCount: pageCountBridge.value,
        nextText: props.nextText,
        nextIcon: props.nextIcon,
        onClick: next
      }),
      slot: slots?.default?.() ?? null,
      total: Vue.h(total_vue_vue_type_script_setup_true_lang.default, { total: isAbsent(props.total) ? 0 : props.total })
    }));
    return (_ctx, _cache) => {
      return Vue.openBlock(), Vue.createElementBlock(
        "div",
        {
          class: Vue.normalizeClass([Vue.unref(ns).b(), Vue.unref(ns).is("background", __props.background), Vue.unref(ns).m(__props.size)])
        },
        [
          (Vue.openBlock(true), Vue.createElementBlock(
            Vue.Fragment,
            null,
            Vue.renderList(components.value, (component) => {
              return Vue.openBlock(), Vue.createBlock(Vue.resolveDynamicComponent(component), { key: component });
            }),
            128
            /* KEYED_FRAGMENT */
          ))
        ],
        2
        /* CLASS */
      );
    };
  }
});

exports.default = _sfc_main;
