'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Vue = require('vue');
require('vitepress');
require('vitepress-theme-teek/theme-chalk/tk-copy-banner.css');
var useLocale = require('../../../../../composables/useLocale.js');
require('../../../../../composables/useZIndex.js');
var index_vue_vue_type_script_setup_true_name_Icon_lang = require('../../../Icon/src/index.vue2.js');
require('@iconify/vue');

const _hoisted_1 = ["disabled", "aria-label", "aria-disabled"];
const _hoisted_2 = { key: 0 };
var _sfc_main = /* @__PURE__ */ Vue.defineComponent({
  ...{ name: "PaginationNext" },
  __name: "next",
  props: {
    disabled: { type: Boolean },
    currentPage: {},
    pageCount: {},
    nextText: {},
    nextIcon: {}
  },
  emits: ["click"],
  setup(__props) {
    const props = __props;
    const { t } = useLocale.useLocale();
    const internalDisabled = Vue.computed(
      () => props.disabled || props.currentPage === props.pageCount || props.pageCount === 0
    );
    return (_ctx, _cache) => {
      return Vue.openBlock(), Vue.createElementBlock("button", {
        type: "button",
        class: "btn-next",
        disabled: internalDisabled.value,
        "aria-label": __props.nextText || Vue.unref(t)("tk.pagination.next"),
        "aria-disabled": internalDisabled.value,
        onClick: _cache[0] || (_cache[0] = ($event) => _ctx.$emit("click", $event))
      }, [
        __props.nextText ? (Vue.openBlock(), Vue.createElementBlock(
          "span",
          _hoisted_2,
          Vue.toDisplayString(__props.nextText),
          1
          /* TEXT */
        )) : __props.nextIcon ? (Vue.openBlock(), Vue.createBlock(Vue.unref(index_vue_vue_type_script_setup_true_name_Icon_lang.default), {
          key: 1,
          icon: __props.nextIcon
        }, null, 8, ["icon"])) : Vue.createCommentVNode("v-if", true)
      ], 8, _hoisted_1);
    };
  }
});

exports.default = _sfc_main;
