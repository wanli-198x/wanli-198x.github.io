'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Vue = require('vue');
require('vitepress');
var useNamespace = require('../../../../../composables/useNamespace.js');
require('vitepress-theme-teek/theme-chalk/tk-copy-banner.css');
var useLocale = require('../../../../../composables/useLocale.js');
require('../../../../../composables/useZIndex.js');
var dArrowRight = require('../../../../../static/icons/dArrowRight.js');
var dArrowLeft = require('../../../../../static/icons/dArrowLeft.js');
var moreFilled = require('../../../../../static/icons/moreFilled.js');

const _hoisted_1 = ["aria-current", "aria-label", "tabindex"];
const _hoisted_2 = ["tabindex", "aria-label"];
const _hoisted_3 = ["innerHTML"];
const _hoisted_4 = ["innerHTML"];
const _hoisted_5 = ["aria-current", "aria-label", "tabindex"];
const _hoisted_6 = ["tabindex", "aria-label"];
const _hoisted_7 = ["innerHTML"];
const _hoisted_8 = ["innerHTML"];
const _hoisted_9 = ["aria-current", "aria-label", "tabindex"];
var _sfc_main = /* @__PURE__ */ Vue.defineComponent({
  ...{ name: "PaginationPager" },
  __name: "pager",
  props: {
    currentPage: {},
    pageCount: {},
    pagerCount: {},
    disabled: { type: Boolean }
  },
  emits: ["change"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emit = __emit;
    const nsPager = useNamespace.useNamespace("pager");
    const nsIcon = useNamespace.useNamespace("icon");
    const { t } = useLocale.useLocale();
    const showPrevMore = Vue.ref(false);
    const showNextMore = Vue.ref(false);
    const quickPrevHover = Vue.ref(false);
    const quickNextHover = Vue.ref(false);
    const quickPrevFocus = Vue.ref(false);
    const quickNextFocus = Vue.ref(false);
    const pagers = Vue.computed(() => {
      const pagerCount = props.pagerCount || 7;
      const halfPagerCount = (pagerCount - 1) / 2;
      const currentPage = Number(props.currentPage);
      const pageCount = Number(props.pageCount);
      let showPrevMore2 = false;
      let showNextMore2 = false;
      if (pageCount > pagerCount) {
        if (currentPage > pagerCount - halfPagerCount) showPrevMore2 = true;
        if (currentPage < pageCount - halfPagerCount) showNextMore2 = true;
      }
      const array = [];
      if (showPrevMore2 && !showNextMore2) {
        const startPage = pageCount - (pagerCount - 2);
        for (let i = startPage; i < pageCount; i++) {
          array.push(i);
        }
      } else if (!showPrevMore2 && showNextMore2) {
        for (let i = 2; i < pagerCount; i++) {
          array.push(i);
        }
      } else if (showPrevMore2 && showNextMore2) {
        const offset = Math.floor(pagerCount / 2) - 1;
        for (let i = currentPage - offset; i <= currentPage + offset; i++) {
          array.push(i);
        }
      } else {
        for (let i = 2; i < pageCount; i++) {
          array.push(i);
        }
      }
      return array;
    });
    const prevMoreKls = Vue.computed(() => ["more", "btn-quick-prev", nsIcon.b(), nsPager.is("disabled", props.disabled)]);
    const nextMoreKls = Vue.computed(() => ["more", "btn-quick-next", nsIcon.b(), nsPager.is("disabled", props.disabled)]);
    const tabindex = Vue.computed(() => props.disabled ? -1 : 0);
    Vue.watchEffect(() => {
      const halfPagerCount = (props.pagerCount - 1) / 2;
      showPrevMore.value = false;
      showNextMore.value = false;
      if (props.pageCount > props.pagerCount) {
        if (props.currentPage > props.pagerCount - halfPagerCount) showPrevMore.value = true;
        if (props.currentPage < props.pageCount - halfPagerCount) showNextMore.value = true;
      }
    });
    const onMouseEnter = (forward = false) => {
      if (props.disabled) return;
      if (forward) quickPrevHover.value = true;
      else quickNextHover.value = true;
    };
    const onFocus = (forward = false) => {
      if (forward) quickPrevFocus.value = true;
      else quickNextFocus.value = true;
    };
    const onEnter = (e) => {
      const target = e.target;
      if (target.tagName.toLowerCase() === "li" && Array.from(target.classList).includes("number")) {
        const newPage = Number(target.textContent);
        if (newPage !== props.currentPage) emit("change", newPage);
      } else if (target.tagName.toLowerCase() === "li" && Array.from(target.classList).includes("more")) {
        onPagerClick(e);
      }
    };
    const onPagerClick = (event) => {
      const target = event.target;
      if (target.tagName.toLowerCase() === "ul" || props.disabled) return;
      let newPage = Number(target.textContent);
      const pageCount = props.pageCount;
      const currentPage = props.currentPage;
      const pagerCountOffset = props.pagerCount - 2;
      if (target.className.includes("more")) {
        if (target.className.includes("quick-prev")) newPage = currentPage - pagerCountOffset;
        else if (target.className.includes("quick-next")) newPage = currentPage + pagerCountOffset;
      }
      if (!Number.isNaN(+newPage)) {
        if (newPage < 1) newPage = 1;
        if (newPage > pageCount) newPage = pageCount;
      }
      if (newPage !== currentPage) emit("change", newPage);
    };
    return (_ctx, _cache) => {
      return Vue.openBlock(), Vue.createElementBlock(
        "ul",
        {
          class: Vue.normalizeClass(Vue.unref(nsPager).b()),
          onClick: onPagerClick,
          onKeyup: Vue.withKeys(onEnter, ["enter"])
        },
        [
          __props.pageCount > 0 ? (Vue.openBlock(), Vue.createElementBlock("li", {
            key: 0,
            class: Vue.normalizeClass([[Vue.unref(nsPager).is("active", __props.currentPage === 1), Vue.unref(nsPager).is("disabled", __props.disabled)], "number"]),
            "aria-current": __props.currentPage === 1,
            "aria-label": Vue.unref(t)("tk.pagination.currentPage", { pager: 1 }),
            tabindex: tabindex.value
          }, " 1 ", 10, _hoisted_1)) : Vue.createCommentVNode("v-if", true),
          showPrevMore.value ? (Vue.openBlock(), Vue.createElementBlock("li", {
            key: 1,
            class: Vue.normalizeClass(prevMoreKls.value),
            tabindex: tabindex.value,
            "aria-label": Vue.unref(t)("tk.pagination.prevPages", { pager: __props.pagerCount - 2 }),
            onMouseenter: _cache[0] || (_cache[0] = ($event) => onMouseEnter(true)),
            onMouseleave: _cache[1] || (_cache[1] = ($event) => quickPrevHover.value = false),
            onFocus: _cache[2] || (_cache[2] = ($event) => onFocus(true)),
            onBlur: _cache[3] || (_cache[3] = ($event) => quickPrevFocus.value = false)
          }, [
            (quickPrevHover.value || quickPrevFocus.value) && !__props.disabled ? (Vue.openBlock(), Vue.createElementBlock("span", {
              key: 0,
              innerHTML: Vue.unref(dArrowLeft.default)
            }, null, 8, _hoisted_3)) : (Vue.openBlock(), Vue.createElementBlock("span", {
              key: 1,
              innerHTML: Vue.unref(moreFilled.default)
            }, null, 8, _hoisted_4))
          ], 42, _hoisted_2)) : Vue.createCommentVNode("v-if", true),
          (Vue.openBlock(true), Vue.createElementBlock(
            Vue.Fragment,
            null,
            Vue.renderList(pagers.value, (pager) => {
              return Vue.openBlock(), Vue.createElementBlock("li", {
                key: pager,
                class: Vue.normalizeClass([[Vue.unref(nsPager).is("active", __props.currentPage === pager), Vue.unref(nsPager).is("disabled", __props.disabled)], "number"]),
                "aria-current": __props.currentPage === pager,
                "aria-label": Vue.unref(t)("el.pagination.currentPage", { pager }),
                tabindex: tabindex.value
              }, Vue.toDisplayString(pager), 11, _hoisted_5);
            }),
            128
            /* KEYED_FRAGMENT */
          )),
          showNextMore.value ? (Vue.openBlock(), Vue.createElementBlock("li", {
            key: 2,
            class: Vue.normalizeClass(nextMoreKls.value),
            tabindex: tabindex.value,
            "aria-label": Vue.unref(t)("tk.pagination.nextPages", { pager: __props.pagerCount - 2 }),
            onMouseenter: _cache[4] || (_cache[4] = ($event) => onMouseEnter()),
            onMouseleave: _cache[5] || (_cache[5] = ($event) => quickNextHover.value = false),
            onFocus: _cache[6] || (_cache[6] = ($event) => onFocus()),
            onBlur: _cache[7] || (_cache[7] = ($event) => quickNextFocus.value = false)
          }, [
            (quickNextHover.value || quickNextFocus.value) && !__props.disabled ? (Vue.openBlock(), Vue.createElementBlock("span", {
              key: 0,
              innerHTML: Vue.unref(dArrowRight.default)
            }, null, 8, _hoisted_7)) : (Vue.openBlock(), Vue.createElementBlock("span", {
              key: 1,
              innerHTML: Vue.unref(moreFilled.default)
            }, null, 8, _hoisted_8))
          ], 42, _hoisted_6)) : Vue.createCommentVNode("v-if", true),
          __props.pageCount > 1 ? (Vue.openBlock(), Vue.createElementBlock("li", {
            key: 3,
            class: Vue.normalizeClass([[Vue.unref(nsPager).is("active", __props.currentPage === __props.pageCount), Vue.unref(nsPager).is("disabled", __props.disabled)], "number"]),
            "aria-current": __props.currentPage === __props.pageCount,
            "aria-label": Vue.unref(t)("tk.pagination.currentPage", { pager: __props.pageCount }),
            tabindex: tabindex.value
          }, Vue.toDisplayString(__props.pageCount), 11, _hoisted_9)) : Vue.createCommentVNode("v-if", true)
        ],
        34
        /* CLASS, NEED_HYDRATION */
      );
    };
  }
});

exports.default = _sfc_main;
