'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var fs = require('fs');
var path = require('path');
var container = require('markdown-it-container');
var yaml = require('js-yaml');

const demoPlugin = (md, option = {}) => {
  const siteConfig = globalThis.VITEPRESS_CONFIG;
  const srcDir = siteConfig.srcDir;
  const path$1 = "examples";
  const demoPath = path.join(srcDir, path$1);
  const options = {
    validate(params) {
      return !!params.trim().match(/^demo\s*(.*)$/);
    },
    render(tokens, idx) {
      const desc = tokens[idx].info.trim().match(/^demo\s*(.*)$/);
      if (tokens[idx].nesting === 1) {
        let description = desc && desc.length > 1 ? desc[1].trim() : "";
        const effect = description.startsWith("effect");
        if (effect) description = description.replace("effect", "").trim();
        const sourceFileToken = tokens[idx + 2];
        const yamlToken = tokens[idx + 1];
        const { sourceFile, effectPath, sourceFileExtension } = getDemoFile(sourceFileToken, yamlToken);
        let source = "";
        if (sourceFile) source = fs.readFileSync(path.resolve(demoPath, sourceFile), "utf-8");
        if (!source) throw new Error(`Incorrect source file path: ${sourceFile}`);
        return `<TkDemoCode effect="${effect}" source="${encodeURIComponent(
          md.render(`\`\`\` ${sourceFileExtension}
${source}
\`\`\``)
        )}" path="${path.posix.join(path$1, effectPath)}" raw-source="${encodeURIComponent(
          source
        )}" description="${encodeURIComponent(md.render(description))}" options="${encodeURIComponent(JSON.stringify(option))}">`;
      } else return "</TkDemoCode>";
    }
  };
  md.use(container, "demo", options);
};
const getDemoFile = (sourceFileToken, yamlToken) => {
  let sourceFile = "";
  let effectPath = "";
  if (["yaml", "yml"].includes(yamlToken.info)) {
    const yamlContent = yaml.load(yamlToken.content.trim());
    effectPath = yamlContent.effect || yamlContent.file || "";
    sourceFile = yamlContent.file || yamlContent.effect || "";
  } else {
    sourceFile = sourceFileToken.children?.[0].content ?? "";
    effectPath = sourceFile;
  }
  sourceFile = sourceFile ? sourceFile.includes(".") ? sourceFile : `${sourceFile.replace(/.vue$/, "")}.vue` : "";
  effectPath = effectPath ? `${effectPath.replace(/.vue$/, "")}.vue` : "";
  const sourceFileExtension = sourceFile.includes(".") ? sourceFile.split(".").pop() : "vue";
  return { sourceFile, effectPath, sourceFileExtension };
};

exports.default = demoPlugin;
