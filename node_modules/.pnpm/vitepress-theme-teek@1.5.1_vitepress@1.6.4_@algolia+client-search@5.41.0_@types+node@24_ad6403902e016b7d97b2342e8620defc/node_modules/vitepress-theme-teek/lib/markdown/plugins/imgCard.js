'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var index = require('../../helper/dist/index.js');
require('markdown-it-container');
var cardContainer = require('../helper/cardContainer.js');

const rootClass = "img-card";
const imgCardPlugin = (md) => {
  const siteConfig = globalThis.VITEPRESS_CONFIG;
  const { base = "/" } = siteConfig.userConfig;
  cardContainer.createCardContainer(md, {
    type: "imgCard",
    className: `container ${rootClass}-container`,
    htmlRender: (props, info) => renderImgCard(props, info, base),
    afterHtmlRender: (props, _, tokens, idx) => {
      if (props.config.showCode !== true) {
        tokens[idx].type = "";
        tokens[idx].tag = "";
        tokens[idx].hidden = true;
      }
    }
  });
};
const renderImgCard = (imgCard, info, base) => {
  const { data = [], config = {} } = imgCard;
  if (!data.length) return "";
  const {
    cardNum = "auto",
    cardGap = 20,
    lineClamp = 2,
    target = "_blank",
    objectFit = "cover",
    imgHeight = "auto"
  } = config;
  const cardNumValue = info || cardNum + "";
  let num = 4;
  if (cardNumValue && index.isStringNumber(cardNumValue)) {
    const value = Number(cardNumValue);
    if (value >= 1 && value <= 4) num = value;
  }
  const index$1 = cardNumValue === "auto" ? "auto" : num;
  return `
    <div
      class="${rootClass} index-${index$1}"
      style="--row-gap: ${cardGap}px; --column-gap: ${cardGap}px; --column-min-width: calc(100% / ${num} - ${cardGap * (num - 1)}px);"
    >
      ${data.map(
    (card) => `
            <${card.link ? "a" : "span"}
              href="${index.withBase(base, card.link)}"
              target="${target}"
              class="${rootClass}__item ${num ? `row-${num}` : ""}"
              style="--img-height: ${imgHeight}; --img-object-fit: ${objectFit}; --desc-line-clamp: ${lineClamp}"
            >
              <div class="${rootClass}__item__img skeleton-image">
                <img src="${index.withBase(base, card.img)}" class="no-preview" onload="this.classList.add('loaded')" onerror="this.classList.add('loaded')">
              </div>
              <div class="${rootClass}__item__info">
                  <p class="name">${card.name}</p>
                  ${card.desc ? `<p class="desc">${card.desc}</p>` : ""}
              </div>
              ${card.avatar || card.author ? `<div class="${rootClass}__item__footer">
                      ${card.avatar ? `<img src="${index.withBase(base, card.avatar)}">` : ""}
                      ${card.author ? `<span>${card.author}</span>` : ""}
                    </div>` : ""}
            </${card.link ? "a" : "span"}>
          `
  ).join("")}
    </div>
  `;
};

exports.default = imgCardPlugin;
