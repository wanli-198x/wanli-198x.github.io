'use strict';

var Sidebar = require('vitepress-plugin-sidebar-resolve');
var Permalink = require('vitepress-plugin-permalink');
var MdH1 = require('vitepress-plugin-md-h1');
var Catalogue = require('vitepress-plugin-catalogue');
var DocAnalysis = require('vitepress-plugin-doc-analysis');
var FileContentLoader = require('vitepress-plugin-file-content-loader');
var AutoFrontmatter = require('vitepress-plugin-auto-frontmatter');
var addFrontmatter = require('./autoFrontmatter/addFrontmatter.js');
var index = require('./post/index.js');

const registerPluginAndGet = (vitePlugins = {}, teekTheme = true) => {
  const plugins = [];
  const ignoreDir = {
    autoFrontmatter: ["**/@pages/**", "**/.scripts/**"],
    sidebar: ["@pages", "@fragment", "examples", ".scripts"],
    mdH1: ["@pages", ".scripts"],
    docAnalysis: ["@pages", /目录页/, ".scripts"],
    fileContentLoader: ["**/components/**", "**/.vitepress/**", "**/public/**", "**/*\u76EE\u5F55\u9875*/**", "**/.scripts/**"]
  };
  plugins.push(...registerLoosePlugins(vitePlugins, ignoreDir));
  if (teekTheme !== false) plugins.push(...registerTightPlugins(vitePlugins, ignoreDir));
  return plugins;
};
const registerLoosePlugins = (vitePlugins, ignoreDir) => {
  const plugins = [];
  const {
    sidebar = true,
    sidebarOption = {},
    permalink = true,
    permalinkOption = {},
    mdH1 = true,
    mdH1Option = {},
    docAnalysis = true,
    docAnalysisOption = {},
    autoFrontmatter = false,
    autoFrontmatterOption = {}
  } = vitePlugins || {};
  if (autoFrontmatter) {
    const {
      pattern,
      globOptions = {},
      transform,
      categories = true,
      permalink: permalink2 = true,
      coverImg = false,
      forceCoverImg = false,
      coverImgList = [],
      permalinkType = sidebarOption.resolveRule === "rewrites" ? "rules" : "simple",
      permalinkPrefix = "pages",
      permalinkRules = []
    } = autoFrontmatterOption;
    if (!pattern) autoFrontmatterOption.pattern = "**/*.md";
    autoFrontmatterOption.globOptions = {
      ...autoFrontmatterOption.globOptions,
      ignore: [...ignoreDir.autoFrontmatter, ...globOptions.ignore || []]
    };
    autoFrontmatterOption.transform = (frontmatter, fileInfo) => {
      let transformResult = {};
      if (permalink2 && !frontmatter.permalink?.trim()) {
        const permalinkObj = permalinkType === "simple" || !fileInfo.relativePath.includes("/") ? addFrontmatter.createSimplePermalink(permalinkPrefix) : addFrontmatter.createComplexPermalink(frontmatter.permalink, fileInfo, permalinkRules);
        transformResult = { ...transformResult, ...permalinkObj };
      }
      if (categories && !frontmatter.categories) {
        transformResult = { ...transformResult, ...addFrontmatter.createCategory(fileInfo, ["@fragment"]) };
      }
      if (coverImg && coverImgList.length) {
        if (!frontmatter.coverImg) {
          transformResult = { ...transformResult, ...addFrontmatter.createCoverImg(coverImgList) };
        } else if (frontmatter.coverImg && forceCoverImg) {
          transformResult = { ...transformResult, ...addFrontmatter.createCoverImg(coverImgList) };
        }
      }
      transformResult = transform?.({ ...frontmatter, ...transformResult }, fileInfo) || transformResult;
      return Object.keys(transformResult).length ? { ...frontmatter, ...transformResult } : void 0;
    };
    plugins.push(AutoFrontmatter(autoFrontmatterOption));
  }
  if (sidebar) {
    sidebarOption.ignoreList = [...sidebarOption?.ignoreList || [], ...ignoreDir.sidebar];
    plugins.push(Sidebar(sidebarOption));
  }
  if (permalink) {
    plugins.push(...Permalink(permalinkOption));
  }
  if (mdH1) {
    const selfBeforeInject = mdH1Option.beforeInject;
    mdH1Option.beforeInject = (frontmatter, id, title) => {
      if (["cataloguePage", "TkCataloguePage"].includes(frontmatter.layout) || frontmatter.catalogue) return false;
      if (["archivesPage", "TkArchivesPage"].includes(frontmatter.layout) || frontmatter.archivesPage) return false;
      if (frontmatter.titleTag) {
        return `${title} <TkTitleTag size="large">${frontmatter.titleTag}</TkTitleTag>`;
      }
      return selfBeforeInject?.(frontmatter, id, title);
    };
    mdH1Option.ignoreList = [...mdH1Option?.ignoreList || [], ...ignoreDir.mdH1];
    plugins.push(MdH1(mdH1Option));
  }
  if (docAnalysis) {
    docAnalysisOption.ignoreList = [...docAnalysisOption?.ignoreList || [], ...ignoreDir.docAnalysis];
    plugins.push(DocAnalysis(docAnalysisOption));
  }
  return plugins;
};
const registerTightPlugins = (vitePlugins, ignoreDir) => {
  const plugins = [];
  const { catalogueOption = {}, fileContentLoaderIgnore = [] } = vitePlugins || {};
  plugins.push(Catalogue(catalogueOption));
  const fileContentLoaderOptions = {
    pattern: ["**/*.md"],
    // 指定摘录格式
    excerpt: "<!-- more -->",
    includeSrc: true,
    transformData: index.transformData,
    transformRaw: index.transformRaw,
    themeConfigKey: "posts",
    globOptions: {
      ignore: [...ignoreDir.fileContentLoader, ...fileContentLoaderIgnore]
    }
  };
  plugins.push(FileContentLoader(fileContentLoaderOptions));
  return plugins;
};

exports.registerPluginAndGet = registerPluginAndGet;
exports.registerTightPlugins = registerTightPlugins;
