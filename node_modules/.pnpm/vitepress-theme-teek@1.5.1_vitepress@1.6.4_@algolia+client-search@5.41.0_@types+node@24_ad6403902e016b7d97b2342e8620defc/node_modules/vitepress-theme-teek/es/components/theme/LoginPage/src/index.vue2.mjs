import { defineComponent, ref, reactive, markRaw, createElementBlock, openBlock, unref, normalizeClass, createElementVNode, createCommentVNode, toDisplayString, Fragment, renderList, createBlock, createVNode, withDirectives, withKeys, vModelDynamic, resolveDynamicComponent } from 'vue';
import { useRouter, useData, withBase } from 'vitepress';
import { isClient } from '../../../../helper/dist/index.mjs';
import { useNamespace } from '../../../../composables/useNamespace.mjs';
import 'vitepress-theme-teek/theme-chalk/tk-copy-banner.css';
import { useLocale } from '../../../../composables/useLocale.mjs';
import '../../../../composables/useZIndex.mjs';
import userIcon from '../../../../static/icons/user.mjs';
import refreshRightIcon from '../../../../static/icons/refreshRight.mjs';
import successFilledIcon from '../../../../static/icons/successFilled.mjs';
import warningFilledIcon from '../../../../static/icons/warningFilled.mjs';
import lockIcon from '../../../../static/icons/lock.mjs';
import { usePosts, useTeekConfig } from '../../ConfigProvider/index.mjs';
import _sfc_main$2 from '../../../common/Icon/src/index.vue2.mjs';
import '@iconify/vue';
import message from '../../../common/Message/src/method.mjs';
import _sfc_main$1 from '../../../common/VerifyCode/src/index.vue2.mjs';
import { defaultPrivateConfig, getLoginStorageKey, loginUrlKeyMap, verifyModeMap } from './login.mjs';

const _hoisted_1 = ["aria-label"];
const _hoisted_2 = ["src"];
const _hoisted_3 = ["src"];
const _hoisted_4 = { class: "title" };
const _hoisted_5 = { class: "flx-space-y-20 login-form" };
const _hoisted_6 = ["for"];
const _hoisted_7 = ["onUpdate:modelValue", "type", "placeholder", "onFocus", "onBlur"];
const _hoisted_8 = ["aria-label"];
const _hoisted_9 = ["aria-label"];
var _sfc_main = /* @__PURE__ */ defineComponent({
  ...{ name: "LoginPage" },
  __name: "index",
  setup(__props) {
    const ns = useNamespace("login");
    const router = useRouter();
    const { frontmatter } = useData();
    const posts = usePosts();
    const { t } = useLocale();
    const { getTeekConfigRef } = useTeekConfig();
    const privateConfig = getTeekConfigRef("private", defaultPrivateConfig);
    const { siteLoginKey, pagesLoginKey, pageLoginKey, realmLoginKey } = getLoginStorageKey();
    const imgCode = ref("");
    const loginForm = reactive({
      username: {
        model: "",
        focusModel: false,
        errorModel: false,
        icon: userIcon,
        placeholder: t("tk.login.usernamePlaceholder"),
        type: "text"
      },
      password: {
        model: "",
        focusModel: false,
        errorModel: false,
        icon: lockIcon,
        placeholder: t("tk.login.passwordPlaceholder"),
        type: "password"
      },
      verifyCode: {
        model: "",
        focusModel: false,
        errorModel: false,
        icon: warningFilledIcon,
        placeholder: t("tk.login.verifyCodePlaceholder"),
        type: "text",
        append: markRaw(_sfc_main$1),
        appendModel: imgCode
      }
    });
    const checkLoginForm = () => {
      if (loginForm.verifyCode.model === "") {
        loginForm.verifyCode.errorModel = true;
        message.warning({ message: t("tk.login.verifyCodeNonNull"), plain: true });
        return false;
      }
      if (loginForm.verifyCode.model !== imgCode.value) {
        loginForm.verifyCode.errorModel = true;
        message.error({ message: t("tk.login.verifyCodeError"), plain: true });
        return false;
      }
      if (loginForm.username.model === "" || loginForm.password.model === "") {
        loginForm.username.errorModel = true;
        message.warning({ message: t("tk.login.loginInfoNonNull"), plain: true });
        return false;
      }
      if (loginForm.password.model === "") {
        loginForm.password.errorModel = true;
        message.warning({ message: t("tk.login.loginInfoNonNull"), plain: true });
        return false;
      }
      return true;
    };
    const getExpire = (expire) => {
      if (!expire) return 864e5;
      if (expire.indexOf("d") !== -1) return parseInt(expire.replace("d", "")) * 24 * 60 * 60 * 1e3;
      if (expire.indexOf("h") !== -1) return parseInt(expire.replace("h", "")) * 60 * 60 * 1e3;
      return parseInt(expire) * 1e3;
    };
    const resetForm = () => {
      Object.values(loginForm).forEach((form) => {
        form.model = "";
        form.focusModel = false;
      });
    };
    const getLoginHandler = () => {
      const { searchParams } = new URL(window.location.href);
      const verifyModeValue = searchParams.get(loginUrlKeyMap.verifyMode);
      const toPath = searchParams.get(loginUrlKeyMap.toPath);
      const realmValue = searchParams.get(loginUrlKeyMap.realm);
      const { site = [], pages = [], realm = {} } = privateConfig.value;
      return [
        {
          // 单页面级别登录
          condition: () => verifyModeValue === verifyModeMap.page && toPath,
          handle: () => execLogin([], pageLoginKey, { toPath })
        },
        {
          // 单页面级别登录
          condition: () => verifyModeValue === verifyModeMap.realm && realmValue,
          handle: () => execLogin(realm[realmValue] || [], realmLoginKey, { isRealm: true, realm: realmValue })
        },
        {
          // 全局页面级别登录
          condition: () => verifyModeValue === verifyModeMap.pages,
          handle: () => execLogin(pages, pagesLoginKey)
        },
        {
          // 站点级别登录
          condition: () => verifyModeValue === verifyModeMap.site,
          handle: () => execLogin(site, siteLoginKey, { isSite: true })
        }
      ].find((item) => item.condition());
    };
    const login = () => {
      if (!isClient) return;
      const { enabled = false } = privateConfig.value;
      if (!enabled) {
        message.success({ message: t("tk.login.loginSuccess"), plain: true });
        return router.go("/");
      }
      if (!checkLoginForm()) return;
      const { searchParams } = new URL(window.location.href);
      const toPath = searchParams.get(loginUrlKeyMap.toPath);
      let isLogin = false;
      const handler = getLoginHandler();
      if (handler) {
        const { doLogin } = privateConfig.value;
        const loginInfo = { username: loginForm.username.model, password: loginForm.password.model };
        const nativeLogin = handler.handle;
        isLogin = doLogin ? doLogin(loginInfo, "page", nativeLogin) : nativeLogin();
      }
      if (isLogin === void 0) return;
      if (isLogin) {
        message.success({ message: t("tk.login.loginSuccess"), plain: true });
        if (toPath) router.go(toPath);
      } else message.error({ message: t("tk.login.loginError"), plain: true });
    };
    const execLogin = (loginInfo, storageKey, options = {}) => {
      const { toPath } = options;
      if (toPath) return execSinglePageLogin(toPath, storageKey);
      const credential = loginInfo.find(
        (item) => item.username === loginForm.username.model && item.password === loginForm.password.model
      );
      if (!credential) return false;
      return storeLoginInfo(credential, storageKey, options);
    };
    const execSinglePageLogin = (toPath, storageKey) => {
      const post = posts.value.originPosts.find((post2) => [post2.frontmatter.permalink, post2.url].includes(toPath));
      if (!post) return false;
      const { username, password, session, expire, strategy, realm } = post.frontmatter || {};
      const loginInfoList = [
        ...post.frontmatter.loginInfo || [],
        { username, password, session, expire, strategy, realm }
      ].filter((item) => ![void 0, ""].includes(item.username) && ![void 0, ""].includes(item.password));
      const loginInfo = loginInfoList.find(
        (item) => item.username === loginForm.username.model && item.password === loginForm.password.model
      );
      if (loginInfo) {
        return storeLoginInfo({ ...loginInfo}, storageKey + post.url);
      }
      if (realm && privateConfig.value.realm) {
        const nativeLogin = () => execLogin(privateConfig.value.realm[realm], realmLoginKey, { isRealm: true, realm });
        return privateConfig.value.doLogin ? privateConfig.value.doLogin({ username, password }, "realm", nativeLogin) : nativeLogin();
      }
      return false;
    };
    const storeLoginInfo = (loginInfo, storageKey, options = {}) => {
      const { session, expire, strategy = "once", role = "common" } = loginInfo;
      const { isSite = false, isRealm = false, realm } = options;
      const storage = session || privateConfig.value.session ? sessionStorage : localStorage;
      const key = isRealm ? `${storageKey}${realm}` : storageKey;
      const encrypt = privateConfig.value.encrypt;
      try {
        storage.setItem(
          key,
          JSON.stringify({
            username: loginForm.username.model,
            password: encrypt ? encrypt(loginForm.password.model, frontmatter) : loginForm.password.model,
            loginTime: (/* @__PURE__ */ new Date()).getTime(),
            expire: strategy === "always" ? (/* @__PURE__ */ new Date()).getTime() + 30 * 1e3 : getExpire(expire || privateConfig.value.expire),
            strategy: strategy || "once",
            ...isSite && { role }
            // 站点级别登录信息需要存储角色，如果为 admin，代表后续有所有的文章页面权限
          })
        );
        return true;
      } catch (error) {
        console.error("[Teek Error] Failed to store credentials:", error);
        return false;
      }
    };
    const handleFocus = (item, formName) => {
      item.focusModel = true;
      item.errorModel = false;
      privateConfig.value.onFocus?.(item.model, formName);
    };
    const handleBlur = (item, formName) => {
      item.focusModel = false;
      if (item.model === "") item.errorModel = true;
      privateConfig.value.onBlur?.(item.model, formName);
    };
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(unref(ns).b()),
        "aria-label": unref(t)("tk.login.label")
      }, [
        createElementVNode(
          "div",
          {
            class: normalizeClass(unref(ns).e("wrapper"))
          },
          [
            unref(frontmatter).leftImg ? (openBlock(), createElementBlock(
              "div",
              {
                key: 0,
                class: normalizeClass(unref(ns).e("left"))
              },
              [
                createElementVNode("img", {
                  src: unref(withBase)(unref(frontmatter).leftImg),
                  alt: "login"
                }, null, 8, _hoisted_2)
              ],
              2
              /* CLASS */
            )) : createCommentVNode("v-if", true),
            createElementVNode(
              "div",
              {
                class: normalizeClass(unref(ns).e("right"))
              },
              [
                createElementVNode(
                  "div",
                  {
                    class: normalizeClass([unref(ns).e("right__header"), "flx-center"])
                  },
                  [
                    unref(frontmatter).logo ? (openBlock(), createElementBlock("img", {
                      key: 0,
                      src: unref(frontmatter).logo,
                      alt: "logo"
                    }, null, 8, _hoisted_3)) : createCommentVNode("v-if", true),
                    createElementVNode(
                      "span",
                      _hoisted_4,
                      toDisplayString(unref(frontmatter).name ?? "VitePress Theme Teek"),
                      1
                      /* TEXT */
                    )
                  ],
                  2
                  /* CLASS */
                ),
                createElementVNode("form", _hoisted_5, [
                  (openBlock(true), createElementBlock(
                    Fragment,
                    null,
                    renderList(loginForm, (item, key) => {
                      return openBlock(), createElementBlock("div", {
                        key,
                        class: "flx login-form-item"
                      }, [
                        createElementVNode(
                          "div",
                          {
                            class: normalizeClass([unref(ns).e("right__form"), unref(ns).is("focus", item.focusModel), unref(ns).is("error", item.errorModel)])
                          },
                          [
                            createVNode(unref(_sfc_main$2), {
                              icon: item.icon
                            }, null, 8, ["icon"]),
                            createElementVNode("label", {
                              for: "input-" + key,
                              class: "sr-only"
                            }, toDisplayString(item.placeholder), 9, _hoisted_6),
                            withDirectives(createElementVNode("input", {
                              "onUpdate:modelValue": ($event) => item.model = $event,
                              type: item.type,
                              class: normalizeClass(unref(ns).em("right__form", "control")),
                              placeholder: item.placeholder,
                              onFocus: ($event) => handleFocus(item, key),
                              onBlur: ($event) => handleBlur(item, key),
                              onKeydown: withKeys(login, ["enter"])
                            }, null, 42, _hoisted_7), [
                              [vModelDynamic, item.model]
                            ])
                          ],
                          2
                          /* CLASS */
                        ),
                        item.append ? (openBlock(), createBlock(resolveDynamicComponent(item.append), {
                          key: 0,
                          modelValue: item.appendModel,
                          "onUpdate:modelValue": ($event) => item.appendModel = $event
                        }, null, 8, ["modelValue", "onUpdate:modelValue"])) : createCommentVNode("v-if", true)
                      ]);
                    }),
                    128
                    /* KEYED_FRAGMENT */
                  )),
                  createElementVNode(
                    "div",
                    {
                      class: normalizeClass(unref(ns).e("right__form__btn"))
                    },
                    [
                      createElementVNode("button", {
                        type: "button",
                        onClick: _cache[0] || (_cache[0] = ($event) => resetForm()),
                        class: "flx-center",
                        "aria-label": unref(t)("tk.login.reset")
                      }, [
                        createVNode(unref(_sfc_main$2), { icon: unref(refreshRightIcon) }, null, 8, ["icon"]),
                        createElementVNode(
                          "span",
                          null,
                          toDisplayString(unref(t)("tk.login.reset")),
                          1
                          /* TEXT */
                        )
                      ], 8, _hoisted_8),
                      createElementVNode("button", {
                        type: "button",
                        onClick: _cache[1] || (_cache[1] = ($event) => login()),
                        class: "flx-center primary",
                        "aria-label": unref(t)("tk.login.login")
                      }, [
                        createVNode(unref(_sfc_main$2), { icon: unref(successFilledIcon) }, null, 8, ["icon"]),
                        createElementVNode(
                          "span",
                          null,
                          toDisplayString(unref(t)("tk.login.login")),
                          1
                          /* TEXT */
                        )
                      ], 8, _hoisted_9)
                    ],
                    2
                    /* CLASS */
                  )
                ])
              ],
              2
              /* CLASS */
            )
          ],
          2
          /* CLASS */
        )
      ], 10, _hoisted_1);
    };
  }
});

export { _sfc_main as default };
