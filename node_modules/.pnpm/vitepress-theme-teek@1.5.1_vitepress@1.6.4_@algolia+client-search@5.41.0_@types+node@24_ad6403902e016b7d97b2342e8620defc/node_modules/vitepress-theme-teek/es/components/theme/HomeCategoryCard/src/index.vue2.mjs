import { defineComponent, ref, computed, inject, onMounted, watch, createBlock, openBlock, unref, normalizeClass, withCtx, createElementBlock, TransitionGroup, createCommentVNode, Fragment, renderList, normalizeStyle, createElementVNode, toDisplayString } from 'vue';
import { useRouter, withBase } from 'vitepress';
import { isFunction } from '../../../../helper/dist/index.mjs';
import { useNamespace } from '../../../../composables/useNamespace.mjs';
import 'vitepress-theme-teek/theme-chalk/tk-copy-banner.css';
import { useLocale } from '../../../../composables/useLocale.mjs';
import '../../../../composables/useZIndex.mjs';
import categoryIcon from '../../../../static/icons/category.mjs';
import { pageNumKey } from '../../HomePostList/src/homePostList.mjs';
import { useTeekConfig, usePagePath, usePosts } from '../../ConfigProvider/index.mjs';
import { postDataUpdateSymbol } from '../../Home/src/home.mjs';
import _sfc_main$1 from '../../../common/PageCard/src/index.vue2.mjs';

const _hoisted_1 = ["onClick", "aria-label"];
const _hoisted_2 = { class: "sle" };
const _hoisted_3 = ["href", "aria-label"];
const _hoisted_4 = ["aria-label"];
const categoryKey = "category";
var _sfc_main = /* @__PURE__ */ defineComponent({
  ...{ name: "HomeCategoryCard" },
  __name: "index",
  props: {
    categoriesPage: { type: Boolean, default: false }
  },
  setup(__props) {
    const ns = useNamespace("category");
    const { t } = useLocale();
    const { getTeekConfigRef } = useTeekConfig();
    const { categoryPath } = usePagePath();
    const categoryConfig = getTeekConfigRef("category", {
      path: "/categories",
      pageTitle: t("tk.categoryCard.pageTitle", { icon: categoryIcon }),
      homeTitle: t("tk.categoryCard.homeTitle", { icon: categoryIcon }),
      emptyLabel: t("tk.categoryCard.emptyLabel"),
      moreLabel: t("tk.categoryCard.moreLabel"),
      limit: 5,
      autoPage: false,
      pageSpeed: 4e3
    });
    const posts = usePosts();
    const pageNum = ref(1);
    const categories = computed(() => posts.value.groupCards.categories);
    const currentCategories = computed(() => {
      const { limit } = categoryConfig.value;
      const c = categories.value;
      const p = pageNum.value;
      return __props.categoriesPage ? c : c.slice((p - 1) * limit, p * limit);
    });
    const finalTitle = computed(() => {
      const { pageTitle, homeTitle } = categoryConfig.value;
      const pt = isFunction(pageTitle) ? pageTitle(categoryIcon) : pageTitle;
      const ht = isFunction(homeTitle) ? homeTitle(categoryIcon) : homeTitle;
      return { pt, ht };
    });
    const updatePostListData = inject(postDataUpdateSymbol, () => {
    });
    const router = useRouter();
    const selectedCategory = ref("");
    const handleSwitchCategory = (category = "") => {
      const { pathname, searchParams } = new URL(window.location.href);
      const categoriesPathConst = withBase(categoryPath.value);
      const inCategoriesPage = categoriesPathConst === pathname;
      searchParams.delete(pageNumKey);
      searchParams.append(pageNumKey, "1");
      searchParams.delete(categoryKey);
      if (category) searchParams.append(categoryKey, category);
      const searchParamsStr = category ? `?${searchParams.toString()}` : "";
      if (inCategoriesPage && selectedCategory.value === category) return;
      selectedCategory.value = category;
      if (!inCategoriesPage) return router.go(categoriesPathConst + searchParamsStr);
      window.history.pushState({}, "", pathname + searchParamsStr);
      updatePostListData();
    };
    onMounted(() => {
      const { searchParams } = new URL(window.location.href);
      const category = searchParams.get(categoryKey);
      if (category) selectedCategory.value = category;
    });
    watch(
      () => __props.categoriesPage,
      () => {
        if (!__props.categoriesPage) {
          selectedCategory.value = "";
          return;
        }
        const { searchParams } = new URL(window.location.href);
        const category = searchParams.get(categoryKey);
        if (category && selectedCategory.value !== category) selectedCategory.value = category;
      }
    );
    const itemRefs = ref([]);
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(_sfc_main$1), {
        page: !__props.categoriesPage,
        modelValue: pageNum.value,
        "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => pageNum.value = $event),
        pageSize: unref(categoryConfig).limit,
        total: categories.value.length,
        title: finalTitle.value[__props.categoriesPage ? "pt" : "ht"],
        titleClick: handleSwitchCategory,
        autoPage: unref(categoryConfig).autoPage,
        pageSpeed: unref(categoryConfig).pageSpeed,
        class: normalizeClass([unref(ns).b(), unref(ns).is("page", __props.categoriesPage)]),
        "aria-label": unref(t)("tk.categoryCard.label")
      }, {
        default: withCtx(({ transitionName }) => [
          categories.value.length ? (openBlock(), createBlock(TransitionGroup, {
            key: 0,
            name: transitionName,
            tag: "div",
            mode: "out-in",
            class: normalizeClass(`${unref(ns).e("list")} flx-column`),
            "aria-label": unref(t)("tk.categoryCard.listLabel")
          }, {
            default: withCtx(() => [
              (openBlock(true), createElementBlock(
                Fragment,
                null,
                renderList(currentCategories.value, (item, index) => {
                  return openBlock(), createElementBlock("a", {
                    ref_for: true,
                    ref_key: "itemRefs",
                    ref: itemRefs,
                    key: item.name,
                    onClick: ($event) => handleSwitchCategory(item.name),
                    class: normalizeClass([{ active: item.name === selectedCategory.value }, "hover-color"]),
                    style: normalizeStyle(`top: ${index * itemRefs.value?.[index]?.getBoundingClientRect().height || 0}px`),
                    "aria-label": item.name
                  }, [
                    createElementVNode(
                      "span",
                      _hoisted_2,
                      toDisplayString(item.name),
                      1
                      /* TEXT */
                    ),
                    createElementVNode(
                      "span",
                      null,
                      toDisplayString(item.length),
                      1
                      /* TEXT */
                    )
                  ], 14, _hoisted_1);
                }),
                128
                /* KEYED_FRAGMENT */
              )),
              !__props.categoriesPage && unref(categoryConfig).limit < categories.value.length ? (openBlock(), createElementBlock("a", {
                key: 0,
                href: unref(withBase)(unref(categoryPath)),
                "aria-label": unref(categoryConfig).moreLabel
              }, toDisplayString(unref(categoryConfig).moreLabel), 9, _hoisted_3)) : createCommentVNode("v-if", true)
            ]),
            _: 1
            /* STABLE */
          }, 8, ["name", "class", "aria-label"])) : (openBlock(), createElementBlock("div", {
            key: 1,
            class: normalizeClass(unref(ns).m("empty")),
            "aria-label": unref(categoryConfig).emptyLabel
          }, toDisplayString(unref(categoryConfig).emptyLabel), 11, _hoisted_4))
        ]),
        _: 1
        /* STABLE */
      }, 8, ["page", "modelValue", "pageSize", "total", "title", "autoPage", "pageSpeed", "class", "aria-label"]);
    };
  }
});

export { _sfc_main as default };
