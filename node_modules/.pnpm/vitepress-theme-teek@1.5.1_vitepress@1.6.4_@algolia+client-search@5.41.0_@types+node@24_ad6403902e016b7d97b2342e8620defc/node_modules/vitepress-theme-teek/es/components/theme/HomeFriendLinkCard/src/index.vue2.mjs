import { defineComponent, ref, computed, onMounted, createBlock, openBlock, unref, normalizeClass, withCtx, createElementBlock, TransitionGroup, Fragment, renderList, normalizeStyle, createVNode, toDisplayString } from 'vue';
import { useRouter } from 'vitepress';
import { isFunction } from '../../../../helper/dist/index.mjs';
import { useNamespace } from '../../../../composables/useNamespace.mjs';
import 'vitepress-theme-teek/theme-chalk/tk-copy-banner.css';
import { useLocale } from '../../../../composables/useLocale.mjs';
import { useScrollData } from '../../../../composables/useScrollData.mjs';
import '../../../../composables/useZIndex.mjs';
import friendLinkIcon from '../../../../static/icons/friendLink.mjs';
import { useTeekConfig } from '../../ConfigProvider/index.mjs';
import _sfc_main$1 from '../../../common/PageCard/src/index.vue2.mjs';
import _sfc_main$2 from './ItemInfo.vue2.mjs';

const _hoisted_1 = ["aria-label"];
var _sfc_main = /* @__PURE__ */ defineComponent({
  ...{ name: "HomeFriendLinkCard" },
  __name: "index",
  setup(__props) {
    const ns = useNamespace("friend-link");
    const { t } = useLocale();
    const { getTeekConfigRef } = useTeekConfig();
    const friendLinkConfig = getTeekConfigRef("friendLink", {
      list: [],
      limit: 4,
      title: t("tk.friendLinkCard.title", { icon: friendLinkIcon }),
      emptyLabel: t("tk.friendLinkCard.emptyLabel"),
      autoScroll: false,
      scrollSpeed: 2500,
      autoPage: false,
      pageSpeed: 4e3,
      titleClick: void 0
    });
    const { data, start, stop } = useScrollData(friendLinkConfig.value.list, 5, {
      intervalTime: friendLinkConfig.value.scrollSpeed
    });
    const pageNum = ref(1);
    const currentFriendLinkList = computed(() => {
      const { list, limit, autoScroll } = friendLinkConfig.value;
      if (autoScroll) return data.value;
      const p = pageNum.value;
      return list.slice((p - 1) * limit, p * limit);
    });
    const finalTitle = computed(() => {
      const { title } = friendLinkConfig.value;
      if (isFunction(title)) return title(friendLinkIcon);
      return title;
    });
    onMounted(() => {
      if (friendLinkConfig.value.autoScroll) start();
    });
    const itemRefs = ref([]);
    const getLiStyle = (index) => {
      if (friendLinkConfig.value.autoScroll) return {};
      const clientRect = itemRefs.value?.[index]?.getBoundingClientRect();
      return {
        top: `calc(${index} * (calc(${ns.cssVar("home-friend-link-gap")} + ${clientRect?.height || 0}px)))`
      };
    };
    const router = useRouter();
    const handleTitleClick = () => {
      friendLinkConfig.value.titleClick?.(router);
    };
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(_sfc_main$1), {
        page: !unref(friendLinkConfig).autoScroll,
        modelValue: pageNum.value,
        "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => pageNum.value = $event),
        pageSize: unref(friendLinkConfig).limit,
        total: unref(friendLinkConfig).list.length,
        title: finalTitle.value,
        titleClick: unref(friendLinkConfig).titleClick ? handleTitleClick : void 0,
        autoPage: unref(friendLinkConfig).autoPage,
        pageSpeed: unref(friendLinkConfig).pageSpeed,
        class: normalizeClass(unref(ns).b()),
        "aria-label": unref(t)("tk.friendLinkCard.label")
      }, {
        default: withCtx(({ transitionName, startAutoPage, closeAutoPage }) => [
          unref(friendLinkConfig).list.length ? (openBlock(), createBlock(TransitionGroup, {
            key: 0,
            name: transitionName,
            tag: "ul",
            mode: "out-in",
            class: normalizeClass(`${unref(ns).e("list")} flx-column`),
            onMouseenter: ($event) => unref(friendLinkConfig).autoScroll ? unref(stop)() : unref(friendLinkConfig).autoPage ? closeAutoPage() : () => {
            },
            onMouseleave: ($event) => unref(friendLinkConfig).autoScroll ? unref(start)() : unref(friendLinkConfig).autoPage ? startAutoPage() : () => {
            },
            "aria-label": unref(t)("tk.friendLinkCard.listLabel")
          }, {
            default: withCtx(() => [
              unref(friendLinkConfig).autoScroll ? (openBlock(true), createElementBlock(
                Fragment,
                { key: 0 },
                renderList(currentFriendLinkList.value, (item, index) => {
                  return openBlock(), createElementBlock(
                    "li",
                    {
                      key: item.name,
                      class: normalizeClass(unref(ns).e("list__item")),
                      style: normalizeStyle(getLiStyle(index))
                    },
                    [
                      createVNode(_sfc_main$2, {
                        item,
                        ns: unref(ns)
                      }, null, 8, ["item", "ns"])
                    ],
                    6
                    /* CLASS, STYLE */
                  );
                }),
                128
                /* KEYED_FRAGMENT */
              )) : (openBlock(true), createElementBlock(
                Fragment,
                { key: 1 },
                renderList(currentFriendLinkList.value, (item, index) => {
                  return openBlock(), createElementBlock(
                    "li",
                    {
                      ref_for: true,
                      ref_key: "itemRefs",
                      ref: itemRefs,
                      key: item.name,
                      class: normalizeClass(unref(ns).e("list__item")),
                      style: normalizeStyle(getLiStyle(index))
                    },
                    [
                      createVNode(_sfc_main$2, {
                        item,
                        ns: unref(ns)
                      }, null, 8, ["item", "ns"])
                    ],
                    6
                    /* CLASS, STYLE */
                  );
                }),
                128
                /* KEYED_FRAGMENT */
              ))
            ]),
            _: 1
            /* STABLE */
          }, 8, ["name", "class", "onMouseenter", "onMouseleave", "aria-label"])) : (openBlock(), createElementBlock("div", {
            key: 1,
            class: normalizeClass(unref(ns).m("empty")),
            "aria-label": unref(friendLinkConfig).emptyLabel
          }, toDisplayString(unref(friendLinkConfig).emptyLabel), 11, _hoisted_1))
        ]),
        _: 1
        /* STABLE */
      }, 8, ["page", "modelValue", "pageSize", "total", "title", "titleClick", "autoPage", "pageSpeed", "class", "aria-label"]);
    };
  }
});

export { _sfc_main as default };
