import { defineComponent, computed, watch, createBlock, openBlock, Transition, unref, withCtx, withDirectives, createVNode, normalizeClass, isRef, vShow } from 'vue';
import { isClient } from '../../../../helper/dist/index.mjs';
import 'vitepress';
import 'vitepress-theme-teek/theme-chalk/tk-copy-banner.css';
import { useDebounce } from '../../../../composables/useDebounce.mjs';
import { useLocale } from '../../../../composables/useLocale.mjs';
import { useMediaQuery } from '../../../../composables/useMediaQuery.mjs';
import { useStorage } from '../../../../composables/useStorage.mjs';
import '../../../../composables/useZIndex.mjs';
import autoWidthIcon from '../../../../static/icons/theme-enhance/autoWidth.mjs';
import scaleIcon from '../../../../static/icons/theme-enhance/scale.mjs';
import { useTeekConfig } from '../../ConfigProvider/index.mjs';
import _sfc_main$2 from '../../../common/InputSlide/src/index.vue2.mjs';
import { LayoutMode, mobileMaxWidthMedia, activateMaxWidthSlideMedia } from './themeEnhance.mjs';
import { pageMaxWidthSlideStorageKey, layoutModeStorageKey, transitionName, ns, pageMaxWidthVar } from './namespace.mjs';
import { useAnimated } from './useAnimated.mjs';
import _sfc_main$1 from './components/BaseTemplate.vue2.mjs';

var _sfc_main = /* @__PURE__ */ defineComponent({
  ...{ name: "LayoutPageWidthSlide" },
  __name: "LayoutPageWidthSlide",
  setup(__props) {
    const { getTeekConfigRef } = useTeekConfig();
    const themeEnhanceConfig = getTeekConfigRef("themeEnhance", {});
    const { t } = useLocale();
    const min = computed(() => 60 * 100);
    const max = computed(() => 100 * 100);
    const pageMaxWidth = useStorage(
      pageMaxWidthSlideStorageKey,
      (themeEnhanceConfig.value.layoutSwitch?.defaultPageMaxWidth || 90) * 100
    );
    const layoutMode = useStorage(
      layoutModeStorageKey,
      themeEnhanceConfig.value.layoutSwitch?.defaultMode || LayoutMode.Original
    );
    const { start: startAnimated } = useAnimated();
    const updatePageMaxWidth = (val) => {
      if (!isClient) return;
      if (!themeEnhanceConfig.value.layoutSwitch?.disableAnimation) startAnimated();
      document.body.style.setProperty(pageMaxWidthVar, `${Math.ceil(val / 100)}%`);
    };
    const isMobile = useMediaQuery(mobileMaxWidthMedia);
    const shouldActivateMaxWidth = useMediaQuery(activateMaxWidthSlideMedia);
    watch(shouldActivateMaxWidth, () => {
      updatePageMaxWidth(pageMaxWidth.value);
    });
    const update = useDebounce(updatePageMaxWidth, 1e3);
    watch(pageMaxWidth, update);
    const format = (val) => `${Math.ceil(val / 100)}%`;
    const tips = [
      {
        title: t("tk.themeEnhance.pageLayoutMaxWidth.helpTipTitle"),
        icon: scaleIcon,
        content: t("tk.themeEnhance.pageLayoutMaxWidth.helpTipContent")
      }
    ];
    return (_ctx, _cache) => {
      return openBlock(), createBlock(Transition, {
        name: unref(transitionName),
        persisted: ""
      }, {
        default: withCtx(() => [
          withDirectives(createVNode(_sfc_main$1, {
            icon: unref(autoWidthIcon),
            title: unref(t)("tk.themeEnhance.pageLayoutMaxWidth.title"),
            helper: !unref(themeEnhanceConfig).layoutSwitch?.disablePageMaxWidthHelp,
            "helper-desc": unref(t)("tk.themeEnhance.pageLayoutMaxWidth.helpDesc"),
            tips,
            disabled: unref(isMobile)
          }, {
            default: withCtx(() => [
              createVNode(unref(_sfc_main$2), {
                modelValue: unref(pageMaxWidth),
                "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => isRef(pageMaxWidth) ? pageMaxWidth.value = $event : null),
                disabled: unref(isMobile),
                min: min.value,
                max: max.value,
                format,
                class: normalizeClass(unref(ns).e("slide")),
                "aria-label": unref(t)("tk.themeEnhance.pageLayoutMaxWidth.helperTipTitle")
              }, null, 8, ["modelValue", "disabled", "min", "max", "class", "aria-label"])
            ]),
            _: 1
            /* STABLE */
          }, 8, ["icon", "title", "helper", "helper-desc", "disabled"]), [
            [vShow, unref(layoutMode) === unref(LayoutMode).SidebarWidthAdjustableOnly || unref(layoutMode) === unref(LayoutMode).BothWidthAdjustable]
          ])
        ]),
        _: 1
        /* STABLE */
      }, 8, ["name"]);
    };
  }
});

export { _sfc_main as default };
