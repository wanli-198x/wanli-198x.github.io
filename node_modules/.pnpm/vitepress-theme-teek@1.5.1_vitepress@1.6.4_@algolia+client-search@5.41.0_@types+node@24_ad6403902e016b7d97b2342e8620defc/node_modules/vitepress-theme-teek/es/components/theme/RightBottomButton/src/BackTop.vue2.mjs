import { defineComponent, ref, computed, onMounted, createBlock, openBlock, Transition, unref, withCtx, renderSlot, withDirectives, createElementVNode, normalizeStyle, normalizeClass, createElementBlock, createCommentVNode, toDisplayString, vShow } from 'vue';
import { isClient } from '../../../../helper/dist/index.mjs';
import { useEventListener } from '../../../../composables/useEventListener.mjs';
import 'vitepress';
import 'vitepress-theme-teek/theme-chalk/tk-copy-banner.css';
import { useDebounce } from '../../../../composables/useDebounce.mjs';
import { useLocale } from '../../../../composables/useLocale.mjs';
import '../../../../composables/useZIndex.mjs';
import rocketIcon from '../../../../static/icons/rocket.mjs';
import { useTeekConfig } from '../../ConfigProvider/index.mjs';
import message from '../../../common/Message/src/method.mjs';
import _sfc_main$1 from '../../../common/Icon/src/index.vue2.mjs';
import '@iconify/vue';
import { ns } from './namespace.mjs';

const _hoisted_1 = ["title", "aria-label", "aria-valuenow"];
const _hoisted_2 = {
  key: 0,
  class: "content"
};
var _sfc_main = /* @__PURE__ */ defineComponent({
  ...{ name: "BackTop" },
  __name: "BackTop",
  setup(__props) {
    const { t } = useLocale();
    const { getTeekConfigRef } = useTeekConfig();
    const backTopConfig = getTeekConfigRef("backTop", {
      enabled: true,
      content: "progress"
    });
    const scrollTop = ref(0);
    const showToTop = computed(() => scrollTop.value > 100);
    const progress = ref(0);
    const scrollToTop = useDebounce(
      () => {
        if (!isClient) return;
        document.querySelector("html")?.scrollIntoView({ behavior: "smooth" });
        setTimeout(() => {
          backTopConfig.value.done?.(message);
        }, 600);
      },
      500,
      true
    );
    const watchScroll = () => {
      scrollTop.value = document.documentElement.scrollTop || document.body.scrollTop || 0;
      updateScrollProgress();
    };
    const updateScrollProgress = () => {
      const p = window.scrollY / (document.documentElement.scrollHeight - window.innerHeight);
      progress.value = Math.round(p * 100);
    };
    onMounted(() => {
      updateScrollProgress();
    });
    useEventListener(() => window, "scroll", watchScroll);
    return (_ctx, _cache) => {
      return openBlock(), createBlock(Transition, {
        name: unref(ns).join("fade")
      }, {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default", {
            show: showToTop.value,
            progress: progress.value,
            icon: unref(rocketIcon),
            scrollToTop: unref(scrollToTop)
          }, () => [
            withDirectives(createElementVNode("div", {
              title: unref(t)("tk.rightBottomButton.backTopTitle"),
              class: normalizeClass([unref(ns).e("button"), "back-top"]),
              onClick: _cache[0] || (_cache[0] = //@ts-ignore
              (...args) => unref(scrollToTop) && unref(scrollToTop)(...args)),
              style: normalizeStyle({ [unref(ns).cssVarName("progress")]: progress.value }),
              role: "button",
              "aria-label": unref(t)("tk.rightBottomButton.backTopTitle"),
              "aria-valuenow": progress.value,
              "aria-valuemin": "0",
              "aria-valuemax": "100"
            }, [
              unref(backTopConfig).content === "progress" ? (openBlock(), createElementBlock(
                "span",
                _hoisted_2,
                toDisplayString(progress.value),
                1
                /* TEXT */
              )) : unref(backTopConfig).content === "icon" ? (openBlock(), createBlock(unref(_sfc_main$1), {
                key: 1,
                icon: unref(rocketIcon),
                "aria-hidden": "true"
              }, null, 8, ["icon"])) : createCommentVNode("v-if", true)
            ], 14, _hoisted_1), [
              [vShow, showToTop.value]
            ])
          ])
        ]),
        _: 3
        /* FORWARDED */
      }, 8, ["name"]);
    };
  }
});

export { _sfc_main as default };
