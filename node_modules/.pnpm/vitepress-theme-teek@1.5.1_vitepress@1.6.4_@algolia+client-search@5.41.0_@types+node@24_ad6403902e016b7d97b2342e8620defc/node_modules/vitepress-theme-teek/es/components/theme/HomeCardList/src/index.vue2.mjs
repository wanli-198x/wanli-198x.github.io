import { defineComponent, computed, ref, onMounted, createElementBlock, openBlock, normalizeClass, unref, renderSlot, Fragment, renderList, createCommentVNode, createElementVNode, createBlock, resolveDynamicComponent, mergeProps } from 'vue';
import 'vitepress';
import { useNamespace } from '../../../../composables/useNamespace.mjs';
import 'vitepress-theme-teek/theme-chalk/tk-copy-banner.css';
import { useWindowTransition } from '../../../../composables/useWindowTransition.mjs';
import '../../../../composables/useZIndex.mjs';
import { useTeekConfig, usePageState, useWindowTransitionConfig } from '../../ConfigProvider/index.mjs';
import _sfc_main$6 from '../../HomeMyCard/src/index.vue2.mjs';
import _sfc_main$5 from '../../HomeTopArticleCard/src/index.vue2.mjs';
import _sfc_main$4 from '../../HomeCategoryCard/src/index.vue2.mjs';
import _sfc_main$3 from '../../HomeTagCard/src/index.vue2.mjs';
import _sfc_main$1 from '../../HomeFriendLinkCard/src/index.vue2.mjs';
import _sfc_main$2 from '../../HomeDocAnalysisCard/src/index.vue2.mjs';

var _sfc_main = /* @__PURE__ */ defineComponent({
  ...{ name: "HomeCardList" },
  __name: "index",
  setup(__props) {
    const ns = useNamespace("home-card-list");
    const { getTeekConfigRef } = useTeekConfig();
    const teekConfig = getTeekConfigRef(null, {});
    const finalHomeCardSort = computed(() => {
      const configCardSort = teekConfig.value.homeCardSort || [];
      return ["my", .../* @__PURE__ */ new Set([...configCardSort, ...["topArticle", "category", "tag", "friendLink", "docAnalysis"]])];
    });
    const { isHomePage, isCategoriesPage, isTagsPage } = usePageState();
    const componentMap = computed(() => {
      const { topArticle, category, tag, docAnalysis, friendLink } = teekConfig.value;
      const homePage = isHomePage.value;
      const categoriesPage = isCategoriesPage.value;
      const tagsPage = isTagsPage.value;
      return {
        my: {
          el: _sfc_main$6,
          show: homePage,
          slot: "teek-home-card-my"
        },
        topArticle: {
          el: _sfc_main$5,
          show: homePage && topArticle?.enabled !== false,
          slot: "teek-home-card-top-article"
        },
        category: {
          el: _sfc_main$4,
          props: { categoriesPage },
          show: (homePage || categoriesPage) && category?.enabled !== false,
          slot: "teek-home-card-category"
        },
        tag: {
          el: _sfc_main$3,
          props: { tagsPage },
          show: (homePage || tagsPage) && tag?.enabled !== false,
          slot: "teek-home-card-tag"
        },
        docAnalysis: {
          el: _sfc_main$2,
          show: homePage && docAnalysis?.enabled !== false,
          slot: "teek-home-card-doc-analysis"
        },
        friendLink: {
          el: _sfc_main$1,
          show: homePage && friendLink?.enabled !== false,
          slot: "teek-home-card-friend-link"
        }
      };
    });
    const windowTransition = useWindowTransitionConfig((config) => config.card);
    const cardListInstance = ref(null);
    const { start } = useWindowTransition(cardListInstance, false);
    onMounted(() => {
      windowTransition.value && start();
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock(
        "div",
        {
          class: normalizeClass([unref(ns).b(), "flx-column"])
        },
        [
          renderSlot(_ctx.$slots, "teek-home-card-before"),
          renderSlot(_ctx.$slots, "teek-home-card", { homeCard: finalHomeCardSort.value }, () => [
            (openBlock(true), createElementBlock(
              Fragment,
              null,
              renderList(finalHomeCardSort.value, (item) => {
                return openBlock(), createElementBlock(
                  Fragment,
                  { key: item },
                  [
                    createCommentVNode(" \u4F7F\u7528\u6DE1\u5165\u52A8\u753B "),
                    unref(windowTransition) ? (openBlock(), createElementBlock(
                      Fragment,
                      { key: 0 },
                      [
                        _ctx.$slots[`${componentMap.value[item]?.slot}-before`] ? (openBlock(), createElementBlock(
                          "div",
                          {
                            key: 0,
                            ref_for: true,
                            ref_key: "cardListInstance",
                            ref: cardListInstance
                          },
                          [
                            renderSlot(_ctx.$slots, `${componentMap.value[item]?.slot}-before`)
                          ],
                          512
                          /* NEED_PATCH */
                        )) : createCommentVNode("v-if", true),
                        createElementVNode(
                          "div",
                          {
                            ref_for: true,
                            ref_key: "cardListInstance",
                            ref: cardListInstance
                          },
                          [
                            renderSlot(_ctx.$slots, componentMap.value[item]?.slot, {}, () => [
                              componentMap.value[item]?.show ? (openBlock(), createBlock(
                                resolveDynamicComponent(componentMap.value[item]?.el),
                                mergeProps({
                                  key: 0,
                                  ref_for: true
                                }, componentMap.value[item]?.props),
                                null,
                                16
                                /* FULL_PROPS */
                              )) : createCommentVNode("v-if", true)
                            ])
                          ],
                          512
                          /* NEED_PATCH */
                        ),
                        _ctx.$slots[`${componentMap.value[item]?.slot}-after`] ? (openBlock(), createElementBlock(
                          "div",
                          {
                            key: 1,
                            ref_for: true,
                            ref_key: "cardListInstance",
                            ref: cardListInstance
                          },
                          [
                            renderSlot(_ctx.$slots, `${componentMap.value[item]?.slot}-after`)
                          ],
                          512
                          /* NEED_PATCH */
                        )) : createCommentVNode("v-if", true)
                      ],
                      64
                      /* STABLE_FRAGMENT */
                    )) : (openBlock(), createElementBlock(
                      Fragment,
                      { key: 1 },
                      [
                        createCommentVNode(" \u4E0D\u4F7F\u7528\u6DE1\u5165\u52A8\u753B "),
                        componentMap.value[item]?.slot ? renderSlot(_ctx.$slots, `${componentMap.value[item]?.slot}-before`, { key: 0 }) : createCommentVNode("v-if", true),
                        componentMap.value[item]?.slot ? renderSlot(_ctx.$slots, componentMap.value[item]?.slot, { key: 1 }, () => [
                          componentMap.value[item]?.show ? (openBlock(), createBlock(
                            resolveDynamicComponent(componentMap.value[item]?.el),
                            mergeProps({
                              key: 0,
                              ref_for: true
                            }, componentMap.value[item]?.props),
                            null,
                            16
                            /* FULL_PROPS */
                          )) : createCommentVNode("v-if", true)
                        ]) : createCommentVNode("v-if", true),
                        componentMap.value[item]?.slot ? renderSlot(_ctx.$slots, `${componentMap.value[item]?.slot}-after`, { key: 2 }) : createCommentVNode("v-if", true)
                      ],
                      64
                      /* STABLE_FRAGMENT */
                    ))
                  ],
                  64
                  /* STABLE_FRAGMENT */
                );
              }),
              128
              /* KEYED_FRAGMENT */
            ))
          ]),
          renderSlot(_ctx.$slots, "teek-home-card-after")
        ],
        2
        /* CLASS */
      );
    };
  }
});

export { _sfc_main as default };
