import { defineComponent, computed, ref, watch, nextTick, createElementBlock, openBlock, unref, normalizeClass, createBlock, createCommentVNode, createVNode, createElementVNode, toDisplayString } from 'vue';
import { useData } from 'vitepress';
import { useUvPv } from '../../../../composables/useUvPv.mjs';
import { useNamespace } from '../../../../composables/useNamespace.mjs';
import 'vitepress-theme-teek/theme-chalk/tk-copy-banner.css';
import { useLocale } from '../../../../composables/useLocale.mjs';
import { useVpRouter } from '../../../../composables/useVpRouter.mjs';
import '../../../../composables/useZIndex.mjs';
import readingIcon from '../../../../static/icons/reading.mjs';
import clockIcon from '../../../../static/icons/clock.mjs';
import viewIcon from '../../../../static/icons/view.mjs';
import _sfc_main$1 from '../../ArticleBreadcrumb/src/index.vue2.mjs';
import { useTeekConfig } from '../../ConfigProvider/index.mjs';
import _sfc_main$2 from '../../ArticleInfo/src/index.vue2.mjs';
import _sfc_main$3 from '../../../common/Icon/src/index.vue2.mjs';
import '@iconify/vue';

const _hoisted_1 = ["aria-label"];
const _hoisted_2 = {
  key: 0,
  class: "flx-center"
};
const _hoisted_3 = ["title", "aria-label"];
const _hoisted_4 = {
  key: 1,
  class: "flx-center"
};
const _hoisted_5 = ["title", "aria-label"];
const _hoisted_6 = {
  key: 2,
  class: "flx-center"
};
const _hoisted_7 = ["title", "aria-label"];
var _sfc_main = /* @__PURE__ */ defineComponent({
  ...{ name: "ArticleAnalyze" },
  __name: "index",
  props: {
    breadcrumb: { type: Boolean, default: true },
    scope: { default: "article" }
  },
  setup(__props) {
    const ns = useNamespace("article-analyze");
    const { t } = useLocale();
    const { getTeekConfig, getTeekConfigRef } = useTeekConfig();
    const { theme, frontmatter } = useData();
    const vpRouter = useVpRouter();
    const { router } = vpRouter;
    const post = computed(() => ({
      author: getTeekConfig("author", {}),
      date: frontmatter.value.date,
      frontmatter: frontmatter.value,
      url: "",
      relativePath: ""
    }));
    const docAnalysisInfo = computed(() => theme.value.docAnalysisInfo || {});
    const pageViewInfo = computed(() => {
      let pageViewInfo2 = {};
      docAnalysisInfo.value.eachFileWords?.forEach((item) => {
        if (item.fileInfo.relativePath === router.route.data.filePath) pageViewInfo2 = item;
      });
      return pageViewInfo2;
    });
    const articleConfig = getTeekConfigRef("articleAnalyze", {
      showInfo: true,
      showIcon: true,
      teleport: {}
    });
    const isShowInfo = computed(() => {
      const arr = [articleConfig.value.showInfo].flat();
      if (arr.includes(true) || arr.includes("article")) return true;
      return false;
    });
    const baseInfoRef = ref();
    const teleportInfo = () => {
      const { selector, position = "after", className = "teleport" } = articleConfig.value.teleport || {};
      const baseInfoRefConst = baseInfoRef.value;
      if (!selector || !baseInfoRefConst) return;
      const docDomContainer = document.querySelector("#VPContent");
      const targetDom = docDomContainer?.querySelector(selector);
      targetDom?.parentElement?.querySelectorAll(`.${ns.e("wrapper")}`).forEach((v) => v.remove());
      baseInfoRefConst.classList.add(className);
      targetDom?.[position]?.(baseInfoRefConst);
    };
    watch(router.route, () => nextTick(teleportInfo), { immediate: true, flush: "post" });
    const docAnalysisConfig = getTeekConfigRef("docAnalysis", {
      wordCount: true,
      readingTime: true,
      statistics: {}
    });
    const statisticsConfig = computed(() => ({
      url: "",
      provider: "",
      pageView: true,
      tryRequest: false,
      tryCount: 5,
      tryIterationTime: 2e3,
      permalink: true,
      ...docAnalysisConfig.value.statistics
    }));
    const usePageView = computed(() => !!statisticsConfig.value.provider && statisticsConfig.value.pageView);
    const { pagePv, isGet, request } = useUvPv(false, statisticsConfig.value);
    watch(usePageView, (newVal) => {
      if (newVal) request();
    });
    watch(
      router.route,
      () => {
        if (usePageView.value) {
          if (statisticsConfig.value.permalink && router.state?.permalinkPlugin) {
            nextTick(request);
          } else request();
        }
      },
      { immediate: true }
    );
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(`${unref(ns).b()} flx-justify-between`),
        "aria-label": unref(t)("tk.articleAnalyze.label")
      }, [
        __props.breadcrumb ? (openBlock(), createBlock(unref(_sfc_main$1), { key: 0 })) : createCommentVNode("v-if", true),
        isShowInfo.value ? (openBlock(), createElementBlock(
          "div",
          {
            key: 1,
            ref_key: "baseInfoRef",
            ref: baseInfoRef,
            class: normalizeClass(`${unref(ns).e("wrapper")} flx-align-center`)
          },
          [
            createVNode(unref(_sfc_main$2), {
              post: post.value,
              scope: __props.scope
            }, null, 8, ["post", "scope"]),
            unref(docAnalysisConfig).wordCount && pageViewInfo.value.wordCount ? (openBlock(), createElementBlock("div", _hoisted_2, [
              unref(articleConfig).showIcon ? (openBlock(), createBlock(unref(_sfc_main$3), {
                key: 0,
                icon: unref(readingIcon),
                "aria-hidden": "true"
              }, null, 8, ["icon"])) : createCommentVNode("v-if", true),
              createElementVNode("a", {
                title: unref(t)("tk.articleAnalyze.wordCount"),
                class: "hover-color",
                "aria-label": unref(t)("tk.articleAnalyze.wordCount")
              }, toDisplayString(pageViewInfo.value.wordCount), 9, _hoisted_3)
            ])) : createCommentVNode("v-if", true),
            unref(docAnalysisConfig).readingTime && pageViewInfo.value.readingTime ? (openBlock(), createElementBlock("div", _hoisted_4, [
              unref(articleConfig).showIcon ? (openBlock(), createBlock(unref(_sfc_main$3), {
                key: 0,
                icon: unref(clockIcon)
              }, null, 8, ["icon"])) : createCommentVNode("v-if", true),
              createElementVNode("a", {
                title: unref(t)("tk.articleAnalyze.readingTime"),
                class: "hover-color",
                "aria-label": unref(t)("tk.articleAnalyze.readingTime")
              }, toDisplayString(pageViewInfo.value.readingTime), 9, _hoisted_5)
            ])) : createCommentVNode("v-if", true),
            usePageView.value ? (openBlock(), createElementBlock("div", _hoisted_6, [
              unref(articleConfig).showIcon ? (openBlock(), createBlock(unref(_sfc_main$3), {
                key: 0,
                icon: unref(viewIcon)
              }, null, 8, ["icon"])) : createCommentVNode("v-if", true),
              createElementVNode("a", {
                title: unref(t)("tk.articleAnalyze.pageView"),
                class: "hover-color",
                "aria-label": unref(t)("tk.articleAnalyze.pageView")
              }, toDisplayString(unref(isGet) ? unref(pagePv) : "Get..."), 9, _hoisted_7)
            ])) : createCommentVNode("v-if", true)
          ],
          2
          /* CLASS */
        )) : createCommentVNode("v-if", true)
      ], 10, _hoisted_1);
    };
  }
});

export { _sfc_main as default };
