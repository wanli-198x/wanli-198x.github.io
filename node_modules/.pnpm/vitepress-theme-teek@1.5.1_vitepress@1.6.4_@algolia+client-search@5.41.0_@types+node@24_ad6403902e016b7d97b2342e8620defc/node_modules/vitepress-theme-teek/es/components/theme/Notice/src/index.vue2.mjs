import { defineComponent, ref, computed, watch, onMounted, createElementBlock, openBlock, unref, normalizeClass, createBlock, createCommentVNode, withDirectives, resolveDynamicComponent, withCtx, createTextVNode, toDisplayString, normalizeStyle, createVNode, vShow, createElementVNode, renderSlot } from 'vue';
import { useData } from 'vitepress';
import { isString, isClient } from '../../../../helper/dist/index.mjs';
import { useNamespace } from '../../../../composables/useNamespace.mjs';
import 'vitepress-theme-teek/theme-chalk/tk-copy-banner.css';
import { useLocale } from '../../../../composables/useLocale.mjs';
import { useVpRouter } from '../../../../composables/useVpRouter.mjs';
import '../../../../composables/useZIndex.mjs';
import closeIcon from '../../../../static/icons/close.mjs';
import noticeIcon from '../../../../static/icons/notice.mjs';
import { useTeekConfig, useCommon } from '../../ConfigProvider/index.mjs';
import _sfc_main$1 from '../../../common/Icon/src/index.vue2.mjs';
import '@iconify/vue';

const _hoisted_1 = ["aria-label"];
const _hoisted_2 = ["aria-label"];
const _hoisted_3 = ["aria-label"];
const _hoisted_4 = { class: "flx-align-center" };
const _hoisted_5 = {
  id: "notice-title",
  class: "title sle"
};
const _hoisted_6 = ["aria-label"];
var _sfc_main = /* @__PURE__ */ defineComponent({
  ...{ name: "Notice" },
  __name: "index",
  setup(__props) {
    const ns = useNamespace("notice");
    const { t } = useLocale();
    const { getTeekConfigRef } = useTeekConfig();
    const vpRouter = useVpRouter();
    const { localeIndex } = useData();
    const noticeConfig = getTeekConfigRef("notice", {
      noticeStyle: void 0,
      iconStyle: {},
      popoverStyle: {},
      title: t("tk.notice.title"),
      initOpen: true,
      duration: 0,
      mobileMinify: false,
      reopen: true,
      useStorage: true,
      twinkle: false,
      position: "top",
      noticeIcon,
      closeIcon,
      onAfterRouteChange: void 0
    });
    const destroyNoticeIcon = ref(false);
    const showNoticeIcon = computed(() => !showPopover.value && !destroyNoticeIcon.value);
    const showPopover = ref(noticeConfig.value.initOpen);
    watch(
      () => noticeConfig.value.initOpen,
      (newValue) => showPopover.value = newValue
    );
    const styleObj = computed(() => {
      const { noticeStyle } = noticeConfig.value;
      if (!noticeStyle) return "";
      return noticeStyle.trim().startsWith(`.${ns.b()}`) ? noticeStyle : `.${ns.b()} { ${noticeStyle} }`;
    });
    const noticeTitle = computed(() => {
      const { title } = noticeConfig.value;
      if (isString(title)) return title;
      return title(localeIndex.value);
    });
    const { isMobile } = useCommon();
    watch(
      () => noticeConfig.value.mobileMinify,
      (val) => {
        if (isMobile.value) destroyNoticeIcon.value = val;
      },
      { immediate: true }
    );
    let timer;
    const closePopoverWhenTimeout = () => {
      const { duration } = noticeConfig.value;
      if (showPopover.value && duration > 0) {
        if (timer) {
          clearTimeout(timer);
          timer = null;
        }
        timer = setTimeout(handleClosePopover, duration);
      }
    };
    onMounted(() => {
      vpRouter.bindAfterRouteChange(
        ns.join("notice"),
        () => noticeConfig.value.onAfterRouteChange?.(vpRouter.route, showNoticeIcon.value, showPopover.value)
      );
      closePopoverWhenTimeout();
    });
    const openOrDisableScroll = (action) => {
      if (!isClient) return;
      if (noticeConfig.value.position !== "center") return;
      const actions = {
        open: "remove",
        disable: "add"
      };
      document.documentElement.classList[actions[action]]("disable-scroll");
    };
    const storageKey = computed(() => ns.storageKey("notice", localeIndex.value, isClient ? window.location.hostname : ""));
    if (noticeConfig.value.useStorage) {
      watch(
        localeIndex,
        () => {
          if (!noticeConfig.value.useStorage) return;
          const oldValue = localStorage.getItem(storageKey.value);
          if (oldValue) {
            const isShowPopover = oldValue === "true";
            showPopover.value = isShowPopover;
            if (isShowPopover) openOrDisableScroll("disable");
          }
        },
        { immediate: true }
      );
    }
    const handleOpenPopover = () => {
      showPopover.value = true;
      storagePopoverState("true");
      closePopoverWhenTimeout();
      openOrDisableScroll("disable");
    };
    const handleClosePopover = () => {
      showPopover.value = false;
      storagePopoverState("false");
      if (!noticeConfig.value.reopen) destroyNoticeIcon.value = true;
      if (timer) clearTimeout(timer);
      openOrDisableScroll("open");
    };
    const storagePopoverState = (state) => {
      if (noticeConfig.value.useStorage) localStorage.setItem(storageKey.value, state);
    };
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass([unref(ns).b(), unref(ns).join("wallpaper-outside")]),
        "aria-label": unref(t)("tk.notice.label")
      }, [
        styleObj.value ? (openBlock(), createBlock(resolveDynamicComponent("style"), { key: 0 }, {
          default: withCtx(() => [
            createTextVNode(
              toDisplayString(styleObj.value),
              1
              /* TEXT */
            )
          ]),
          _: 1
          /* STABLE */
        })) : createCommentVNode("v-if", true),
        createCommentVNode(" \u516C\u544A\u56FE\u6807 "),
        !destroyNoticeIcon.value ? withDirectives((openBlock(), createElementBlock("div", {
          key: 1,
          class: normalizeClass([unref(ns).e("icon"), { twinkle: unref(noticeConfig).twinkle }, "flx"]),
          style: normalizeStyle(unref(noticeConfig).iconStyle),
          onClick: handleOpenPopover,
          role: "button",
          "aria-label": unref(t)("tk.notice.openLabel")
        }, [
          createVNode(unref(_sfc_main$1), {
            icon: unref(noticeConfig).noticeIcon,
            color: "#ffffff",
            size: "14px",
            "aria-hidden": "true"
          }, null, 8, ["icon"])
        ], 14, _hoisted_2)), [
          [vShow, showNoticeIcon.value]
        ]) : createCommentVNode("v-if", true),
        createCommentVNode(" \u516C\u544A\u5F39\u7A97 "),
        withDirectives(createElementVNode(
          "div",
          {
            class: normalizeClass([unref(ns).e("popover"), unref(ns).is(unref(noticeConfig).position)]),
            style: normalizeStyle(unref(noticeConfig).popoverStyle),
            role: "dialog",
            "aria-modal": true,
            "aria-labelledby": "notice-title"
          },
          [
            renderSlot(_ctx.$slots, "header", {}, () => [
              createElementVNode("div", {
                class: normalizeClass([unref(ns).e("popover__header"), "flx-justify-between"]),
                "aria-label": unref(t)("tk.notice.headLabel")
              }, [
                createElementVNode("div", _hoisted_4, [
                  createVNode(unref(_sfc_main$1), {
                    icon: unref(noticeConfig).noticeIcon,
                    color: "#ffffff",
                    size: "20px",
                    "aria-hidden": "true"
                  }, null, 8, ["icon"]),
                  createElementVNode(
                    "span",
                    _hoisted_5,
                    toDisplayString(noticeTitle.value),
                    1
                    /* TEXT */
                  )
                ]),
                createVNode(unref(_sfc_main$1), {
                  icon: unref(noticeConfig).closeIcon,
                  color: "#ffffff",
                  size: "20px",
                  class: normalizeClass(unref(ns).join("pointer")),
                  onClick: handleClosePopover,
                  role: "button",
                  "aria-label": unref(t)("tk.notice.closeLabel")
                }, null, 8, ["icon", "class", "aria-label"])
              ], 10, _hoisted_3)
            ]),
            createElementVNode("div", {
              class: normalizeClass(unref(ns).e("popover__content")),
              "aria-label": unref(t)("tk.notice.contentLabel")
            }, [
              renderSlot(_ctx.$slots, "teek-notice-content")
            ], 10, _hoisted_6)
          ],
          6
          /* CLASS, STYLE */
        ), [
          [vShow, showPopover.value]
        ]),
        createCommentVNode(" \u906E\u7F69\u5C42\uFF0C\u4E0E\u516C\u544A\u5F39\u7A97\u4E00\u8D77\u51FA\u73B0 "),
        withDirectives(createElementVNode(
          "div",
          {
            class: normalizeClass(unref(ns).e("mask")),
            role: "presentation"
          },
          null,
          2
          /* CLASS */
        ), [
          [vShow, showPopover.value && unref(noticeConfig).position === "center"]
        ])
      ], 10, _hoisted_1);
    };
  }
});

export { _sfc_main as default };
