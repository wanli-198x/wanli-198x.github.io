import { defineComponent, ref, onMounted, createElementBlock, openBlock, normalizeClass, unref, createCommentVNode, createElementVNode, createBlock, Fragment, resolveDynamicComponent, inject } from 'vue';
import { isClient } from '../../../../helper/dist/index.mjs';
import 'vitepress';
import { useNamespace } from '../../../../composables/useNamespace.mjs';
import 'vitepress-theme-teek/theme-chalk/tk-copy-banner.css';
import { useVpRouter } from '../../../../composables/useVpRouter.mjs';
import '../../../../composables/useZIndex.mjs';
import { useTeekConfig } from '../../ConfigProvider/index.mjs';
import { twikooContext } from './twikoo.mjs';

const _hoisted_1 = ["href", "integrity"];
var _sfc_main = /* @__PURE__ */ defineComponent({
  ...{ name: "CommentTwikoo" },
  __name: "index",
  setup(__props) {
    const ns = useNamespace();
    const vpRouter = useVpRouter();
    const { getTeekConfig } = useTeekConfig();
    const twikooOptions = getTeekConfig("comment", {}).options;
    const {
      envId,
      jsLink = "https://cdn.jsdelivr.net/npm/twikoo@{version}/dist/twikoo.nocss.js",
      jsIntegrity,
      cssLink = "https://cdn.jsdelivr.net/npm/twikoo@{version}/dist/twikoo.css",
      version = "1.6.44",
      katex,
      timeout = 700,
      ...options
    } = twikooOptions;
    const initTwikoo = () => {
      if (!isClient) return console.error("[Teek Error] Not in a client");
      if (!envId) return console.error("[Teek Error] Twikoo initialization failed. Please configure the 'envId'");
      const getTwikooInstance = inject(twikooContext, () => null);
      const twikooOption = { ...options, envId };
      if (getTwikooInstance) getTwikooInstance("#twikoo", twikooOption);
      else if (window.twikoo) window.twikoo.init({ ...twikooOption, el: "#twikoo" });
    };
    const twikooJs = ref(null);
    const initJs = () => {
      const t = twikooJs.value;
      if (t) t.onload = initTwikoo;
    };
    const reloadTwikoo = (to) => {
      if (to) setTimeout(initTwikoo, timeout);
    };
    const initCss = () => {
      fetch(cssLink.replace("{version}", version)).then((response) => {
        if (!response.ok) throw new Error("[Teek Error] Twikoo Css Link Network response was not ok");
        return response.text();
      }).then((data) => {
        if (document.getElementById("twikoo-css")) return;
        const style = document.createElement("style");
        style.type = "text/css";
        style.id = "twikoo-css";
        style.textContent = `.${ns.b("twikoo")} {${data}}`;
        document.head.appendChild(style);
      });
    };
    onMounted(() => {
      initJs();
      initCss();
      twikooJs.value && vpRouter.bindAfterRouteChange(ns.join("twikoo"), (href) => reloadTwikoo(href));
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock(
        "div",
        {
          class: normalizeClass(unref(ns).b("twikoo"))
        },
        [
          createCommentVNode(" KaTeX "),
          unref(katex) ? (openBlock(), createElementBlock(
            Fragment,
            { key: 0 },
            [
              createElementVNode("link", {
                rel: "stylesheet",
                href: unref(katex).cssLink,
                integrity: unref(katex).cssIntegrity,
                crossorigin: "anonymous"
              }, null, 8, _hoisted_1),
              (openBlock(), createBlock(resolveDynamicComponent("script"), {
                defer: "",
                src: unref(katex).coreJsLink,
                integrity: unref(katex).coreJsIntegrity,
                crossorigin: "anonymous"
              }, null, 8, ["src", "integrity"])),
              (openBlock(), createBlock(resolveDynamicComponent("script"), {
                defer: "",
                src: unref(katex).renderJsLink,
                integrity: unref(katex).renderJsIntegrity,
                crossorigin: "anonymous"
              }, null, 8, ["src", "integrity"]))
            ],
            64
            /* STABLE_FRAGMENT */
          )) : createCommentVNode("v-if", true),
          _cache[0] || (_cache[0] = createElementVNode(
            "div",
            { id: "twikoo" },
            null,
            -1
            /* CACHED */
          )),
          (openBlock(), createBlock(resolveDynamicComponent("script"), {
            src: unref(jsLink).replace("{version}", unref(version)),
            integrity: unref(jsIntegrity),
            crossorigin: "anonymous",
            ref_key: "twikooJs",
            ref: twikooJs
          }, null, 8, ["src", "integrity"]))
        ],
        2
        /* CLASS */
      );
    };
  }
});

export { _sfc_main as default };
