import { defineComponent, ref, computed, createBlock, openBlock, Transition, unref, withCtx, renderSlot, withDirectives, createElementVNode, normalizeClass, createVNode, vShow } from 'vue';
import { isClient } from '../../../../helper/dist/index.mjs';
import { useEventListener } from '../../../../composables/useEventListener.mjs';
import 'vitepress';
import 'vitepress-theme-teek/theme-chalk/tk-copy-banner.css';
import { useDebounce } from '../../../../composables/useDebounce.mjs';
import { useLocale } from '../../../../composables/useLocale.mjs';
import '../../../../composables/useZIndex.mjs';
import commentIcon from '../../../../static/icons/comment.mjs';
import { useTeekConfig } from '../../ConfigProvider/index.mjs';
import message from '../../../common/Message/src/method.mjs';
import _sfc_main$1 from '../../../common/Icon/src/index.vue2.mjs';
import '@iconify/vue';
import { ns } from './namespace.mjs';

const _hoisted_1 = ["title", "aria-label"];
var _sfc_main = /* @__PURE__ */ defineComponent({
  ...{ name: "ToComment" },
  __name: "ToComment",
  setup(__props) {
    const { t } = useLocale();
    const { getTeekConfigRef } = useTeekConfig();
    const toCommentConfig = getTeekConfigRef("toComment", {});
    const scrollTop = ref(0);
    const showToComment = computed(() => {
      if (!isClient) return false;
      const docContentHeight = document.querySelector(".content-container .main")?.getBoundingClientRect().height;
      const docFooterHeight = document.querySelector(".VPDocFooter")?.getBoundingClientRect().height || 200;
      let height = 0;
      if (docContentHeight) height = docContentHeight - docFooterHeight - window.innerHeight / 2;
      return scrollTop.value < height;
    });
    const scrollToComment = useDebounce(
      () => {
        if (!isClient) return;
        document.querySelector(`#${ns.join("comment")}`)?.scrollIntoView({ behavior: "smooth" });
        setTimeout(() => {
          toCommentConfig.value.done?.(message);
        }, 600);
      },
      500,
      true
    );
    const watchScroll = () => {
      scrollTop.value = document.documentElement.scrollTop || document.body.scrollTop || 0;
    };
    useEventListener(() => window, "scroll", watchScroll);
    return (_ctx, _cache) => {
      return openBlock(), createBlock(Transition, {
        name: unref(ns).join("fade")
      }, {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default", {
            show: showToComment.value,
            icon: unref(commentIcon),
            scrollToComment: unref(scrollToComment)
          }, () => [
            withDirectives(createElementVNode("div", {
              title: unref(t)("tk.rightBottomButton.toComment"),
              class: normalizeClass(unref(ns).e("button")),
              onClick: _cache[0] || (_cache[0] = //@ts-ignore
              (...args) => unref(scrollToComment) && unref(scrollToComment)(...args)),
              role: "button",
              "aria-label": unref(t)("tk.rightBottomButton.toComment")
            }, [
              createVNode(unref(_sfc_main$1), {
                icon: unref(commentIcon),
                "aria-hidden": "true"
              }, null, 8, ["icon"])
            ], 10, _hoisted_1), [
              [vShow, showToComment.value]
            ])
          ])
        ]),
        _: 3
        /* FORWARDED */
      }, 8, ["name"]);
    };
  }
});

export { _sfc_main as default };
