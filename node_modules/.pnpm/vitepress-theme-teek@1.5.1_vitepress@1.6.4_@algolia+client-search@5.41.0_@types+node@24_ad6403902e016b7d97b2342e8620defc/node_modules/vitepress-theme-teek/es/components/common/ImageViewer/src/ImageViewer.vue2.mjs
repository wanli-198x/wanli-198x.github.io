import { defineComponent, ref, effectScope, shallowRef, computed, watch, nextTick, onMounted, createBlock, openBlock, Teleport, createVNode, Transition, withCtx, createElementVNode, normalizeStyle, normalizeClass, unref, createCommentVNode, createElementBlock, renderSlot, withModifiers, Fragment, createTextVNode, toDisplayString, renderList, withDirectives, vShow } from 'vue';
import { useEventListener } from '../../../../composables/useEventListener.mjs';
import 'vitepress';
import { useNamespace } from '../../../../composables/useNamespace.mjs';
import 'vitepress-theme-teek/theme-chalk/tk-copy-banner.css';
import { useDebounce } from '../../../../composables/useDebounce.mjs';
import { useLocale } from '../../../../composables/useLocale.mjs';
import { useZIndex } from '../../../../composables/useZIndex.mjs';
import closeIcon from '../../../../static/icons/close.mjs';
import arrowLeftIcon from '../../../../static/icons/arrowLeft.mjs';
import arrowRightIcon from '../../../../static/icons/arrowRight.mjs';
import fullscreenIcon from '../../../../static/icons/fullscreen.mjs';
import refreshLeftIcon from '../../../../static/icons/refreshLeft.mjs';
import refreshRightIcon from '../../../../static/icons/refreshRight.mjs';
import scaleToOriginalIcon from '../../../../static/icons/scaleToOriginal.mjs';
import zoomInIcon from '../../../../static/icons/zoomIn.mjs';
import zoomOutIcon from '../../../../static/icons/zoomOut.mjs';
import TkFocusTrap from '../../FocusTrap/src/index.vue.mjs';
import _sfc_main$1 from '../../Icon/src/index.vue2.mjs';
import '@iconify/vue';

const _hoisted_1 = ["src", "crossorigin"];
var _sfc_main = /* @__PURE__ */ defineComponent({
  ...{ name: "ImageViewer" },
  __name: "ImageViewer",
  props: {
    urlList: { default: () => [] },
    zIndex: {},
    initialIndex: { default: 0 },
    infinite: { type: Boolean, default: true },
    hideOnClickModal: { type: Boolean, default: false },
    teleported: { type: Boolean },
    closeOnPressEscape: { type: Boolean, default: true },
    zoomRate: { default: 1.2 },
    minScale: { default: 0.2 },
    maxScale: { default: 7 },
    showProgress: { type: Boolean, default: false },
    crossorigin: {}
  },
  emits: ["close", "switch", "rotate"],
  setup(__props, { expose: __expose, emit: __emit }) {
    const modes = {
      CONTAIN: {
        name: "contain",
        icon: fullscreenIcon
      },
      ORIGINAL: {
        name: "original",
        icon: scaleToOriginalIcon
      }
    };
    const props = __props;
    const emit = __emit;
    let prevOverflow = "";
    const ns = useNamespace("image-viewer");
    const { t } = useLocale();
    const { nextZIndex } = useZIndex();
    const wrapper = ref();
    const imgRefs = ref([]);
    const scopeEventListener = effectScope();
    const loading = ref(true);
    const activeIndex = ref(props.initialIndex);
    const mode = shallowRef(modes.CONTAIN);
    const transform = ref({
      scale: 1,
      deg: 0,
      offsetX: 0,
      offsetY: 0,
      enableTransition: false
    });
    const zIndex = ref(props.zIndex ?? nextZIndex());
    const isSingle = computed(() => {
      const { urlList } = props;
      return urlList.length <= 1;
    });
    const isFirst = computed(() => activeIndex.value === 0);
    const isLast = computed(() => activeIndex.value === props.urlList.length - 1);
    const currentImg = computed(() => props.urlList[activeIndex.value]);
    const arrowPrevKls = computed(() => [ns.e("btn"), ns.e("prev"), ns.is("disabled", !props.infinite && isFirst.value)]);
    const arrowNextKls = computed(() => [ns.e("btn"), ns.e("next"), ns.is("disabled", !props.infinite && isLast.value)]);
    const imgStyle = computed(() => {
      const { scale, deg, offsetX, offsetY, enableTransition } = transform.value;
      let translateX = offsetX / scale;
      let translateY = offsetY / scale;
      const radian = deg * Math.PI / 180;
      const cosRadian = Math.cos(radian);
      const sinRadian = Math.sin(radian);
      translateX = translateX * cosRadian + translateY * sinRadian;
      translateY = translateY * cosRadian - offsetX / scale * sinRadian;
      const style = {
        transform: `scale(${scale}) rotate(${deg}deg) translate(${translateX}px, ${translateY}px)`,
        transition: enableTransition ? "transform .3s" : ""
      };
      if (mode.value.name === modes.CONTAIN.name) {
        style.maxWidth = style.maxHeight = "100%";
      }
      return style;
    });
    const progress = computed(() => `${activeIndex.value + 1} / ${props.urlList.length}`);
    const hide = () => {
      unregisterEventListener();
      stopWheelListener?.();
      document.body.style.overflow = prevOverflow;
      emit("close");
    };
    const registerEventListener = () => {
      const keydownHandler = useDebounce((e) => {
        switch (e.code) {
          // ESC
          case "Escape":
            props.closeOnPressEscape && hide();
            break;
          // SPACE
          case "Space":
            toggleMode();
            break;
          // LEFT_ARROW
          case "ArrowLeft":
            prev();
            break;
          // UP_ARROW
          case "ArrowUp":
            handleActions("zoomIn");
            break;
          // RIGHT_ARROW
          case "ArrowRight":
            next();
            break;
          // DOWN_ARROW
          case "ArrowDown":
            handleActions("zoomOut");
            break;
        }
      });
      const mousewheelHandler = useDebounce((e) => {
        const delta = e.deltaY || e.deltaX;
        handleActions(delta < 0 ? "zoomIn" : "zoomOut", {
          zoomRate: props.zoomRate,
          enableTransition: false
        });
      });
      scopeEventListener.run(() => {
        useEventListener(document, "keydown", keydownHandler);
        useEventListener(document, "wheel", mousewheelHandler);
      });
    };
    const unregisterEventListener = () => {
      scopeEventListener.stop();
    };
    const handleImgLoad = () => {
      loading.value = false;
    };
    const handleImgError = (e) => {
      loading.value = false;
      e.target.alt = t("tk.image.error");
    };
    const handleMouseDown = (e) => {
      if (loading.value || e.button !== 0 || !wrapper.value) return;
      transform.value.enableTransition = false;
      const { offsetX, offsetY } = transform.value;
      const startX = e.pageX;
      const startY = e.pageY;
      const dragHandler = useDebounce((ev) => {
        transform.value = {
          ...transform.value,
          offsetX: offsetX + ev.pageX - startX,
          offsetY: offsetY + ev.pageY - startY
        };
      });
      const removeDragHandler = () => {
        document.removeEventListener("mousemove", dragHandler);
        document.removeEventListener("mouseup", removeDragHandler);
      };
      document.addEventListener("mousemove", dragHandler);
      document.addEventListener("mouseup", removeDragHandler);
      e.preventDefault();
    };
    const reset = () => {
      transform.value = {
        scale: 1,
        deg: 0,
        offsetX: 0,
        offsetY: 0,
        enableTransition: false
      };
    };
    const toggleMode = () => {
      if (loading.value) return;
      const modeNames = Object.keys(modes);
      const modeValues = Object.values(modes);
      const currentMode = mode.value.name;
      const index = modeValues.findIndex((i) => i.name === currentMode);
      const nextIndex = (index + 1) % modeNames.length;
      mode.value = modes[modeNames[nextIndex]];
      reset();
    };
    const setActiveItem = (index) => {
      const len = props.urlList.length;
      activeIndex.value = (index + len) % len;
    };
    const prev = () => {
      if (isFirst.value && !props.infinite) return;
      setActiveItem(activeIndex.value - 1);
    };
    const next = () => {
      if (isLast.value && !props.infinite) return;
      setActiveItem(activeIndex.value + 1);
    };
    const handleActions = (action, options = {}) => {
      if (loading.value) return;
      const { minScale, maxScale } = props;
      const { zoomRate, rotateDeg, enableTransition } = {
        zoomRate: props.zoomRate,
        rotateDeg: 90,
        enableTransition: true,
        ...options
      };
      switch (action) {
        case "zoomOut":
          if (transform.value.scale > minScale) {
            transform.value.scale = Number.parseFloat((transform.value.scale / zoomRate).toFixed(3));
          }
          break;
        case "zoomIn":
          if (transform.value.scale < maxScale) {
            transform.value.scale = Number.parseFloat((transform.value.scale * zoomRate).toFixed(3));
          }
          break;
        case "clockwise":
          transform.value.deg += rotateDeg;
          emit("rotate", transform.value.deg);
          break;
        case "anticlockwise":
          transform.value.deg -= rotateDeg;
          emit("rotate", transform.value.deg);
          break;
      }
      transform.value.enableTransition = enableTransition;
    };
    const onFocusoutPrevented = (event) => {
      if (event.detail?.focusReason === "pointer") {
        event.preventDefault();
      }
    };
    const onCloseRequested = () => {
      if (props.closeOnPressEscape) {
        hide();
      }
    };
    const wheelHandler = (e) => {
      if (!e.ctrlKey) return;
      if (e.deltaY < 0) {
        e.preventDefault();
        return false;
      } else if (e.deltaY > 0) {
        e.preventDefault();
        return false;
      }
    };
    watch(currentImg, () => {
      nextTick(() => {
        const $img = imgRefs.value[0];
        if (!$img?.complete) {
          loading.value = true;
        }
      });
    });
    watch(activeIndex, (val) => {
      reset();
      emit("switch", val);
    });
    registerEventListener();
    const stopWheelListener = useEventListener(document, "wheel", wheelHandler, { passive: false });
    onMounted(() => {
      prevOverflow = document.body.style.overflow;
      document.body.style.overflow = "hidden";
    });
    __expose({
      /**
       * 手动切换图片
       */
      setActiveItem
    });
    return (_ctx, _cache) => {
      return openBlock(), createBlock(Teleport, {
        disabled: !__props.teleported,
        to: "body"
      }, [
        createVNode(Transition, {
          name: "viewer-fade",
          appear: ""
        }, {
          default: withCtx(() => [
            createElementVNode(
              "div",
              {
                ref_key: "wrapper",
                ref: wrapper,
                tabindex: -1,
                class: normalizeClass(unref(ns).e("wrapper")),
                style: normalizeStyle({ zIndex: zIndex.value })
              },
              [
                createVNode(unref(TkFocusTrap), {
                  loop: "",
                  trapped: "",
                  "focus-trap-el": wrapper.value,
                  "focus-start-el": "container",
                  onFocusoutPrevented,
                  onReleaseRequested: onCloseRequested
                }, {
                  default: withCtx(() => [
                    createElementVNode(
                      "div",
                      {
                        class: normalizeClass(unref(ns).e("mask")),
                        onClick: _cache[0] || (_cache[0] = withModifiers(($event) => __props.hideOnClickModal && hide(), ["self"]))
                      },
                      null,
                      2
                      /* CLASS */
                    ),
                    createCommentVNode(" CLOSE "),
                    createElementVNode(
                      "span",
                      {
                        class: normalizeClass([unref(ns).e("btn"), unref(ns).e("close")]),
                        onClick: hide
                      },
                      [
                        createVNode(unref(_sfc_main$1), { icon: unref(closeIcon) }, null, 8, ["icon"])
                      ],
                      2
                      /* CLASS */
                    ),
                    createCommentVNode(" ARROW "),
                    !isSingle.value ? (openBlock(), createElementBlock(
                      Fragment,
                      { key: 0 },
                      [
                        createElementVNode(
                          "span",
                          {
                            class: normalizeClass(arrowPrevKls.value),
                            onClick: prev
                          },
                          [
                            createVNode(unref(_sfc_main$1), { icon: unref(arrowLeftIcon) }, null, 8, ["icon"])
                          ],
                          2
                          /* CLASS */
                        ),
                        createElementVNode(
                          "span",
                          {
                            class: normalizeClass(arrowNextKls.value),
                            onClick: next
                          },
                          [
                            createVNode(unref(_sfc_main$1), { icon: unref(arrowRightIcon) }, null, 8, ["icon"])
                          ],
                          2
                          /* CLASS */
                        )
                      ],
                      64
                      /* STABLE_FRAGMENT */
                    )) : createCommentVNode("v-if", true),
                    _ctx.$slots.progress || __props.showProgress ? (openBlock(), createElementBlock(
                      "div",
                      {
                        key: 1,
                        class: normalizeClass([unref(ns).e("btn"), unref(ns).e("progress")])
                      },
                      [
                        renderSlot(_ctx.$slots, "progress", {
                          activeIndex: activeIndex.value,
                          total: __props.urlList.length
                        }, () => [
                          createTextVNode(
                            toDisplayString(progress.value),
                            1
                            /* TEXT */
                          )
                        ])
                      ],
                      2
                      /* CLASS */
                    )) : createCommentVNode("v-if", true),
                    createCommentVNode(" ACTIONS "),
                    createElementVNode(
                      "div",
                      {
                        class: normalizeClass([unref(ns).e("btn"), unref(ns).e("actions")])
                      },
                      [
                        createElementVNode(
                          "div",
                          {
                            class: normalizeClass(unref(ns).e("actions__inner"))
                          },
                          [
                            renderSlot(_ctx.$slots, "toolbar", {
                              actions: handleActions,
                              prev,
                              next,
                              reset: toggleMode,
                              activeIndex: activeIndex.value,
                              setActiveItem
                            }, () => [
                              createVNode(unref(_sfc_main$1), {
                                icon: unref(zoomOutIcon),
                                onClick: _cache[1] || (_cache[1] = ($event) => handleActions("zoomOut"))
                              }, null, 8, ["icon"]),
                              createVNode(unref(_sfc_main$1), {
                                icon: unref(zoomInIcon),
                                onClick: _cache[2] || (_cache[2] = ($event) => handleActions("zoomIn"))
                              }, null, 8, ["icon"]),
                              createElementVNode(
                                "i",
                                {
                                  class: normalizeClass(unref(ns).e("actions__divider"))
                                },
                                null,
                                2
                                /* CLASS */
                              ),
                              createVNode(unref(_sfc_main$1), {
                                icon: mode.value.icon,
                                onClick: toggleMode
                              }, null, 8, ["icon"]),
                              createElementVNode(
                                "i",
                                {
                                  class: normalizeClass(unref(ns).e("actions__divider"))
                                },
                                null,
                                2
                                /* CLASS */
                              ),
                              createVNode(unref(_sfc_main$1), {
                                icon: unref(refreshLeftIcon),
                                onClick: _cache[3] || (_cache[3] = ($event) => handleActions("anticlockwise"))
                              }, null, 8, ["icon"]),
                              createVNode(unref(_sfc_main$1), {
                                icon: unref(refreshRightIcon),
                                onClick: _cache[4] || (_cache[4] = ($event) => handleActions("clockwise"))
                              }, null, 8, ["icon"])
                            ])
                          ],
                          2
                          /* CLASS */
                        )
                      ],
                      2
                      /* CLASS */
                    ),
                    createCommentVNode(" CANVAS "),
                    createElementVNode(
                      "div",
                      {
                        class: normalizeClass(unref(ns).e("canvas"))
                      },
                      [
                        (openBlock(true), createElementBlock(
                          Fragment,
                          null,
                          renderList(__props.urlList, (url, i) => {
                            return withDirectives((openBlock(), createElementBlock("img", {
                              ref_for: true,
                              ref: (el) => imgRefs.value[i] = el,
                              key: url,
                              src: url,
                              style: normalizeStyle(imgStyle.value),
                              class: normalizeClass([unref(ns).e("img"), "image-viewer__img"]),
                              crossorigin: __props.crossorigin,
                              onLoad: handleImgLoad,
                              onError: handleImgError,
                              onMousedown: handleMouseDown
                            }, null, 46, _hoisted_1)), [
                              [vShow, i === activeIndex.value]
                            ]);
                          }),
                          128
                          /* KEYED_FRAGMENT */
                        ))
                      ],
                      2
                      /* CLASS */
                    ),
                    renderSlot(_ctx.$slots, "default")
                  ]),
                  _: 3
                  /* FORWARDED */
                }, 8, ["focus-trap-el"])
              ],
              6
              /* CLASS, STYLE */
            )
          ]),
          _: 3
          /* FORWARDED */
        })
      ], 8, ["disabled"]);
    };
  }
});

export { _sfc_main as default };
