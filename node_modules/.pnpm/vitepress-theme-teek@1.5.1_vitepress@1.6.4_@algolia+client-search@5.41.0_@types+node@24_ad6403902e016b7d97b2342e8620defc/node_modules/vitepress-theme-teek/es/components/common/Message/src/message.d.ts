import { AppContext, VNode } from 'vue';
import { TkIconProps } from '../../Icon';
export declare const messageTypes: readonly ["primary", "success", "info", "warning", "error"];
export type MessageType = (typeof messageTypes)[number];
export interface MessageConfigContext {
    max?: number;
    grouping?: boolean;
    duration?: number;
    offset?: number;
    showClose?: boolean;
}
export declare const messagePropsDefaults: {
    customClass: string;
    center: boolean;
    dangerouslyUseHTMLString: boolean;
    duration: number;
    icon: undefined;
    id: string;
    message: string;
    onClose: undefined;
    showClose: boolean;
    type: string;
    plain: boolean;
    offset: number;
    zIndex: number;
    grouping: boolean;
    repeatNum: number;
};
export declare const messageDefaults: {
    appendTo: HTMLElement;
    customClass: string;
    center: boolean;
    dangerouslyUseHTMLString: boolean;
    duration: number;
    icon: undefined;
    id: string;
    message: string;
    onClose: undefined;
    showClose: boolean;
    type: string;
    plain: boolean;
    offset: number;
    zIndex: number;
    grouping: boolean;
    repeatNum: number;
};
export interface MessageProps {
    customClass?: string;
    center?: boolean;
    dangerouslyUseHTMLString?: boolean;
    duration?: number;
    icon?: TkIconProps["icon"];
    id?: string;
    message?: string | VNode | (() => VNode);
    onClose?: () => void;
    showClose?: boolean;
    type?: MessageType;
    plain?: boolean;
    offset?: number;
    zIndex?: number;
    grouping?: boolean;
    repeatNum?: number;
}
export declare const messageEmits: {
    destroy: () => boolean;
};
export interface MessageEmits {
    destroy: [];
}
export type MessageOptions = Partial<Omit<MessageProps, "id"> & {
    appendTo?: HTMLElement | string;
}>;
export type MessageParams = MessageOptions | MessageOptions["message"];
export type MessageParamsNormalized = Omit<MessageProps, "id"> & {
    /**
     * 设置消息的根元素，默认为`document.body`
     */
    appendTo: HTMLElement;
};
export type MessageOptionsWithType = Omit<MessageOptions, "type">;
export type MessageParamsWithType = MessageOptionsWithType | MessageOptions["message"];
export interface MessageHandler {
    /**
     * 关闭消息
     */
    close: () => void;
}
export type MessageFn = {
    (options?: MessageParams, appContext?: null | AppContext): MessageHandler;
    closeAll(type?: MessageType): void;
};
export type MessageTypedFn = (options?: MessageParamsWithType, appContext?: null | AppContext) => MessageHandler;
export type Message = MessageFn & {
    [K in MessageType]: MessageTypedFn;
};
