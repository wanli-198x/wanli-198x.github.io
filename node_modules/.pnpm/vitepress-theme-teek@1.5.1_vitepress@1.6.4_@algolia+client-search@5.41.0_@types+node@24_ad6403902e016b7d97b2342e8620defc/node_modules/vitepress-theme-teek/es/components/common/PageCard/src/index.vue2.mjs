import { defineComponent, mergeModels, useModel, ref, onMounted, onUnmounted, createElementBlock, openBlock, unref, normalizeClass, createCommentVNode, renderSlot, createElementVNode, normalizeProps, guardReactiveProps, createVNode } from 'vue';
import { withBase } from 'vitepress';
import { isValidURL } from '../../../../helper/dist/index.mjs';
import { useNamespace } from '../../../../composables/useNamespace.mjs';
import 'vitepress-theme-teek/theme-chalk/tk-copy-banner.css';
import { useLocale } from '../../../../composables/useLocale.mjs';
import '../../../../composables/useZIndex.mjs';
import arrowLeftIcon from '../../../../static/icons/arrowLeft.mjs';
import arrowRightIcon from '../../../../static/icons/arrowRight.mjs';
import _sfc_main$1 from '../../Icon/src/index.vue2.mjs';
import '@iconify/vue';

const _hoisted_1 = ["aria-label"];
const _hoisted_2 = ["href", "target", "aria-label"];
const _hoisted_3 = ["innerHTML"];
const _hoisted_4 = ["aria-label"];
const _hoisted_5 = ["innerHTML"];
const _hoisted_6 = ["innerHTML"];
const _hoisted_7 = { key: 0 };
const _hoisted_8 = ["aria-label", "aria-disabled"];
const _hoisted_9 = ["aria-label", "aria-disabled"];
var _sfc_main = /* @__PURE__ */ defineComponent({
  ...{ name: "PageCard" },
  __name: "index",
  props: /* @__PURE__ */ mergeModels({
    title: { default: "" },
    titleLink: {},
    titleClick: { type: Function },
    page: { type: Boolean, default: false },
    pageSize: { default: 4 },
    total: { default: 0 },
    autoPage: { type: Boolean, default: false },
    pageSpeed: { default: 4e3 }
  }, {
    "modelValue": { default: 1 },
    "modelModifiers": {}
  }),
  emits: /* @__PURE__ */ mergeModels(["pagination"], ["update:modelValue"]),
  setup(__props, { emit: __emit }) {
    const ns = useNamespace("page-card");
    const pointClass = ns.join("pointer");
    const { t } = useLocale();
    const emit = __emit;
    const pageNum = useModel(__props, "modelValue");
    const pageTotalNum = Math.ceil(__props.total / __props.pageSize);
    const hasNextData = __props.total !== 0 && pageTotalNum !== 1;
    const transitionName = ref(ns.join("scroll"));
    const pagination = (to, type) => {
      emit("pagination", to, type);
      transitionName.value = ns.join(`slide-${type}`);
      if (__props.page && __props.autoPage) startAutoPage();
      const index = pageNum.value % pageTotalNum;
      const res = (index + to) % pageTotalNum;
      if (res < 1) pageNum.value = pageTotalNum + res;
      else if (res > pageTotalNum) pageNum.value = 1;
      else pageNum.value = res;
    };
    let timer;
    const startAutoPage = () => {
      closeAutoPage();
      if (__props.pageSpeed > 0) {
        timer = setTimeout(() => {
          pagination(1, "next");
        }, __props.pageSpeed);
      }
    };
    const closeAutoPage = () => {
      if (timer) {
        clearTimeout(timer);
        timer = null;
      }
    };
    onMounted(() => {
      if (__props.page && __props.autoPage) startAutoPage();
    });
    onUnmounted(() => {
      if (__props.page && __props.autoPage) closeAutoPage();
    });
    const removeHtmlTag = (str) => {
      return str.replace(/<[^>]*>/g, "").trim();
    };
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(`${unref(ns).b()} card`),
        "aria-label": unref(t)("tk.pageCard.label")
      }, [
        __props.title ? (openBlock(), createElementBlock(
          "div",
          {
            key: 0,
            class: normalizeClass(`${unref(ns).e("header")} flx-justify-between`)
          },
          [
            renderSlot(_ctx.$slots, "title", {}, () => [
              __props.titleLink ? (openBlock(), createElementBlock("a", {
                key: 0,
                href: unref(withBase)(__props.titleLink),
                target: unref(isValidURL)(__props.titleLink) ? "_blank" : "_self",
                "aria-label": removeHtmlTag(__props.title)
              }, [
                createElementVNode("span", {
                  class: "title flx-align-center",
                  innerHTML: __props.title
                }, null, 8, _hoisted_3)
              ], 8, _hoisted_2)) : __props.titleClick ? (openBlock(), createElementBlock("a", {
                key: 1,
                onClick: _cache[0] || (_cache[0] = () => __props.titleClick()),
                class: normalizeClass(unref(pointClass)),
                "aria-label": removeHtmlTag(__props.title)
              }, [
                createElementVNode("span", {
                  class: "title flx-align-center",
                  innerHTML: __props.title
                }, null, 8, _hoisted_5)
              ], 10, _hoisted_4)) : (openBlock(), createElementBlock("span", {
                key: 2,
                class: "title flx-align-center",
                innerHTML: __props.title
              }, null, 8, _hoisted_6))
            ]),
            renderSlot(_ctx.$slots, "page", normalizeProps(guardReactiveProps({ pagination })), () => [
              __props.page ? (openBlock(), createElementBlock("div", _hoisted_7, [
                renderSlot(_ctx.$slots, "page-left", normalizeProps(guardReactiveProps({ pagination })), () => [
                  createElementVNode("span", {
                    class: normalizeClass(["page-button", unref(hasNextData) ? unref(pointClass) : "disabled"]),
                    onClick: _cache[1] || (_cache[1] = ($event) => pagination(-1, "prev")),
                    role: "button",
                    "aria-label": unref(t)("tk.pageCard.prev"),
                    "aria-disabled": !unref(hasNextData)
                  }, [
                    createVNode(unref(_sfc_main$1), {
                      icon: unref(arrowLeftIcon),
                      size: 14,
                      "aria-hidden": "true"
                    }, null, 8, ["icon"])
                  ], 10, _hoisted_8)
                ]),
                renderSlot(_ctx.$slots, "page-right", normalizeProps(guardReactiveProps({ pagination })), () => [
                  createElementVNode("span", {
                    class: normalizeClass(["page-button", unref(hasNextData) ? unref(pointClass) : "disabled"]),
                    onClick: _cache[2] || (_cache[2] = ($event) => pagination(1, "next")),
                    role: "button",
                    "aria-label": unref(t)("tk.pageCard.next"),
                    "aria-disabled": !unref(hasNextData)
                  }, [
                    createVNode(unref(_sfc_main$1), {
                      icon: unref(arrowRightIcon),
                      size: 14,
                      "aria-hidden": "true"
                    }, null, 8, ["icon"])
                  ], 10, _hoisted_9)
                ])
              ])) : createCommentVNode("v-if", true)
            ])
          ],
          2
          /* CLASS */
        )) : createCommentVNode("v-if", true),
        renderSlot(_ctx.$slots, "default", normalizeProps(guardReactiveProps({ transitionName: transitionName.value, startAutoPage, closeAutoPage })))
      ], 10, _hoisted_1);
    };
  }
});

export { _sfc_main as default };
