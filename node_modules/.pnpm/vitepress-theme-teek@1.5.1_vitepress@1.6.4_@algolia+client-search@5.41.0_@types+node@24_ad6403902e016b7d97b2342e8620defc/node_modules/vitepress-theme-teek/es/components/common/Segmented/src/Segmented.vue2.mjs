import { defineComponent, mergeModels, useModel, createElementBlock, openBlock, normalizeClass, unref, Fragment, renderList, createBlock, mergeProps } from 'vue';
import 'vitepress';
import { useNamespace } from '../../../../composables/useNamespace.mjs';
import 'vitepress-theme-teek/theme-chalk/tk-copy-banner.css';
import '../../../../composables/useZIndex.mjs';
import _sfc_main$1 from './SegmentedItem.vue2.mjs';

var _sfc_main = /* @__PURE__ */ defineComponent({
  ...{ name: "Segmented" },
  __name: "Segmented",
  props: /* @__PURE__ */ mergeModels({
    options: {},
    disabled: { type: Boolean }
  }, {
    "modelValue": { type: [String, Number, Object, Boolean] },
    "modelModifiers": {}
  }),
  emits: ["update:modelValue"],
  setup(__props) {
    const ns = useNamespace("segmented");
    const model = useModel(__props, "modelValue");
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock(
        "fieldset",
        {
          class: normalizeClass(unref(ns).b())
        },
        [
          (openBlock(true), createElementBlock(
            Fragment,
            null,
            renderList(__props.options, (option) => {
              return openBlock(), createBlock(_sfc_main$1, mergeProps({
                key: option.name,
                modelValue: model.value,
                "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => model.value = $event)
              }, { ref_for: true }, option, { disabled: __props.disabled }), null, 16, ["modelValue", "disabled"]);
            }),
            128
            /* KEYED_FRAGMENT */
          ))
        ],
        2
        /* CLASS */
      );
    };
  }
});

export { _sfc_main as default };
