import { ref } from 'vue';

const useFocusTrap = (visible, emit) => {
  const focusStartRef = ref();
  const onFocusAfterTrapped = () => {
    emit("focus");
  };
  const onFocusAfterReleased = (event) => {
    if (event.detail?.focusReason !== "pointer") {
      focusStartRef.value = "first";
      emit("blur");
    }
  };
  const onFocusInTrap = (event) => {
    if (visible.value && event.target) {
      focusStartRef.value = event.target;
    }
  };
  const onFocusoutPrevented = (event) => {
    if (event.detail.focusReason === "pointer") {
      event.preventDefault();
    }
  };
  const onReleaseRequested = () => {
    emit("close");
  };
  return {
    focusStartRef,
    onFocusAfterTrapped,
    onFocusAfterReleased,
    onFocusInTrap,
    onFocusoutPrevented,
    onReleaseRequested
  };
};

export { useFocusTrap };
