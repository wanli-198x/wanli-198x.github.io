import { ref } from 'vue';
import { isClient } from '../helper/dist/index.mjs';
import { useEventListener } from './useEventListener.mjs';
import { useMounted } from './useMounted.mjs';
import { useScopeDispose } from './useScopeDispose.mjs';

const useScrollbarSize = () => {
  const width = ref(0);
  const height = ref(0);
  let measureElement = null;
  const createMeasureElement = () => {
    if (measureElement) return measureElement;
    document.querySelector("#measure-element")?.remove();
    measureElement = document.createElement("div");
    measureElement.id = "measure-element";
    measureElement.style.cssText = `
        position: fixed;
        top: -9999px;
        left: 0;
        width: 100px;
        height: 100px;
        overflow: scroll;
        visibility: hidden;
      `;
    document.body.appendChild(measureElement);
    return measureElement;
  };
  const clearMeasureElement = () => {
    if (!measureElement) return;
    if (document.body.contains(measureElement)) {
      document.body.removeChild(measureElement);
      measureElement = null;
    }
  };
  const calculate = () => {
    if (!isClient) return;
    const docElem = document.documentElement;
    const isQuirksMode = document.compatMode === "BackCompat";
    const hasVertical = isQuirksMode ? document.body.scrollHeight > document.body.clientHeight : docElem.scrollHeight > docElem.clientHeight;
    const hasHorizontal = isQuirksMode ? document.body.scrollWidth > document.body.clientWidth : docElem.scrollWidth > docElem.clientWidth;
    if (!hasVertical && !hasHorizontal) {
      width.value = 0;
      height.value = 0;
      return;
    }
    const measure = createMeasureElement();
    width.value = hasVertical ? measure.offsetWidth - measure.clientWidth : 0;
    height.value = hasHorizontal ? measure.offsetHeight - measure.clientHeight : 0;
  };
  const update = () => {
    calculate();
  };
  useEventListener(() => window, "resize", update);
  useMounted(() => {
    createMeasureElement();
    calculate();
  });
  calculate();
  useScopeDispose(clearMeasureElement);
  return { width, height, update };
};

export { useScrollbarSize };
