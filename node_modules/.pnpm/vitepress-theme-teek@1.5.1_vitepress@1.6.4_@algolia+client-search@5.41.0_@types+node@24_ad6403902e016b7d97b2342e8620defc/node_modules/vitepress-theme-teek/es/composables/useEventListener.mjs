import { computed, toValue, watch } from 'vue';
import { useScopeDispose } from './useScopeDispose.mjs';
import { isClient } from '../helper/dist/index.mjs';

const useEventListener = (target, event, handler, options) => {
  const cleanups = [];
  const cleanup = () => {
    cleanups.forEach((fn) => fn());
    cleanups.length = 0;
  };
  const register = (el2, event2, listener, options2) => {
    el2.addEventListener(event2, listener, options2);
    return () => el2.removeEventListener(event2, listener, options2);
  };
  const el = computed(() => {
    if (!isClient) return;
    const plain = toValue(target) || window;
    return plain?.$el ?? plain;
  });
  const stopWatch = watch(
    el,
    (val) => {
      cleanup();
      if (!val) return;
      cleanups.push(register(val, event, handler, options));
    },
    { flush: "post", immediate: true }
    // flush: "post" 确保在组件挂载后执行
  );
  const stop = () => {
    stopWatch();
    cleanup();
  };
  useScopeDispose(cleanup);
  return stop;
};

export { useEventListener };
