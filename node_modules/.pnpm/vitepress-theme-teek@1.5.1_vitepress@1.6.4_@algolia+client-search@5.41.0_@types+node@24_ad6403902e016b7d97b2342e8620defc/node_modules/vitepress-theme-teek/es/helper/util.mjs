import { isNumber, isStringNumber, isString } from './is.mjs';

const withBase = (base, path) => {
  if (!path) return;
  return /^(?:[a-z]+:|\/\/)/i.test(path) || !path.startsWith("/") ? path : `${base}${path}`.replace(/\/+/g, "/");
};
const upperFirst = (str) => {
  return str.charAt(0).toUpperCase() + str.slice(1);
};
const addUnit = (value, defaultUnit = "px") => {
  if (!value) return "";
  if (isNumber(value) || isStringNumber(value)) return `${value}${defaultUnit}`;
  else if (isString(value)) return value;
  return "";
};
const removeUnit = (value, defaultUnit = "px") => {
  if (!value) return;
  if (isNumber(value)) return value;
  if (isString(value)) return Number(value.replace(defaultUnit, ""));
  else return;
};
const get = (object, path, defaultValue) => {
  let obj = { ...object };
  if (!path.includes(".")) return obj[path] || defaultValue;
  else {
    path.split(".").forEach((item) => obj = obj[item] ?? "");
    return obj || defaultValue;
  }
};
const removeStorageItem = (key, storage, vague = false) => {
  if (!vague) return storage.removeItem(key);
  const keysToRemove = [];
  for (let i = 0; i < storage.length; i++) {
    const key2 = storage.key(i);
    if (key2 && key2.startsWith(key2)) {
      keysToRemove.push(key2);
    }
  }
  keysToRemove.forEach((key2) => storage.removeItem(key2));
};

export { addUnit, get, removeStorageItem, removeUnit, upperFirst, withBase };
