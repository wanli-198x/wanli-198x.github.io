/**
 * 替换字符串中的 $UUID{n} 和 $PATH{n} 占位符
 * $UUID 支持 $UUID2, $UUID6, $UUID10 等格式
 * - n 默认 6 位
 * - n 取值 1 - 15 之间
 * - 不区分大小写
 *
 * $PATH 支持 $PATH, $PATH10 等格式， 代表一级目录并将其转为为 hash 值
 * - n 默认 6 位
 * - n 取值 6 - 10 之间，低于 6 按 6 处理（防止碰撞）
 * - 不区分大小写
 *
 * @param placeholderStr 原始字符串
 * @param path 文件相对路径
 * @example
 * replacePlaceholder('/test/$UUID10') → '/test/a3k9m2x8p1'
 * replacePlaceholder('/user/$UUID6/$UUID2') → '/user/abc123/de'
 * replacePlaceholder('/$path/abc') → '/01.指南/abc' → '/264ca4/abc'
 * replacePlaceholder('/$path3/abc') → '/01.指南/abc' → '/264ca4/abc' (自动调整为 6 位)
 * replacePlaceholder('/$path-$uuid2/teek/$uuid1/$uuid') → '/264ca4-ls/teek/c/4ccyr' (混搭)
 */
export declare const replacePlaceholder: (placeholderStr: string, path: string) => string;
/**
 * 生成指定长度的随机字符串（数字 + 小写字母）
 *
 * @param length 字符串长度
 */
export declare const createRandomUuid: (length?: number) => string;
/**
 * 获取路径按 / 分割后的第一个有效分组（忽略空字符串）
 * @param path
 */
export declare const getFirstPathSegment: (path: string) => string;
/**
 * 清理路径中的无效层级（纯空格、空字符串）
 * @param path 原始路径（如 / /testawe/a/$uuid1）
 * @returns 清理后的路径（如 /testawe/a/$uuid1）
 */
export declare const cleanPathSpaces: (path: string) => string;
