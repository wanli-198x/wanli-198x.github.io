import { c as createPermalinks, g as getLocalePermalink, l as logger, s as standardLink } from './shared/vitepress-plugin-permalink.BxeX3prR.mjs';
export { a as createRewrites } from './shared/vitepress-plugin-permalink.BxeX3prR.mjs';
import { join, dirname } from 'node:path';
import { readFileSync } from 'node:fs';
import { fileURLToPath } from 'node:url';
import 'gray-matter';
import 'vite';
import 'picocolors';

function VitePluginVitePressPermalink(option = {}) {
  return [VitePluginVitePressAutoPermalink(option), VitePluginVitePressUsePermalink(option)];
}
function VitePluginVitePressAutoPermalink(option = {}) {
  let isExecute = false;
  let vitepressConfig = {};
  return {
    name: "vite-plugin-vitepress-auto-permalink",
    config(config) {
      if (isExecute) return;
      isExecute = true;
      const {
        site: { themeConfig, cleanUrls, locales },
        srcDir,
        rewrites,
        userConfig
      } = config.vitepress;
      vitepressConfig = config.vitepress;
      if (userConfig?.rewrites?.__create__ === "vitepress-plugin-permalink") return;
      const baseDir = option.path ? join(srcDir, option.path) : srcDir;
      const permalinks = createPermalinks({ ...option, path: baseDir }, cleanUrls);
      const pathToPermalink = {};
      const permalinkToPath = {};
      const localesKeys = Object.keys(locales || {});
      for (const [key, value] of Object.entries(permalinks)) {
        const rewriteFilePath = rewrites.map[`${key}.md`]?.replace(/\.md/, "") || key;
        const newValue = getLocalePermalink(localesKeys, key, value);
        if (permalinkToPath[newValue]) {
          logger.warn(`\u6C38\u4E45\u94FE\u63A5 '${newValue}' \u5DF2\u5B58\u5728\uFF0C\u5176\u5BF9\u5E94\u7684 '${permalinkToPath[newValue]}' \u5C06\u4F1A\u88AB '${key}' \u8986\u76D6`);
        }
        pathToPermalink[rewriteFilePath] = newValue;
        permalinkToPath[newValue] = rewriteFilePath;
      }
      themeConfig.permalinks = { map: pathToPermalink, inv: permalinkToPath };
      logger.info("Injected Permalinks Data Successfully. \u6CE8\u5165\u6C38\u4E45\u94FE\u63A5\u6570\u636E\u6210\u529F!");
      if (!localesKeys.length) {
        return setActiveMatchWhenUsePermalink({
          nav: themeConfig.nav,
          permalinkToPath,
          rewrites,
          cleanUrls
        });
      }
      localesKeys.forEach((localeKey) => {
        setActiveMatchWhenUsePermalink({
          nav: locales[localeKey].themeConfig?.nav,
          permalinkToPath,
          rewrites,
          cleanUrls
        });
      });
    },
    // 仅限 dev 环境生效
    configureServer(server) {
      const {
        site: {
          base,
          themeConfig: { permalinks }
        },
        rewrites
      } = vitepressConfig;
      if (!permalinks) return;
      server.middlewares.use((req, _res, next) => {
        if (req.url && req.url.includes(".md")) {
          const reqUrl = decodeURI(req.url).replace(/[?#].*$/, "").replace(/\.md$/, "").slice(base.length);
          const path = "/" + reqUrl.replace(/^\//, "");
          const filePath = permalinks.inv[path] || permalinks.inv[`${path}.html`];
          const realFilePath = rewrites.inv[`${filePath}.md`]?.replace(/\.md/, "") || filePath;
          if (realFilePath) req.url = req.url.replace(encodeURI(reqUrl), encodeURI(realFilePath));
        }
        next();
      });
    }
  };
}
const setActiveMatchWhenUsePermalink = (option, parentNav) => {
  const { nav = [], permalinkToPath, rewrites = {}, cleanUrls = false } = option;
  if (!nav.length) return;
  nav.forEach((item) => {
    if (item.link === "/" || item.activeMatch) return;
    const link = standardLink(item.link);
    const path = permalinkToPath[cleanUrls ? link : `${link.replace(/\.html/, "")}.html`];
    if (path) {
      const finalPath = rewrites.map[`${path}.md`]?.replace(/\.md/, "") || path;
      item.activeMatch = finalPath;
      if (parentNav) parentNav.activeMatch = finalPath.slice(0, finalPath.lastIndexOf("/"));
    }
    if (item.items?.length) {
      setActiveMatchWhenUsePermalink({ nav: item.items, permalinkToPath, rewrites, cleanUrls }, item);
    }
  });
};
const isESM = () => {
  return typeof __filename === "undefined" || typeof __dirname === "undefined";
};
const getDirname = () => {
  return isESM() ? dirname(fileURLToPath(import.meta.url)) : __dirname;
};
function VitePluginVitePressUsePermalink(option = {}) {
  const usePermalinkFile = `usePermalink`;
  const aliasUsePermalinkFile = `${getDirname()}/${usePermalinkFile}`;
  const NotFoundDelayComponentName = "NotFoundDelay";
  const NotFoundDelayComponentFile = `${NotFoundDelayComponentName}.vue`;
  const aliasNotFoundDelayComponentFile = `${getDirname()}/components/${NotFoundDelayComponentFile}`;
  const virtualModuleId = "virtual:not-found-option";
  const resolvedVirtualModuleId = `\0${virtualModuleId}`;
  let disabledPlugin = false;
  return {
    name: "vite-plugin-vitepress-use-permalink",
    config(config) {
      const { userConfig } = config.vitepress;
      if (userConfig?.rewrites?.__create__ === "vitepress-plugin-permalink") disabledPlugin = true;
      else {
        return {
          resolve: {
            alias: {
              [`./${usePermalinkFile}`]: aliasUsePermalinkFile,
              [`./${NotFoundDelayComponentFile}`]: aliasNotFoundDelayComponentFile
            }
          }
        };
      }
    },
    resolveId(id) {
      if (disabledPlugin) return;
      if (id === virtualModuleId) return resolvedVirtualModuleId;
    },
    load(id) {
      if (disabledPlugin) return;
      if (id === resolvedVirtualModuleId) return `export default ${JSON.stringify(option)}`;
      if (id.endsWith("vitepress/dist/client/theme-default/Layout.vue")) {
        const code = readFileSync(id, "utf-8");
        const slotName = "not-found";
        const notFoundSlotPosition = `<slot name="${slotName}" />`;
        const setupPosition = '<script setup lang="ts">';
        return code.replace(
          notFoundSlotPosition,
          `<${NotFoundDelayComponentName}><template #${slotName}>${notFoundSlotPosition}</template></${NotFoundDelayComponentName}>`
        ).replace(
          setupPosition,
          `${setupPosition}
import ${usePermalinkFile} from './${usePermalinkFile}'
import ${NotFoundDelayComponentName} from './${NotFoundDelayComponentFile}'`
        ).replace("<\/script>", `${usePermalinkFile}().startWatch() <\/script>`);
      }
    }
  };
}

export { VitePluginVitePressAutoPermalink, VitePluginVitePressUsePermalink, VitePluginVitePressPermalink as default };
