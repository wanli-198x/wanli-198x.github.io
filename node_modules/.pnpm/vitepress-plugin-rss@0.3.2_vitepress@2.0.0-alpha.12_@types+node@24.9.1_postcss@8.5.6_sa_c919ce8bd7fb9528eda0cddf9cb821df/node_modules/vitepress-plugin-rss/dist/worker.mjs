// src/worker.ts
import { parentPort, workerData } from "worker_threads";
async function processPost(config, post, index, renderHTML) {
  try {
    let html = "";
    if (renderHTML === true) {
      const { createMarkdownRenderer } = await import("vitepress");
      const mdRender = await createMarkdownRenderer(
        config.srcDir,
        config.markdown,
        config.site.base
      );
      html = mdRender.render(post.fileContent, post.env);
    } else if (typeof renderHTML === "function") {
      throw new Error("Custom renderHTML function not supported in worker, fallback to main thread");
    } else {
      html = "";
    }
    return {
      index,
      html
    };
  } catch (error) {
    return {
      index,
      html: "",
      error: error instanceof Error ? error.message : String(error)
    };
  }
}
async function main() {
  if (!parentPort) {
    throw new Error("This script must be run as a worker thread");
  }
  const { config, renderHTML, posts } = workerData;
  try {
    const results = [];
    for (let i = 0; i < posts.length; i++) {
      const result = await processPost(config, posts[i], i, renderHTML);
      results.push(result);
    }
    parentPort.postMessage({ success: true, results });
  } catch (error) {
    parentPort.postMessage({
      success: false,
      error: error instanceof Error ? error.message : String(error)
    });
  }
}
main().catch((error) => {
  if (parentPort) {
    parentPort.postMessage({
      success: false,
      error: error instanceof Error ? error.message : String(error)
    });
  }
});
